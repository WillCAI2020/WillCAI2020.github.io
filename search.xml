<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/12/1/</url>
    <content><![CDATA[Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).

<!--more-->
## Quick Start

### Create a new post

``` bash
$ hexo new "My New Post"
```

More info: [Writing](https://hexo.io/docs/writing.html)

### Run server

``` bash
$ hexo server
```

More info: [Server](https://hexo.io/docs/server.html)

### Generate static files

``` bash
$ hexo generate
```

More info: [Generating](https://hexo.io/docs/generating.html)

### Deploy to remote sites

``` bash
$ hexo deploy
```

More info: [Deployment](https://hexo.io/docs/one-command-deployment.html)]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
      </tags>
  </entry>
  <entry>
    <title>记录探索 Github Actions</title>
    <url>/2021/02/09/3/</url>
    <content><![CDATA[
{% cq %}在实践中成长与学习，在学习后巩固与整理。{% endcq %}
<!--more-->

## 概述

对于通过 Github Actions 部署博客，大概已经摸清原理。利用 Github Actions 提供的环境（我愿称其为虚拟主机），环境一般配置为 ubuntu-latest （我对 Linux 并不是很熟）。之前写过一篇文章，也是借鉴别人的代码，然后整理，并结合一下自己的理解完成 Github Actions 的 jobs。

那篇文章得到的结果是源码以及生成的静态文件均放在同一个代码仓库，只不过分属两个分支而已，并不如我所愿。

## 方法一

1. ### 代码

    ```yaml
    # 文件路径 .github/workflows/deployment.yml
    name: Deployment

    on:
      push:
        branches: [master] # only push events on source branch trigger deployment

    jobs:
      hexo-deployment:
        runs-on: ubuntu-latest
        env:
          TZ: Asia/Shanghai

        steps:
        - name: Checkout source
          uses: actions/checkout@v2
          with:
            submodules: true

        - name: Setup Node.js
          uses: actions/setup-node@v1
          with:
            node-version: '12.x'

        - name: Install dependencies & Generate static files
          run: |
            node -v
            npm i -g hexo-cli
            npm i
            hexo clean
            hexo g        
        - name: Deploy to Github Pages
          env:
            GIT_NAME: WillCAI2020
            GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
            REPO: github.com/WillCAI2020/WillCAI2020.github.io
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
          run: |
            cd ./public && git init && git add .
            git config --global user.name $GIT_NAME
            git config --global user.email $GIT_EMAIL
            git commit -m "Site deployed by GitHub Actions"
            git push --force --quiet "https://$GH_TOKEN@$REPO" master:master
    ```
2. ### 流程

    一个 Github Actions 可以有很多 jobs ，上述代码就一个`job：hexo-deployment`，并且设置它工作在 ubuntu-latest 上，一个 job 还能分为许多 steps，你可以为每个 step 设置name、uses（使用什么，可以选择自己写的 actions，也可以调用[官网提供](https://github.com/actions)的，比如`actions/checkout@v2`）、with（uses 的伴随参数）、env（run 所调用的参数）、run（在虚拟主机上调用的命令）。

    从`secrets.GH_TOKEN`与`secrets.GIT_EMAIL`可以看出，需要设置仓库的变量有`GH_TOKEN`与`GIT_EMAIL`。`GIT_NAME、GIT_EMAIL、GH_TOKEN、REPO`是 `step:Deploy to Github Pages`调用命令所需的的`env`变量。顺序执行，很容易看出：

    * 配置依赖环境（貌似不用装 Git）
      * 先调用官网提供的 actions 配置了版本为 `12.x 的 nodejs`
      * 然后 `node -v`观察是否成功配置
      * 再 `npm i -g hexo-cli`装好 hexo
      * 再`npm i`装好依赖的包
      * 然后就到熟悉的 `hexo clean`与`hexo generate`
    * 接下来把虚拟主机上本地仓库根目录中的 public 文件夹 （`hexo generate`生成的静态文件）提交到远程仓库
      * 进入 public 文件夹 同时将此文件夹初始化为一个 Git 仓库，并本地提交（`cd ./public && git init && git add .`）
      * 确定全局信息
        * `git config --global user.name $GIT_NAM`
        * `git config --global user.email $GIT_EMAIL`
      * 提交信息（`git commit -m "Site deployed by GitHub Actions"`）
      * 上传（`git push --force --quiet "https://$GH_TOKEN@$REPO" master:master`）
        * `master:master`前一个 master 指的是虚拟主机上本地分支，后一个 master 则为远程仓库分支。
3. ### GH_TOKEN

    [获取](https://github.com/settings/tokens)。`Generate new token` 来生成，随便你取什么名字，只要内容你正确拷贝到仓库的 Secrets 变量中就行了。这个东西相当于密码，创建的时候可以选择这个密码允许干些什么，我们只需要用这个来提交代码仓库，故而勾选 repo 就够了，并且这个 token 是能作用于该账号的所有仓库。

    然后前往源码所在仓库，添加 Secrets。

    这里取的名字注意要和代码中的相同，代码中调用`secrets.GH_TOKEN`，那这里的就要命名为 GH_TOKEN。

    ![Secrets](https://s3.ax1x.com/2021/02/09/ydi1tP.png)
4. ### GIT_EMAIL

    这个直接添加 Secrets，内容为账号绑定的邮箱。其实这也没必要添加，直接 env 中写明`GIT_EMAIL: 账号邮箱`。
5. ### 最终版

    详情见此文。

## 方法二
1. ### 概述
    通过 Docker 容器，Docker 属于操作系统层虚拟化，现在很热门，我不懂这个。

    我根据 [reuixiy](https://github.com/reuixiy/io-oi.me/) 为 Hugo 基于Docker、通过Arch Linux 完成 Actions 所编写的代码，改成了能实现 Hexo 部署的代码。

    改编后代码如下：

    ```yaml
    # .github/workflows/build.yml
    name: build

    on:
      push:
        branches:
        - main

    jobs:
      build:
        runs-on: ubuntu-latest

        steps:
        - name: 'Checkout codes'
          uses: actions/checkout@v2
          with:
            submodules: true

        - name: 'Building...'
          uses: ./.github/actions/hexo-deploy
          env:
            DEPLOY_REPO: WillCAI2020/WillCAI2020.github.io
            DEPLOY_BRANCH: main
            DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
            # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
            TZ: Asia/Shanghai 
    ```

    ```yaml
    # .github/actions/hexo-deploy/action.yml 
    name: 'hexo-deploy'
    author: 'according-reuixiy'
    description: 'Deploy your Hexo site to GitHub Pages, via GitHub Actions, with Arch Linux.'
    runs:
      using: 'docker'
      image: 'Dockerfile'
    branding:
      icon: 'arrow-up-circle'  
      color: 'yellow' 
    ```

    ```yaml
    # .github/actions/hexo-deploy/Dockerfile 
    FROM archlinux

    RUN pacman -Syu --noconfirm nodejs npm git openssh

    COPY entrypoint.sh /entrypoint.sh

    RUN chmod +x /entrypoint.sh
    ENTRYPOINT ["/entrypoint.sh"]
    ```

    ```sh
    # .github/actions/hexo-deploy/entrypoint.sh 
    #!/bin/bash
    # Required environment variables:
    #
    #   DEPLOY_KEY          SSH private key
    #
    #   DEPLOY_REPO         GitHub Pages repository
    #   DEPLOY_BRANCH       GitHub Pages publishing branch
    #
    #   GITHUB_ACTOR        GitHub username
    #   GITHUB_REPOSITORY   GitHub repository (source code)
    #
    #   TZ                  Timezone
    set -e
    REMOTE_REPO="git@github.com:${DEPLOY_REPO}.git"
    REMOTE_BRANCH="${DEPLOY_BRANCH}"
    git config --global user.name "${GITHUB_ACTOR}"
    git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
    # https://github.com/reuixiy/hugo-theme-meme/issues/27
    git config --global core.quotePath false
    ln -s /usr/share/zoneinfo/${TZ} /etc/localtime
    mkdir /root/.ssh
    ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts && \
    echo "${DEPLOY_KEY}" > /root/.ssh/id_rsa && \
    chmod 400 /root/.ssh/id_rsa
    git clone --recurse-submodules "git@github.com:${GITHUB_REPOSITORY}.git" site && \
    cd site

    node -v
    npm i -g hexo-cli
    npm i
    hexo clean
    hexo g

    pushd public \
    && git init \
    && git remote add origin $REMOTE_REPO \
    && git add -A \
    && git checkout -b $REMOTE_BRANCH \
    && git commit -m "Automated deployment @ $(date '+%Y-%m-%d %H:%M:%S') ${TZ}" \
    && git push -f origin $REMOTE_BRANCH \
    && popd
    rm -rf /root/.ssh
    ```

    使用方法参考[此文](https://io-oi.me/tech/deploy-hugo-to-github-pages-via-github-actions/)即可。

2. ### 说明

    通过这个方法，我接触并浅显地了解了 Docker，明白 Dockerfile 中通过 `FROM archlinux` 能指明操作系统，为了更改 Dockerfile，我搜索并学习了一些 ArchLinux 的指令，比如通过 pacman 来安装包。

    大致阅览了如下文章：

    * [在 Docker 中使用 Archlinux 的折腾记录](https://mogeko.me/2019/063/)
    * [pacman (简体中文)](https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%89%8B%E5%8A%A8%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85_pacman)

3. ### 报错

    突然发现 Github Actions 报错了，原因是 `failed to initialize alpm library`，于是去查询解决方法，普遍答复为以 root 权限运行 `pacman-db-upgrade`即可（是因为 yaourt 更新 pacman 以后，没更新 pacman 资料库的关系），于是我在 Dockerfile 中加上该命令，却报错 `You must have correct permissions to upgrade the database`，我觉得是没有 root 权限，于是找寻如何切换 root 权限，最终不了了之。

    阅览以下文章：

    * [failed to initialize alpm library](https://blog.elleryq.idv.tw/2014/12/failed-to-initialize-alpm-library.html)
    * [Docker 运行时的用户与组管理](https://segmentfault.com/a/1190000016781704)
    * [如何获得docker容器里面的root权限](https://blog.csdn.net/u012763794/article/details/80943472)
    * [Linux系统下 -bash: apt-get: command not found](https://blog.csdn.net/u010741032/article/details/102606888)
    * [Shell echo命令](https://www.runoob.com/linux/linux-shell-echo.html)
    * [Linux mkdir 命令](https://www.runoob.com/linux/linux-comm-mkdir.html)
    * [容器内使用sudo 报bash: sudo: command not found](https://blog.csdn.net/roxxo/article/details/90410259)
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>探索“亮/暗”主题实现</title>
    <url>/2021/02/11/009/</url>
    <content><![CDATA[
尝试为博客添加一个切换亮暗主题的功能。
<!--more-->

## 方法一

我的版本：

{% tabs version %}
<!-- tab Next -->

<strong><div align="center">version：8.2.1</div></strong>

<!-- endtab -->

<!-- tab Hexo-->
<strong><div align="center">hexo: 5.3.0
hexo-cli: 3.1.0</div></strong>
<!-- endtab -->

{% endtabs %}

<hr>

试试

]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试加密功能</title>
    <url>/2021/02/10/008/</url>
    <content><![CDATA[
测试插件 hexo-blog-encrypt。
<!--more-->

```c
npm install --save hexo-blog-encrypt
```

```yaml
# 文章加密功能
encrypt:
    enable: true
```

```yaml
password: 博客密码
abstract: home 主页显示的文字提示
message: 查看博客，密码输入框上面的描述性文字
```

[hexo-blog-encrypt 资料](https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md)。


{% fold 点击显/隐内容 %}
```nginx
{% fold 点击显/隐内容 %}
something you want to fold, include code block.
{% endfold %}
```
{% endfold %}]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>记录 tags 用法</title>
    <url>/2021/02/10/7/</url>
    <content><![CDATA[
Next主题使用的内置tag，官方都已经写好js，直接使用对应的语法糖加入到文章中，就可以实现多样式、多功能的效果。
<!--more-->

## 设置

```yaml
# 配置文件
# ---------------------------------------------------------------
# Tags Settings
# See: https://theme-next.js.org/docs/tag-plugins/
# ---------------------------------------------------------------

# Note tag (bootstrap callout)
note:
  # Note tag style values:
  #  - simple    bootstrap callout old alert style. Default.
  #  - modern    bootstrap callout new (v2-v3) alert style.
  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.
  #  - disabled  disable all CSS styles import of note tag.
  style: flat
  icons: false
  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).
  # Offset also applied to label tag variables. This option can work with disabled note tag.
  light_bg_offset: 0

# Tabs tag
tabs:
  transition:
  tabs: false
  labels: true

# PDF tag
# NexT will try to load pdf files natively, if failed, pdf.js will be used.
# So, you have to install the dependency of pdf.js if you want to use pdf tag and make it available to all browsers.
# Dependencies: https://github.com/next-theme/theme-next-pdf
pdf:
  enable: false
  # Default height
  height: 500px

# Mermaid tag
mermaid:
  enable: false
  # Available themes: default | dark | forest | neutral
  theme: forest
```

## 使用

看[官方文档](https://theme-next.js.org/docs/tag-plugins/)。

### [Note](https://theme-next.js.org/docs/tag-plugins/note.html)

#### 配置

```
note:
  # Note tag style values:
  #  - simple    bs-callout old alert style. Default.
  #  - modern    bs-callout new (v2-v3) alert style.
  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.
  #  - disabled  disable all CSS styles import of note tag.
  style: modern
  icons: true
  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).
  # Offset also applied to label tag variables. This option can work with disabled note tag.
  light_bg_offset: 0
```

#### 用法

```nginx
{% note default %}
##### Default Header
Welcome to [Hexo!](https://hexo.io)
{% endnote %}
```

{% note default %}
##### Default Header
Welcome to [Hexo!](https://hexo.io)
{% endnote %}

```nginx
{% note primary %}
##### Primary Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}
```

{% note primary %}
##### Primary Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}

```nginx
{% note info %}
##### Info Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}
```
{% note info %}
##### Info Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}

```nginx
{% note success %}
##### Success Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}
```

{% note success %}
##### Success Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}

```nginx
{% note warning %}
##### Warning Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}
```

{% note warning %}
##### Warning Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}

### [Tabs](https://theme-next.js.org/docs/tag-plugins/tabs.html)

#### 配置

```yaml
tabs:
  transition:
    tabs: false
    labels: true
```

#### 用法

```nginx
{% tabs Unique name, [index] %}
<!-- tab [Tab caption] [@icon] -->
Any content (support inline tags too).
<!-- endtab -->
{% endtabs %}
```

```nginx
{% tabs First unique name %}
<!-- tab -->
**This is Tab 1.**
<!-- endtab -->

<!-- tab -->
**This is Tab 2.**
<!-- endtab -->

<!-- tab -->
**This is Tab 3.**
<!-- endtab -->
{% endtabs %}
```

{% tabs First unique name %}
<!-- tab -->
**This is Tab 1.**
<!-- endtab -->

<!-- tab -->
**This is Tab 2.**
<!-- endtab -->

<!-- tab -->
**This is Tab 3.**
<!-- endtab -->
{% endtabs %}

可以嵌套使用

### [Mermaid](https://theme-next.js.org/docs/tag-plugins/mermaid.html)

#### 配置

```yaml
# Mermaid tag
mermaid:
  enable: true
  # Available themes: default | dark | forest | neutral
  theme: forest
```

#### 使用

```nginx
{% mermaid type %}
{% endmermaid %}
```

```nginx
{% mermaid graph TD %}
A[Hard] -->|Text| B(Round)
B --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
{% endmermaid %}
```

{% mermaid graph TD %}
A[Hard] -->|Text| B(Round)
B --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
{% endmermaid %}

```nginx
{% mermaid graph TD %}
A[Christmas] -->|Get money| B(Go shopping)
B --> C{Let me thinksssss<br/>ssssssssssssssssssssss}
C -->|One| D[Laptop]
C -->|Two| E[iPhone]
C -->|Three| F[Car]
{% endmermaid %}
```

{% mermaid graph TD %}
A[Christmas] -->|Get money| B(Go shopping)
B --> C{Let me think}
C -->|One| D[Laptop]
C -->|Two| E[iPhone]
C -->|Three| F[Car]
{% endmermaid %}

### cq && centerquote

```nginx
{% cq %}
**文本居中**
引用样式
cq 与 centerquote 等价
{% endcq %}
```

{% centerquote %}
**文本居中**
引用样式
cq与centerquote等价
{% endcenterquote %}

### [Label](https://theme-next.js.org/docs/tag-plugins/label.html)

```nginx
# 内置label标签。
{% label default@default %}
{% label primary@primary %}
{% label success@success %}
{% label info@info %}
{% label warning@warning %}
{% label danger@danger %}
```


<div align="center">
{% label default@default %}
{% label primary@primary %}
{% label success@success %}
{% label info@info %}
{% label warning@warning %}
{% label danger@danger %}
</div>

### [button && btn](https://theme-next.js.org/docs/tag-plugins/button.html)

**内置button**标签。btn与button等价。

```
{% btn https://www.baidu.com, 百度首页, download fa-lg fa-fw %}
```

<div align="center">{% btn https://www.baidu.com, 百度首页, download fa-lg fa-fw %}</div>

## 参考文章

* [Next主题优化-内置tags篇](http://pygo2.top/articles/25933/)

* [Tag Plugins](https://theme-next.js.org/docs/tag-plugins/)]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 bash 脚本提高效率-git push</title>
    <url>/2021/02/09/6/</url>
    <content><![CDATA[
每次提交都要输重复命令，于是想到能否用过脚本来自动执行，省的手动重复输入这三个命令。上网查询，发现可以通过 bash 命令。
<!--more-->

## 概述

利用 git 命令更新代码仓库，普遍三个命令：

```c
git add .
git commit -m "message"
git push origin main
```

每次提交都要输一遍这三行，于是想到能否用过脚本来自动执行这三个，省的手动重复输入这三个命令。上网查询，发现可以通过 bash 命令。

## 实现

根据网上教程，编写出以下代码：

```bash
# 命名：git_WillCAI2020.bat
@echo off
echo "Introduction: Update the remote repository, written by ruchan"
echo "Steps:"

::注意修改为你自己的仓库地址
echo "1. Move to working directory" 
cd D:\Github\WillCAI2020\blog

echo "2. Display the status of the working directory and staging area" 
git status

echo "3. Start submitting code to the local repository"
git add .
 
echo "4. Commit the changes to the local repository"
set /p message=请输入提交信息：
echo %message%
git commit -m "%message%"
 
echo "5. Push the changes to the remote git server"
git push origin main
 
echo "You have successfully submitted!"
pause
```

步骤如代码中注释，通俗易懂。

注意修改仓库路径，命名以 bat 结尾，存放位置任意。

执行代码时，还能手动输入待提交信息（利于帮助管理代码）。

使用时双击运行即可。

## 扩展

还想到能否通过 bash 来执行：

```c
hexo clean && hexo g && hexo s
```

然后直接把相关命令通过 dos 运行，这是发现结果并不如愿。

于是发现应该先通过 bash 命令启动 git-bash，然后在 Git 中执行 `hexo clean && hexo g && hexo s`。

得到：

```bash
@echo off

echo "Introduction: Preview your hexo site locally, written by ruchan"
echo "Steps:"

start C:\环境\Git\git-bash.exe --cd=D:\Github\WillCAI2020\blog -c "hexo clean && hexo g && hexo s"
```

虽然发现能行，但速度不大满意，还是手动输吧。

## 参考

* [Windows 下bat脚本git提交代码到github](https://blog.csdn.net/Ep_Little_prince/article/details/108895103)
* [.bat脚本基本命令语法](https://www.cnblogs.com/iTlijun/p/6137027.html)
* [.Bat之批处理实现手动输入变量参数](https://blog.csdn.net/laozhuxinlu/article/details/52853787)
* [bat 批处理教程](https://www.w3cschool.cn/dosmlxxsc1/wvqyr9.html)

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>git</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>提示：Your branch is up to date  ...</title>
    <url>/2021/02/09/5/</url>
    <content><![CDATA[
解决提示：“
On branch main
Your branch is up to date with 'origin/main'.”
不能上传代码的问题。
<!--more-->
## 记录

执行 git status 发现提示：

```c
On branch main
Your branch is up to date with 'origin/main'.
```

直接 `git add .`、`git commit -m "修改"`，`git push origin main`，发现无法提交。

于是搜索，根据这篇文章： [git commit提示Your branch is up-to-date with 'origin/master'.](https://www.jianshu.com/p/e25c763b9816)，认为是版本分支的原因（不大懂）。

### 新建分支

```c
git branch newbranch
//查看是否是否创建成功
git branch 
//若结果中有 newbranch，即成功
```

### 切换新分支并提交改动

```c
git checkout newbranch
    git add . 
git commit -m "改动"
```

### 切换主分支并合并改动

```c
git checkout master
git merge newbranch 
```

### 提交代码

```c
git push -u origin master
```

### 删除新分支

```c
git branch -D newbranch
```

## 后记

完成上述流程后，已能提交代码，但是仍会提示：

```
On branch main
Your branch is up to date with 'origin/main'.
```

根据[此文](https://blog.csdn.net/S_o_l_o_n/article/details/108130341)，暂不理会。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>实现 Github Actions 持续部署</title>
    <url>/2021/02/09/4/</url>
    <content><![CDATA[
完整实现 Github Actions 持续部署！
<!--more-->

## 更新

浏览 Docker 方法，发现它模拟的是本地生成 SSH 密钥，然后通过密钥连接并推送代码到远程仓库。我也尝试把 `entrypoint.sh`中的命令化为一个个步骤，直接放在 jobs 中，而不是放在 Docker 容器中，但是发现我不会 linux，所以后面再说。

最终选择仍以 token 为路径，来提交代码。

## 实现

代码如下：

```
# 文件路径 .github/workflows/deployment.yml
name: Deployment

on:
  push:
    branches: [main] # only push events on source branch trigger deployment

jobs:
  hexo-deployment:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai

    steps:
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        
    - name: Install dependencies & Generate static files
      run: |
        node -v
        npm i -g hexo-cli
        npm i
        hexo clean
        hexo g        
    - name: Deploy to Github Pages
      env:
        GIT_NAME: WillCAI2020
        GIT_EMAIL: ${{ secrets.GIT_EMAIL_BLOG }}
        REPO: github.com/WillCAI2020/WillCAI2020.github.io
        GH_TOKEN: ${{ secrets.GH_TOKEN_BLOG }}
      run: |
        cd ./public && git init && git checkout -b main && git add .
        git config --global user.name $GIT_NAME
        git config --global user.email $GIT_EMAIL
        git commit -m "GitHub Actions Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"
        git push --force --quiet "https://$GH_TOKEN@$REPO" main:main

```

## 注意

变量命名以及步骤解释在此文均有讲解，这里不再赘述。

### 分支

2020年10月份开始 GitHub 把默认的 master 分支换成了 main 分支。为了方便，我在远程仓库的分支也设为了 main 分支。这里注意：本地 `git init`后默认仍为 master 分支，此时应将新建 main 分支，并切换到 main 分支。

```c
//新建 main 分支，并切换到 main 分支
git checkout -b main
```

### 仓库

我的源码放在了仓库 blog 中，但是为使用 gh-pages，生成的 public 静态文件必须放在 username.github.io 的仓库中。

故而添加的 Secrets 变量均在 bolg 仓库中。

## 错误总结

原本我的仓库均只有 main 分支，而 jobs 代码并未加上 `git checkout -b main`，导致报错 `error: failed to push some refs to`，根据[此文](https://www.jianshu.com/p/c6f2e1ca2999)，同时浏览了 [Git push 讲解](https://www.yiibai.com/git/git_push.html)，然后从“分支名不完整、没有提交代码、本地与远程产生冲突”入手。

经过一番苦思，突然想到把远程那虚拟主机当成自己的电脑，直接 `git init`，然后 `git add .`，提交的不就是本地的 master 分支吗，但是我 `git push`指明本地的是 main 分支，而 main 分支不存在当然会报错，于是加上 `git checkout -b main`，解决问题。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>记录</title>
    <url>/2021/02/07/2/</url>
    <content><![CDATA[
随手记。

<!--more-->
```
hexo init
git init
由于使用SSH多账号，故而添加远程地址时要注意
为Github Actions 做准备
由于想在blog仓库放源码（要部署的文件一定得放在username.github.io仓库中），故而新生成一个SSH密钥，公钥作为username.github.io的Deploy KEY，私钥作为blog的变量
```

```css
html,body {
	margin: 0;
	padding:0;
	height: 100%;
}

.main{
	min-height:100%;
	height: auto !important;
	height: 100%; /*IE6不识别min-height*/
	position: relative;
}

.main-inner{
	margin: 0 auto;
	padding-bottom: 80px;
}
	
.footer{
	position: absolute;
	bottom: 0;
	width: 100%;
	height: 60px;
	clear: both;
}
```

```
git clone https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas_ribbon
```

```
git submodule add --depth 1 https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas_ribbon
```

```
git rm -r --cached source/lib/canvas_ribbon
```

```
git submodule add --depth 1 https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest
```

```
git rm -r --cached source/lib/canvas-nest
```

```
git rm -r --cached _config.landscape.yml
```

```
npm install hexo-generator-searchdb --save
```

```
https://github.com/WillCAI2020/blog/edit/main/source/
```

![彩色标签页](https://s3.ax1x.com/2021/02/09/yaffns.png)

```
a7ee87d5b4b364c71deb97c0a88976b982c41c01
```

```
git rm -r --cached actions
```

```
52a73c0d7f6af17588b4941829cd0ef8da372875
```

```
html是由很多元素组成的，而每个元素的样式由css控制，css有很多属性，比如这个background，还有这个设置透明度的，设置内边距(padding)，外边距(margin)的。
我们要充分利用浏览器的开发者工具，谷歌浏览器是F12，Edge也是，你看，我用这个选中我想修改的元素，而元素的样式可以通过一个又一个的类来控制，你看这个post-block类，（class就是类的意思：class="post-block"），在css，我们通过 .post-block来为类设置属性，你看我改变它的background
```

```c
git submodule add --depth 1 https://github.com/theme-next/theme-next-pace source/lib/pace
```

![加载进度条](https://s3.ax1x.com/2021/02/09/ydzxJS.png)

```
git submodule add --depth 1 https://github.com/stevenjoezhang/live2d-widget.git source/lib/live2d-widget
```

]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
