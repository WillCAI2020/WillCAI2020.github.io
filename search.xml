<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录探索 Github Actions</title>
    <url>/3/</url>
    <content><![CDATA[
{% cq %}在实践中成长与学习，在学习后巩固与整理。{% endcq %}
<!--more-->

## 概述

对于通过 Github Actions 部署博客，大概已经摸清原理。利用 Github Actions 提供的环境（我愿称其为虚拟主机），环境一般配置为 ubuntu-latest （我对 Linux 并不是很熟）。之前写过一篇文章，也是借鉴别人的代码，然后整理，并结合一下自己的理解完成 Github Actions 的 jobs。

那篇文章得到的结果是源码以及生成的静态文件均放在同一个代码仓库，只不过分属两个分支而已，并不如我所愿。

## 方法一

1. ### 代码

    ```yaml
    # 文件路径 .github/workflows/deployment.yml
    name: Deployment

    on:
      push:
        branches: [master] # only push events on source branch trigger deployment

    jobs:
      hexo-deployment:
        runs-on: ubuntu-latest
        env:
          TZ: Asia/Shanghai

        steps:
        - name: Checkout source
          uses: actions/checkout@v2
          with:
            submodules: true

        - name: Setup Node.js
          uses: actions/setup-node@v1
          with:
            node-version: '12.x'

        - name: Install dependencies & Generate static files
          run: |
            node -v
            npm i -g hexo-cli
            npm i
            hexo clean
            hexo g        
        - name: Deploy to Github Pages
          env:
            GIT_NAME: WillCAI2020
            GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
            REPO: github.com/WillCAI2020/WillCAI2020.github.io
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
          run: |
            cd ./public && git init && git add .
            git config --global user.name $GIT_NAME
            git config --global user.email $GIT_EMAIL
            git commit -m "Site deployed by GitHub Actions"
            git push --force --quiet "https://$GH_TOKEN@$REPO" master:master
    ```
2. ### 流程

    一个 Github Actions 可以有很多 jobs ，上述代码就一个`job：hexo-deployment`，并且设置它工作在 ubuntu-latest 上，一个 job 还能分为许多 steps，你可以为每个 step 设置name、uses（使用什么，可以选择自己写的 actions，也可以调用[官网提供](https://github.com/actions)的，比如`actions/checkout@v2`）、with（uses 的伴随参数）、env（run 所调用的参数）、run（在虚拟主机上调用的命令）。

    从`secrets.GH_TOKEN`与`secrets.GIT_EMAIL`可以看出，需要设置仓库的变量有`GH_TOKEN`与`GIT_EMAIL`。`GIT_NAME、GIT_EMAIL、GH_TOKEN、REPO`是 `step:Deploy to Github Pages`调用命令所需的的`env`变量。顺序执行，很容易看出：

    * 配置依赖环境（貌似不用装 Git）
      * 先调用官网提供的 actions 配置了版本为 `12.x 的 nodejs`
      * 然后 `node -v`观察是否成功配置
      * 再 `npm i -g hexo-cli`装好 hexo
      * 再`npm i`装好依赖的包
      * 然后就到熟悉的 `hexo clean`与`hexo generate`
    * 接下来把虚拟主机上本地仓库根目录中的 public 文件夹 （`hexo generate`生成的静态文件）提交到远程仓库
      * 进入 public 文件夹 同时将此文件夹初始化为一个 Git 仓库，并本地提交（`cd ./public && git init && git add .`）
      * 确定全局信息
        * `git config --global user.name $GIT_NAM`
        * `git config --global user.email $GIT_EMAIL`
      * 提交信息（`git commit -m "Site deployed by GitHub Actions"`）
      * 上传（`git push --force --quiet "https://$GH_TOKEN@$REPO" master:master`）
        * `master:master`前一个 master 指的是虚拟主机上本地分支，后一个 master 则为远程仓库分支。
3. ### GH_TOKEN

    [获取](https://github.com/settings/tokens)。`Generate new token` 来生成，随便你取什么名字，只要内容你正确拷贝到仓库的 Secrets 变量中就行了。这个东西相当于密码，创建的时候可以选择这个密码允许干些什么，我们只需要用这个来提交代码仓库，故而勾选 repo 就够了，并且这个 token 是能作用于该账号的所有仓库。

    然后前往源码所在仓库，添加 Secrets。

    这里取的名字注意要和代码中的相同，代码中调用`secrets.GH_TOKEN`，那这里的就要命名为 GH_TOKEN。

    ![Secrets](https://s3.ax1x.com/2021/02/09/ydi1tP.png)
4. ### GIT_EMAIL

    这个直接添加 Secrets，内容为账号绑定的邮箱。其实这也没必要添加，直接 env 中写明`GIT_EMAIL: 账号邮箱`。
5. ### 最终版

    详情见[此文](https://crcrc.cn/4/)。

## 方法二
1. ### 概述
    通过 Docker 容器，Docker 属于操作系统层虚拟化，现在很热门，我不懂这个。

    我根据 [reuixiy](https://github.com/reuixiy/io-oi.me/) 为 Hugo 基于Docker、通过Arch Linux 完成 Actions 所编写的代码，改成了能实现 Hexo 部署的代码。

    改编后代码如下：

    ```yaml
    # .github/workflows/build.yml
    name: build

    on:
      push:
        branches:
        - main

    jobs:
      build:
        runs-on: ubuntu-latest

        steps:
        - name: 'Checkout codes'
          uses: actions/checkout@v2
          with:
            submodules: true

        - name: 'Building...'
          uses: ./.github/actions/hexo-deploy
          env:
            DEPLOY_REPO: WillCAI2020/WillCAI2020.github.io
            DEPLOY_BRANCH: main
            DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
            # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
            TZ: Asia/Shanghai 
    ```

    ```yaml
    # .github/actions/hexo-deploy/action.yml 
    name: 'hexo-deploy'
    author: 'according-reuixiy'
    description: 'Deploy your Hexo site to GitHub Pages, via GitHub Actions, with Arch Linux.'
    runs:
      using: 'docker'
      image: 'Dockerfile'
    branding:
      icon: 'arrow-up-circle'  
      color: 'yellow' 
    ```

    ```yaml
    # .github/actions/hexo-deploy/Dockerfile 
    FROM archlinux

    RUN pacman -Syu --noconfirm nodejs npm git openssh

    COPY entrypoint.sh /entrypoint.sh

    RUN chmod +x /entrypoint.sh
    ENTRYPOINT ["/entrypoint.sh"]
    ```

    ```sh
    # .github/actions/hexo-deploy/entrypoint.sh 
    #!/bin/bash
    # Required environment variables:
    #
    #   DEPLOY_KEY          SSH private key
    #
    #   DEPLOY_REPO         GitHub Pages repository
    #   DEPLOY_BRANCH       GitHub Pages publishing branch
    #
    #   GITHUB_ACTOR        GitHub username
    #   GITHUB_REPOSITORY   GitHub repository (source code)
    #
    #   TZ                  Timezone
    set -e
    REMOTE_REPO="git@github.com:${DEPLOY_REPO}.git"
    REMOTE_BRANCH="${DEPLOY_BRANCH}"
    git config --global user.name "${GITHUB_ACTOR}"
    git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
    # https://github.com/reuixiy/hugo-theme-meme/issues/27
    git config --global core.quotePath false
    ln -s /usr/share/zoneinfo/${TZ} /etc/localtime
    mkdir /root/.ssh
    ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts && \
    echo "${DEPLOY_KEY}" > /root/.ssh/id_rsa && \
    chmod 400 /root/.ssh/id_rsa
    git clone --recurse-submodules "git@github.com:${GITHUB_REPOSITORY}.git" site && \
    cd site

    node -v
    npm i -g hexo-cli
    npm i
    hexo clean
    hexo g

    pushd public \
    && git init \
    && git remote add origin $REMOTE_REPO \
    && git add -A \
    && git checkout -b $REMOTE_BRANCH \
    && git commit -m "Automated deployment @ $(date '+%Y-%m-%d %H:%M:%S') ${TZ}" \
    && git push -f origin $REMOTE_BRANCH \
    && popd
    rm -rf /root/.ssh
    ```

    使用方法参考[此文](https://io-oi.me/tech/deploy-hugo-to-github-pages-via-github-actions/)即可。

2. ### 说明

    通过这个方法，我接触并浅显地了解了 Docker，明白 Dockerfile 中通过 `FROM archlinux` 能指明操作系统，为了更改 Dockerfile，我搜索并学习了一些 ArchLinux 的指令，比如通过 pacman 来安装包。

    大致阅览了如下文章：

    * [在 Docker 中使用 Archlinux 的折腾记录](https://mogeko.me/2019/063/)
    * [pacman (简体中文)](https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%89%8B%E5%8A%A8%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85_pacman)

3. ### 报错

    突然发现 Github Actions 报错了，原因是 `failed to initialize alpm library`，于是去查询解决方法，普遍答复为以 root 权限运行 `pacman-db-upgrade`即可（是因为 yaourt 更新 pacman 以后，没更新 pacman 资料库的关系），于是我在 Dockerfile 中加上该命令，却报错 `You must have correct permissions to upgrade the database`，我觉得是没有 root 权限，于是找寻如何切换 root 权限，最终不了了之。

    几天后查看 reuixiy 的[ hugo-deploy](https://github.com/reuixiy/hugo-deploy)源码，发现解决方法为将 Dockerfile 中的`FROM archlinux` 修改为 `FROM archlinux/archlinux:base-20210203.0.15035`。

    Emm，最终还是选择使用方法一🙃。
    
    阅览以下文章：
    
    * [failed to initialize alpm library](https://blog.elleryq.idv.tw/2014/12/failed-to-initialize-alpm-library.html)
    * [Docker 运行时的用户与组管理](https://segmentfault.com/a/1190000016781704)
    * [如何获得docker容器里面的root权限](https://blog.csdn.net/u012763794/article/details/80943472)
    * [Linux系统下 -bash: apt-get: command not found](https://blog.csdn.net/u010741032/article/details/102606888)
    * [Shell echo命令](https://www.runoob.com/linux/linux-shell-echo.html)
    * [Linux mkdir 命令](https://www.runoob.com/linux/linux-comm-mkdir.html)
    * [容器内使用sudo 报bash: sudo: command not found](https://blog.csdn.net/roxxo/article/details/90410259)
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>添加一个悬浮组件（next 主题）</title>
    <url>/11/</url>
    <content><![CDATA[
<p class='div-border green'>为博客添加一个悬浮组件，内置功能：回到顶端、实现深色模式、跳转评论区、播放背景音乐。</p>

<!--more-->

{% note primary  no-icon%}

本文所用代码大部分来源于此文：[hexo（sakura）给博客增添侧边栏（回到顶部，跳转评论，深色模式，播放音乐）](https://blog.csdn.net/cungudafa/article/details/106500877),以及[大佬Sanarous](https://bestzuo.cn/)的网站源码，我只是基于这些代码，结合我自己的喜好，就 next 主题做出些简陋的改变。

{% endnote %}

下面先给出实际操作。

## 操作

很简单，把如下代码放入`根目录/source/_data/body-end.njk`文件中即可。（body-end.njk 内的代码经 next 主题的注入功能后会添加至静态网页 `</body>`标签上方）

{% fold 点击显/隐代码 %}

```html
{# 添加小组件 #}
<div id="RightDownBtn">
    <a id="btn" href="javascript:void(0)" target="_self" style="" title="回到顶部">
        <svg style=" width: 1.5em;height: 1.5em;" class="icon" aria-hidden="true">
            <use xlink:href="#icon-xuanfufanhuidingbu">
                <svg id="icon-xuanfufanhuidingbu" viewBox="0 0 1024 1024">
                    <path d="M0 512c0 282.624 229.376 512 512 512s512-229.376 512-512S794.624 0 512 0 0 229.376 0 512z"
                        fill="#1989FA"></path>
                    <path
                        d="M736.768 263.68H287.232c-12.288 0-23.04 10.752-23.04 23.04s10.752 23.04 23.04 23.04H737.28c12.288 0 23.04-10.752 23.04-23.04s-10.752-23.04-23.552-23.04m-207.872 105.472c-1.536-1.536-4.608-4.608-7.68-4.608-3.072-1.536-6.144-1.536-7.68-1.536-3.072 0-6.144 0-7.68 1.536-3.072 1.536-4.608 3.072-7.68 4.608l-186.368 186.368c-9.216 9.216-9.216 23.04 0 32.768 9.216 9.216 23.04 9.216 32.768 0l145.92-145.92V737.28c0 12.288 10.752 23.04 23.04 23.04s23.04-10.752 23.04-23.04V442.368l145.92 145.92c4.608 4.608 10.752 6.144 16.896 6.144 6.144 0 12.288-1.536 16.896-6.144 9.216-9.216 9.216-23.04 0-32.768l-187.392-186.368z"
                        fill="#FFFFFF"></path>
                </svg>
            </use>
        </svg>
    </a>
    <a onclick="scrollToComment()" target="_self" title="转至评论区">
		<svg style=" width: 1.5em;height: 1.5em;" class="icon" aria-hidden="true">
			<use xlink:href="#icon-ketangtaolun">
				<svg t=1592151989892 id=icon-ketangtaolun viewBox="0 0 1025 1024" version=1.1
					xmlns="http://www.w3.org/2000/svg" p-id=36645>
					<path d="M512 512m-512 0a512 512 0 1 0 1024 0 512 512 0 1 0-1024 0Z" fill="#FF5A20" p-id=36646></path>
					<path
						d="M238.481236 628.415011V378.631347c1.130243-2.260486 2.260486-3.390728 2.260486-5.651215 12.432671-42.949227 48.600442-72.335541 93.810154-72.33554 122.066225-1.130243 244.13245-1.130243 366.198676 0 45.209713 0 81.377483 28.256071 93.810154 72.33554 1.130243 2.260486 2.260486 4.520971 2.260486 5.651215v252.04415l-3.390728 10.172185c-13.562914 41.818985-47.470199 67.81457-91.549669 67.81457h-66.684327c-102.852097-1.130243-202.313466 19.214128-297.253863 57.642384-4.520971 2.260486-10.172185 3.390728-15.8234 5.651214v-64.423841c-14.693157-6.781457-28.256071-11.302428-39.558499-18.083885-24.865342-11.302428-36.16777-35.037528-44.07947-61.033113z m291.602649-81.377483c20.344371 0 36.16777-16.953642 36.167771-37.298014 0-19.214128-15.8234-32.777042-39.558499-32.777042-19.214128 0-33.907285 14.693157-33.907285 33.907285 1.130243 20.344371 18.083885 37.298013 37.298013 36.167771z m-126.587196 0c18.083885 0 33.907285-15.8234 32.777042-35.037528 0-20.344371-16.953642-36.16777-37.298014-35.037528-18.083885 0-32.777042 16.953642-32.777042 37.298014 2.260486 18.083885 18.083885 32.777042 37.298014 32.777042z m285.951435-33.907285c0-20.344371-15.8234-36.16777-37.298014-35.037528-18.083885 0-32.777042 16.953642-32.777042 36.167771 0 18.083885 16.953642 32.777042 36.167771 32.777042 18.083885 0 33.907285-15.8234 33.907285-33.907285z"
						fill="#FFFFFF" p-id=36647></path>
				</svg>
			</use>
		</svg>
    </a>
	<a onclick="switchNightMode()" title="深色模式">
		<svg style=" width: 1.5em;height: 1.5em;" class="icon" aria-hidden="true">
			<use id="modeicon" xlink:href="#icon-_moon">
			</use>
		</svg>
	</a>
	<svg aria-hidden="true" style="position: absolute; width: 0px; height: 0px; overflow: hidden;">
		<symbol id="icon-sun" viewBox="0 0 1024 1024">
			<path
				d="M511.99976 511.99976m-511.99976 0a511.99976 511.99976 0 1 0 1023.99952 0 511.99976 511.99976 0 1 0-1023.99952 0Z"
				fill="#91D2F2"></path>
			<path
				d="M144.623932 868.455593C237.679889 964.327548 367.831828 1023.99952 511.99976 1023.99952c269.983873 0 490.99977-209.007902 510.455761-474.031778C956.991551 535.703749 887.559584 527.999753 815.623618 527.999753c-309.535855 0-572.895731 142.055933-670.999686 340.45584z"
				fill="#198058"></path>
			<path
				d="M979.623541 575.99973c-351.319835 0-647.791696 155.655927-741.279653 368.639827A509.359761 509.359761 0 0 0 511.99976 1023.99952c260.839878 0 475.967777-195.111909 507.799762-447.31979a1194.34344 1194.34344 0 0 0-40.175981-0.68z"
				fill="#1E9969"></path>
			<path
				d="M69.711967 769.831639C158.503926 921.815568 323.271848 1023.99952 511.99976 1023.99952a509.455761 509.455761 0 0 0 269.631874-76.783964C657.111692 828.375612 464.271782 751.999648 247.623884 751.999648c-61.575971 0-121.183943 6.271997-177.911917 17.831991z"
				fill="#6AA33A"></path>
			<path
				d="M487.887771 1023.39152c-86.543959-122.151943-236.911889-214.679899-417.591804-252.543881 85.11996 144.919932 239.415888 244.279885 417.591804 252.543881z"
				fill="#95E652"></path>
			<path
				d="M394.159815 167.999921l-45.255979 45.255979L303.647858 167.999921l45.255978-45.255979zM394.159815 503.999764l-45.255979 45.255979L303.655858 503.999764l45.247978-45.247979z"
				fill="#FFF8E6"></path>
			<path
				d="M180.879915 290.719864l45.247979 45.247979-45.255979 45.255978-45.255979-45.255978zM516.903758 290.719864l45.247978 45.247979-45.247978 45.247978-45.247979-45.247978z"
				fill="#FFF8E6"></path>
			<path d="M198.087907 185.207913h63.99997v63.99997h-63.99997zM435.671796 422.791802h63.99997v63.99997h-63.99997z"
				fill="#FFF8E6"></path>
			<path d="M198.087907 422.791802h63.99997v63.99997h-63.99997zM435.671796 185.207913h63.99997v63.99997h-63.99997z"
				fill="#FFF8E6"></path>
			<path
				d="M348.879836 335.999843m-183.999913 0a183.999914 183.999914 0 1 0 367.999827 0 183.999914 183.999914 0 1 0-367.999827 0Z"
				fill="#FFEAB3"></path>
			<path
				d="M348.879836 335.999843m-159.999925 0a159.999925 159.999925 0 1 0 319.99985 0 159.999925 159.999925 0 1 0-319.99985 0Z"
				fill="#FFDC80"></path>
		</symbol>
		<symbol id="icon-_moon" viewBox="0 0 1024 1024">
			<path d="M512 512m-512 0a512 512 0 1 0 1024 0 512 512 0 1 0-1024 0Z" fill="#323232"></path>
			<path
				d="M512 512m-407.005867 0a407.005867 407.005867 0 1 0 814.011734 0 407.005867 407.005867 0 1 0-814.011734 0Z"
				fill="#494A4A"></path>
			<path
				d="M748.1344 633.9584c0-1.143467 0.085333-2.286933 0.085333-3.413333a69.512533 69.512533 0 0 0-8.823466-33.979734q-1.058133-1.911467-2.2528-3.7376l-0.187734-0.3072a70.485333 70.485333 0 0 0-5.2736-7.099733l-0.238933-0.273067q-1.3312-1.536-2.730667-3.003733l-0.3072-0.324267a70.894933 70.894933 0 0 0-6.417066-5.819733l-0.5632-0.443733q-1.467733-1.160533-3.003734-2.235734l-0.494933-0.341333q-1.706667-1.2288-3.6352-2.3552l-0.256-0.136533q-1.706667-0.989867-3.413333-1.8944l-0.887467-0.4608q-1.604267-0.802133-3.242667-1.536l-0.6144-0.273067q-1.928533-0.836267-3.9424-1.553067l-0.8192-0.273066a54.8864 54.8864 0 0 0-3.242666-1.024l-1.143467-0.324267a85.248 85.248 0 0 0-3.601067-0.887467l-0.546133-0.119466a67.345067 67.345067 0 0 0-4.1984-0.733867l-1.143467-0.136533q-1.706667-0.2048-3.2768-0.341334l-1.245866-0.1024a74.786133 74.786133 0 0 0-4.386134-0.1536 69.8368 69.8368 0 0 0-20.48 3.037867 104.106667 104.106667 0 0 0-12.1344-11.076267 258.696533 258.696533 0 0 0-449.9456-248.763733 183.1424 183.1424 0 0 1 106.939734-34.2528c5.12 0 10.24 0.221867 15.36 0.631467a183.125333 183.125333 0 0 1 50.5344 11.52h0.170666q3.874133 1.501867 7.68 3.157333l0.256 0.1024 7.441067 3.413333 0.273067 0.136534q3.669333 1.826133 7.253333 3.805866l0.221867 0.119467q3.618133 2.013867 7.133866 4.164267a184.610133 184.610133 0 0 1 26.760534 20.036266h0.085333q2.986667 2.696533 5.870933 5.5296l0.324267 0.3072q2.781867 2.7648 5.461333 5.632l0.443734 0.477867q2.6112 2.833067 5.12 5.768533l0.494933 0.580267q2.4576 2.9184 4.795733 5.956267l0.494934 0.648533q2.321067 3.037867 4.522666 6.178133l0.426667 0.6144q2.2016 3.1744 4.283733 6.4512l0.324267 0.529067q2.116267 3.413333 4.078933 6.826667l0.170667 0.3072c1.553067 2.7136 3.0208 5.495467 4.437333 8.2944a56.149333 56.149333 0 0 0-12.578133 2.304 82.824533 82.824533 0 0 0-134.007467 18.039466 42.530133 42.530133 0 0 0-53.009066 41.079467 104.277333 104.277333 0 0 0-42.2912 80.110933 13.653333 13.653333 0 0 0 0 1.4336v0.426667c0 0.136533 0.1024 0.682667 0.187733 1.024s0 0.3072 0.1024 0.4608 0.2048 0.733867 0.324267 1.092267l0.1024 0.3072a15.36 15.36 0 0 0 0.580266 1.416533l0.1024 0.187733a16.520533 16.520533 0 0 0 0.648534 1.211734l0.221866 0.3584c0.221867 0.3584 0.4608 0.733867 0.7168 1.092266l0.221867 0.3072a26.333867 26.333867 0 0 0 2.338133 2.798934l0.119467 0.119466q0.6144 0.631467 1.297067 1.262934l0.2048 0.187733q0.7168 0.648533 1.501866 1.297067 1.706667 1.416533 3.720534 2.781866c0.6656 0.4608 1.348267 0.904533 2.065066 1.348267 26.914133 16.7936 87.995733 28.535467 159.044267 28.535467 19.3536 0 37.956267-0.8704 55.3472-2.474667l-0.494933 0.750933-0.426667 0.6144q-2.2016 3.140267-4.539733 6.178134l-0.477867 0.631466q-2.338133 3.037867-4.795733 5.956267l-0.494934 0.580267q-2.491733 2.935467-5.12 5.7856l-0.443733 0.477866q-2.679467 2.884267-5.461333 5.649067l-0.3072 0.290133q-2.884267 2.833067-5.870934 5.546667a184.8832 184.8832 0 0 1-26.7776 20.036267q-3.515733 2.167467-7.150933 4.181333l-0.187733 0.1024q-3.584 1.979733-7.2704 3.805867l-0.256 0.136533q-3.6864 1.826133-7.458134 3.413333l-0.238933 0.1024q-3.805867 1.706667-7.68 3.157334h-0.136533a183.057067 183.057067 0 0 1-50.551467 11.52c-5.12 0.4096-10.24 0.631467-15.36 0.631466a183.159467 183.159467 0 0 1-106.939733-34.2528 258.5088 258.5088 0 0 0 180.138666 107.093334 109.550933 109.550933 0 0 0-3.259733 26.453333 16.520533 16.520533 0 0 0 0.1024 1.706667v0.529066c0 0.170667 0.136533 0.853333 0.221867 1.262934l0.136533 0.5632 0.392533 1.365333 0.136534 0.4096a13.892267 13.892267 0 0 0 0.733866 1.706667l0.119467 0.238933c0.238933 0.512 0.512 1.006933 0.802133 1.501867l0.273067 0.443733q0.4096 0.682667 0.887467 1.365333l0.273066 0.375467a33.0752 33.0752 0 0 0 2.9184 3.413333l0.1536 0.1536 1.5872 1.553067 0.273067 0.256 1.8432 1.621333q2.116267 1.706667 4.625067 3.413334l2.56 1.706666c33.467733 20.8896 109.431467 35.4816 197.802666 35.4816 119.330133 0 216.046933-26.606933 216.046934-59.409066a131.413333 131.413333 0 0 0-56.285867-102.058667z"
				fill="#323232"></path>
			<path
				d="M573.8496 401.8176v-2.781867a56.200533 56.200533 0 0 0-72.6016-53.725866 82.824533 82.824533 0 0 0-134.007467 18.039466 42.530133 42.530133 0 0 0-53.009066 41.079467 104.277333 104.277333 0 0 0-42.257067 80.0768c0 26.385067 77.7728 47.786667 173.7216 47.786667s173.7216-21.384533 173.7216-47.786667a105.659733 105.659733 0 0 0-45.568-82.688z"
				fill="#CDCCCA"></path>
			<path
				d="M293.768533 506.2656a104.277333 104.277333 0 0 1 42.2912-80.110933 42.530133 42.530133 0 0 1 53.009067-41.079467 82.807467 82.807467 0 0 1 134.007467-18.039467 56.32 56.32 0 0 1 43.758933 4.642134 56.2176 56.2176 0 0 0-65.518933-26.4192 82.824533 82.824533 0 0 0-134.007467 18.039466 42.530133 42.530133 0 0 0-53.009067 41.079467 104.277333 104.277333 0 0 0-42.325333 80.128c0 8.413867 7.936 16.3328 21.845333 23.210667a13.294933 13.294933 0 0 1-0.0512-1.450667z"
				fill="#E8E9EC"></path>
			<path
				d="M453.4784 166.912a258.338133 258.338133 0 0 0-210.944 108.919467 183.995733 183.995733 0 1 1 0 299.451733 258.6624 258.6624 0 1 0 210.944-408.388267z"
				fill="#DDAE2A"></path>
			<path
				d="M364.834133 608.9216q7.594667 0.631467 15.36 0.648533a183.995733 183.995733 0 0 0 0-367.9744q-7.748267 0-15.36 0.631467a183.995733 183.995733 0 0 1 0 366.6944z"
				fill="#EDC849"></path>
			<path
				d="M794.7776 605.969067c0-1.143467 0.085333-2.286933 0.085333-3.413334a69.973333 69.973333 0 0 0-90.299733-66.833066 102.997333 102.997333 0 0 0-166.656 22.4256 52.906667 52.906667 0 0 0-65.928533 51.0976 129.706667 129.706667 0 0 0-52.599467 99.6352c0 32.8192 96.733867 59.409067 216.046933 59.409066s216.046933-26.606933 216.046934-59.409066a131.413333 131.413333 0 0 0-56.695467-102.912z"
				fill="#CDCCCA"></path>
			<path
				d="M446.481067 735.914667a129.706667 129.706667 0 0 1 52.599466-99.6352 52.906667 52.906667 0 0 1 65.928534-51.080534 102.997333 102.997333 0 0 1 166.6048-22.442666 69.973333 69.973333 0 0 1 54.408533 5.7856 69.973333 69.973333 0 0 0-81.476267-32.853334 102.997333 102.997333 0 0 0-166.656 22.4256 52.906667 52.906667 0 0 0-65.928533 51.0976 129.706667 129.706667 0 0 0-52.599467 99.6352c0 10.478933 9.864533 20.309333 27.170134 28.859734a17.408 17.408 0 0 1-0.0512-1.792z"
				fill="#E8E9EC"></path>
		</symbol>
	</svg>
    <a onclick="music_on();" id="musicmobbtn" title="播放背景音乐">
        <svg style=" width: 1.5em;height: 1.5em;" id="music" aria-hidden="true">
            <use id="modeicon" xlink:href="#icon-icon-music">
                <svg id="icon-icon-music" viewBox="0 0 1024 1024">
                    <path
                        d="M997.45185173 512A485.45185173 485.45185173 0 1 1 26.54814827 512a485.45185173 485.45185173 0 0 1 970.90370346 0"
                        fill="#9025FC"></path>
                    <path
                        d="M478.56450347 602.59745173S403.9869632 545.19277013 369.03442987 537.78962987c-82.1020448-17.41558507-136.47265173 35.8020736-133.37789654 106.192592 4.36906667 100.42785173 127.37042987 123.85090347 194.66619307 111.3505184 67.3564448-12.37902187 101.09534827-57.04059307 108.86257707-111.83597014 7.76722987-54.79537813 46.84610347-263.9037632 46.84610346-263.9037632s66.26417813 61.28829653 85.2574816 82.3447712c26.4571264 29.3698368-0.1820448 79.85682987-0.18204373 79.8568288s72.39300693-12.07561493 90.23336213-104.97896213c12.31834027-64.1403264-23.36237013-76.64071147-65.71804373-110.37961493-82.76954027-65.7787264-121.2416-90.2940448-145.63555627-95.45197014-24.27259307-5.0972448-45.02565973 4.42974827-45.8145184 81.4952288-0.84954027 77.0654816-25.60758507 290.1181632-25.60758506 290.1181632"
                        fill="#FFFFFF"></path>
                </svg>
            </use>
        </svg>
    </a>
	<audio id="bg_music" src="{{theme.bg_music}}" loop="loop"></audio>
	<script>
			
		function music_on() {
			var audio1 = document.getElementById('bg_music');
			if (audio1.paused) {
				audio1.play();
				$("svg#music").addClass("xuanzhuan");
				
			}else{
				audio1.pause();
				$('svg#music').removeClass("xuanzhuan");
				audio1.currentTime = 0;//音乐从头播放
			}
		}
	    function BackTOP() {
			$("#btn").hide();
			$(function () {
				$(window).scroll(function () {
					if ($(window).scrollTop() > 50) {
						$("#btn").fadeIn(200);
					} else {
						$("#btn").fadeOut(200);
					}
				});
				$("#btn").click(function () {
					$('body,html').animate({
							scrollTop: 0
						},
						500);
					return false;
				});
			})
		}
		function scrollToComment() {
		  var t = $("#valine-comments").offset().top;
		  $("html,body").animate({ scrollTop: t }, 500);
		}	
		function switchNightMode() {
		  $(
			'<div class="Cuteen_DarkSky"><div class="Cuteen_DarkPlanet"></div></div>'
		  ).appendTo($("body")),
			setTimeout(function () {
			  var DarkMode =
				document.cookie.replace(
				  /(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
				  "$1"
				) || "0";
			  DarkMode == "0"
				? ($("html").addClass("DarkMode"),
				  (document.cookie = "DarkMode=1;path=/"),
				  console.log("夜间模式开启"),
				  $("#modeicon").attr("xlink:href", "#icon-sun"))
				: ($("html").removeClass("DarkMode"),
				  (document.cookie = "DarkMode=0;path=/"),
				  console.log("夜间模式关闭"),
				  $("#modeicon").attr("xlink:href", "#icon-_moon")),
				setTimeout(function () {
				  $(".Cuteen_DarkSky").fadeOut(1e3, function () {
					$(this).remove();
				  });
				}, 2e3);
			}),
			50;
		}

		function checkNightMode() {
		  if ($("html").hasClass("n-f")) {
			$("html").removeClass("day");
			$("html").addClass("DarkMode");
			$("#modeicon").attr("xlink:href", "#icon-sun");
			return;
		  }
		  if ($("html").hasClass("d-f")) {
			$("html").removeClass("DarkMode");
			$("html").addClass("day");
			$("#modeicon").attr("xlink:href", "#icon-_moon");

			return;
		  }
		  if (
			document.cookie.replace(
			  /(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
			  "$1"
			) === ""
		  ) {
			if (new Date().getHours() >= 23 || new Date().getHours() < 7) {
			  $("html").addClass("DarkMode");
			  document.cookie = "DarkMode=1;path=/";
			  console.log("夜间模式开启");
			  $("#modeicon").attr("xlink:href", "#icon-sun");
			} else {
			  $("html").removeClass("DarkMode");
			  document.cookie = "DarkMode=0;path=/";
			  console.log("夜间模式关闭");
			  $("#modeicon").attr("xlink:href", "#icon-_moon");
			}
		  } else {
			var DarkMode =
			  document.cookie.replace(
				/(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
				"$1"
			  ) || "0";
			if (DarkMode == "0") {
			  $("html").removeClass("DarkMode");
			  $("#modeicon").attr("xlink:href", "#icon-_moon");
			} else if (DarkMode == "1") {
			  $("html").addClass("DarkMode");
			  $("#modeicon").attr("xlink:href", "#icon-sun");
			}
		  }
		}
		BackTOP();		
		checkNightMode();
	</script>
</div>
```

{% endfold  %}

此外，我们还要加入自己的 css 样式。把如下代码放入 `根目录/source/_data/styles.styl`中即可。

{% fold 点击显/隐代码 %}

```stylus
/****************************************/
/*************悬浮组件 begin*************/
/****************************************/
/* 整体 begin */
#RightDownBtn > a {
  width: 1.5em;
  height: 1.5em;
  margin: 0.3125rem 0;
  transition: 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  border-bottom: none !important;
}
#RightDownBtn svg.icon,
#RightDownBtn svg#music,
#RightDownBtn a {
  width: 21px !important;
  height: 21px !important;
}
#RightDownBtn {
  position: fixed;
  right: 32px;
  bottom: 64px;
  padding: 0.3125rem 0.5rem;
  background: #fff;
  border-radius: 0.1875rem;
  box-shadow: 0 0 0.3125rem rgba(0, 0, 0, 0.4);
  transition: 0.3s ease all;
  z-index: 1000;
  align-items: flex-end;
  flex-direction: column;
  display: -moz-flex;
  display: flex;
  float: right;
}
/* 组件部分 end */

/* 深色模式 begin */
.DarkMode .blogroll,
.DarkMode #RightDownBtn,
.DarkMode strong,
.DarkMode .note,
.DarkMode img {
  filter: brightness(0.7) !important;
  -webkit-filter: brightness(0.7) !important;
}

.DarkMode #RightDownBtn {
  background: #222c;
}

.DarkMode body {
  background: #12121c !important;
}

/*主体 main-inner */
.DarkMode .main-inner {
  background: rgba(40, 44, 52, 0.5); /*区分阴影度*/
}

.DarkMode .post-block,				/*文章*/
.DarkMode .main-menu,				/*header上部分颜色*/
.DarkMode  .sub-menu,				/* 设置二级标题 */
.DarkMode  .popup,					/*搜索*/
.DarkMode  .search-result-container {
  background: #282c34 !important; /*背景颜色*/
}

/* 文章块 post-block */
.DarkMode .post-block {
  opacity: 1;
}

.DarkMode .post-block,				/*文章*/
.DarkMode .menu-item a,				/*menu*/
.DarkMode .site-author-name,		/*侧栏作者*/
.DarkMode .site-description,		/*侧栏描述*/
.DarkMode .site-state-item-count,	/*侧栏分类数*/
.DarkMode .site-state-item-name,	/*侧栏分类名*/
.DarkMode .links-of-author-item a,	/*社交*/
.DarkMode .sidebar-nav li,			/*侧栏分类标题*/
.DarkMode .post-toc ol a,			/*上下文颜色*/
.DarkMode .post-nav-item a,			/*侧栏文章标题*/
.DarkMode .footer,					/*页脚颜色*/
.DarkMode  .search-input,			/*搜索*/
.DarkMode  .search-result-container,
.DarkMode  .search-result-list a,
.DarkMode  .back-to-top,
.DarkMode  #waifu-tips,
.DarkMode  a.vlogin-btn,
.DarkMode  .vright .vheader .vnick,
.DarkMode  .vmail,
.DarkMode  .vlink,
.DarkMode  .veditor,
.DarkMode  .vcol button,
.DarkMode  .vcount,
.DarkMode  .vempty,
.DarkMode  .vpreview p,
.DarkMode  .vpreview h1,
.DarkMode  .vpreview h2,
.DarkMode  .vpreview h3,
.DarkMode  .vpreview ol,
.DarkMode  .vcontent p,
.DarkMode  .vcontent h1,
.DarkMode  .vcontent h2,
.DarkMode  .vcontent h3,
.DarkMode  .vcontent ol {
  /* live2d 文字颜色 */
  color: rgba(255, 255, 255, 0.6) !important;
}

/* header上部*/
.DarkMode .main-menu {
  border-radius: 0 0 $myradius $myradius; /*设置圆角*/
}
/* 设置 brand 背景 */
.DarkMode .site-brand-container {
  background: url(https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/header-bg1.webp);
  background-repeat: repeat;
  background-position: 70% 20%;
  background-size: cover;
}
/* 设置header下部 */
.DarkMode .sidebar-inner {
  background: #282c34;
}

.DarkMode a.menu-item-active {
  border-radius: $myradius;
  background: #382d2d; /* 选中时显现颜色*/
}
.DarkMode .menu-item a:hover {
  border-radius: $myradius;
  background: #382d2d; /* 移动至所显现颜色*/
  color: aqua !important;
}

.DarkMode .site-state-item-count,
.DarkMode .site-state-item-name,
.DarkMode .links-of-author-item a {
  &:hover {
    background: #382d2d;
    color: aqua !important;
  }
}

.DarkMode .post-toc ol a {
  &:hover {
    border-bottom-color: #fc6423;
    color: #fc6423 !important;
  }
}

.DarkMode .sidebar-toc-active .sidebar-nav-toc,					/*侧栏选中时*/
.DarkMode .sidebar-overview-active .sidebar-nav-overview
.DarkMode .post-toc .nav .active > a {
  color: aqua !important;
  border-bottom-color: aqua !important;
}

/* 文章尾部上下文 */
.DarkMode .post-nav-item a:hover {
  color: #fc6423 !important; /* 移动至所显现颜色*/
}

/* 设置二级标题 */
.DarkMode .sub-menu {
  background: #282c34;
}

.DarkMode .search-header {
  background: #353232 !important;
}
/* 搜索页面鼠标划入变化 */
.DarkMode .search-result-list a {
  border-bottom: 1px solid white;
  &:hover {
    color: aqua !important;
    border-bottom: 1px solid aqua;
  }
}

.DarkMode #waifu-tips span {
  color: purple; /* live2d 注意颜色 */
}

/* 设置超链接 */
.DarkMode .post-meta-item a,
.DarkMode .post-body p a {
  color: rgba(0, 255, 255, 0.6);
  border-bottom: 1px solid rgba(0, 255, 255, 0.6);
  &:hover {
    color: #fc6423 !important;
    border-bottom: 1px solid #fc6423;
  }
}

/* 评论区 */
.DarkMode .comments {
  background: #282c34;
}

.DarkMode a.vlogin-btn {
  &:hover {
    color: #fc6423;
    border-bottom-color: #fc6423 !important;
  }
}
.DarkMode .vcol button {
  &:hover {
    color: #fc6423 !important;
    border-color: #fc6423 !important;
  }
}

.DarkMode .vcol span.vicon,
.DarkMode .vcol svg.markdown {
  fill: currentColor;
  color: rgba(255, 255, 255, 0.6);
}

.DarkMode .posts-collapse .post-content .post-title a{	/* 归档 */
	color: rgba(255, 255, 255, 0.6);
  &:hover {
    color: #fc6423;
	}	
}

.DarkMode .breadcrumb a{
	color: rgb(170,145,145,0.6);
	border-bottom-color: rgb(170,145,145,0.6);
}
.DarkMode .posts-collapse .post-content .post-header,
.DarkMode .breadcrumb a{
  &:hover {
    color: #fc6423 !important;
    border-color: #fc6423 !important;
	}
}

/* pagination-当前页码 */
.DarkMode .pagination .page-number.current {
  background: rgba(255, 255, 255, 0.6);
  color: black;
}

/* pagination-页码按钮 */
.DarkMode .pagination .prev,
.DarkMode .pagination .next,
.DarkMode .pagination .page-number {
  color: rgba(255, 255, 255, 0.6);

  &:hover {
    color: black !important;
    background: rgba(255, 255, 255, 0.6);
  }
}

/* 深色模式 end */

/* sun and noon */
.Cuteen_DarkSky,
.Cuteen_DarkSky:before {
  content: "";
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: 88888888;
}

.Cuteen_DarkSky {
  background: linear-gradient(#feb8b0, #fef9db);
}

.Cuteen_DarkSky:before {
  transition: 2s ease all;
  opacity: 0;
  background: linear-gradient(#4c3f6d, #6c62bb, #93b1ed);
}

.DarkMode .Cuteen_DarkSky:before {
  opacity: 1;
}

.Cuteen_DarkPlanet {
  z-index: 99999999;
  position: fixed;
  left: -50%;
  top: -50%;
  width: 200%;
  height: 200%;
  -webkit-animation: CuteenPlanetMove 2s cubic-bezier(0.7, 0, 0, 1);
  animation: CuteenPlanetMove 2s cubic-bezier(0.7, 0, 0, 1);
  transform-origin: center bottom;
}

@-webkit-keyframes CuteenPlanetMove {
  0% {
    transform: rotate(0);
  }

  to {
    transform: rotate(360deg);
  }
}

@keyframes CuteenPlanetMove {
  0% {
    transform: rotate(0);
  }

  to {
    transform: rotate(360deg);
  }
}

.Cuteen_DarkPlanet:after {
  position: absolute;
  left: 35%;
  top: 40%;
  width: 9.375rem;
  height: 9.375rem;
  border-radius: 50%;
  content: "";
  background: linear-gradient(#fefefe, #fffbe8);
}
/* sun and noon.end */

/* 音乐-旋转 */
.xuanzhuan {
  -webkit-animation: rotate 3s linear infinite;
  -moz-animation: rotate 3s linear infinite;
  -o-animation: rotate 3s linear infinite;
  animation: rotate 3s linear infinite;
}
@-webkit-keyframes rotate {
  from {
    -webkit-transform: rotate(0);
  }
  to {
    -webkit-transform: rotate(360deg);
  }
}
@-moz-keyframes rotate {
  from {
    -moz-transform: rotate(0);
  }
  to {
    -moz-transform: rotate(359deg);
  }
}
@-o-keyframes rotate {
  from {
    -o-transform: rotate(0);
  }
  to {
    -o-transform: rotate(359deg);
  }
}
@keyframes rotate {
  from {
    transform: rotate(0);
  }
  to {
    transform: rotate(359deg);
  }
}
/****************************************/
/*************悬浮组件 end***************/
/****************************************/
```

{% endfold %}

<p class='div-border yellow'>上述样式文件中，深色模式部分代码基本上是我根据自己的喜好及页面相关布局而编写的，若有人使用，希望能视自身情况加以删除或修改，否则就可能不大好看了喔🙃！</p>

注意：

* 把 scrollToComment() 函数中的 valine-comments 切换为评论区容器对应的id（若为 class 则把 # 换为 . ），当然如果你用的也是 valine 评论，那大概率是不用换的啦。

* 样式文件中设置圆角我选择使用参数`$myradius`，这个参数的值放在 `根目录/source/_data/variables.styl`中，即在 variables.styl 文件中添加这么一行即可（参数的值为圆角半径大小，根据喜好修改即可）：

  ```stylus
  //radius
  $myradius                     = 12px;
  ```

  当然直接把`$myradius`修改为 12px 或其它你喜欢的大小也可😂！

* 在主题配置文件 _config.yml 中加入：（我配置文件采用的方法为主题与站点配置文件二合一）

  ```yaml
  bg_music: https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/music/慵懒的猫.mp3
  ```

  以设置音乐的地址。

## 原理

代码实现的原理[此文](https://blog.csdn.net/cungudafa/article/details/106500877)已经讲的很清楚了，接下来的讲解只是个人探索过程中的学习笔记。

首先是使用`<div id="RightDownBtn"></div>`容器添加悬浮组件，组件各部分以`<a></a>`标签包裹，共有四个部分，故而共有四个`<a></a>`标签。每个部分所使用的图形是 svg 格式，故而容器内还有`<svg></svg>`标签。同时给不同部分均设立了不同的点击事件，即点击该组件部分将会执行对应的函数，从而产生相应的效果。

### 回到顶部

```javascript
 function BackTOP() {
        $("#btn").hide();
        $(function () {
            $(window).scroll(function () {
                if ($(window).scrollTop() > 50) {
                    $("#btn").fadeIn(200);
                } else {
                    $("#btn").fadeOut(200);
                }
            });
            $("#btn").click(function () {
                $('body,html').animate({
                        scrollTop: 0
                    },
                    500);
                return false;
            });
        })
    }
```

该功能的实现依靠 BackTOP() 函数完成。该函数能监听滚动条，若滚动条所处的高度达不到函数中 if 设置的要求，则将隐藏 id 为 btn 的回到顶部按钮（`$("#btn").hide();`）。当 click 此按钮后，将设置滚动条高度为 0，即实现回到顶部。最后写上一行 `BackTOP();`即为调用此函数。

### 跳转评论区

```javascript
function scrollToComment() {
    var t = $("#valine-comments").offset().top;
    $("html,body").animate({ scrollTop: t }, 500);
  }	
```

当该按钮经历 onclick 事件后，会调用 scrollToComment() 函数。此函数执行的效果就是跳转至锚点 #valine-comments。而不同的评论组件，其对应的id很大可能是不同的，这个时候修改一下就行了。

### 切换深色模式

{% fold 点击显/隐代码 %}

```javascript
function switchNightMode() {
    $(
      '<div class="Cuteen_DarkSky"><div class="Cuteen_DarkPlanet"></div></div>'
    ).appendTo($("body")),
      setTimeout(function () {
        var DarkMode =
          document.cookie.replace(
            /(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
            "$1"
          ) || "0";
        DarkMode == "0"
          ? ($("html").addClass("DarkMode"),
            (document.cookie = "DarkMode=1;path=/"),
            console.log("夜间模式开启"),
            $("#modeicon").attr("xlink:href", "#icon-sun"))
          : ($("html").removeClass("DarkMode"),
            (document.cookie = "DarkMode=0;path=/"),
            console.log("夜间模式关闭"),
            $("#modeicon").attr("xlink:href", "#icon-_moon")),
          setTimeout(function () {
            $(".Cuteen_DarkSky").fadeOut(1e3, function () {
              $(this).remove();
            });
          }, 2e3);
      }),
      50;
  }

  function checkNightMode() {
    if ($("html").hasClass("n-f")) {
      $("html").removeClass("day");
      $("html").addClass("DarkMode");
      $("#modeicon").attr("xlink:href", "#icon-sun");
      return;
    }
    if ($("html").hasClass("d-f")) {
      $("html").removeClass("DarkMode");
      $("html").addClass("day");
      $("#modeicon").attr("xlink:href", "#icon-_moon");

      return;
    }
    if (
      document.cookie.replace(
        /(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
        "$1"
      ) === ""
    ) {
      if (new Date().getHours() >= 23 || new Date().getHours() < 7) {
        $("html").addClass("DarkMode");
        document.cookie = "DarkMode=1;path=/";
        console.log("夜间模式开启");
        $("#modeicon").attr("xlink:href", "#icon-sun");
      } else {
        $("html").removeClass("DarkMode");
        document.cookie = "DarkMode=0;path=/";
        console.log("夜间模式关闭");
        $("#modeicon").attr("xlink:href", "#icon-_moon");
      }
    } else {
      var DarkMode =
        document.cookie.replace(
          /(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
          "$1"
        ) || "0";
      if (DarkMode == "0") {
        $("html").removeClass("DarkMode");
        $("#modeicon").attr("xlink:href", "#icon-_moon");
      } else if (DarkMode == "1") {
        $("html").addClass("DarkMode");
        $("#modeicon").attr("xlink:href", "#icon-sun");
      }
    }
  }
```

{% endfold  %}

onclick 调用的是 switchNightMode() 函数，该函数会先在`<body></body>`中加个一个属性 Cuteen_DarkSky 的div 容器，结合样式文件中的设计，最终效果即为切换前的动画。然后还会为 html（body 的外层容器） 加一个类 DarkMode，我们便可以通过 DarkMode 选择器来实现深色模式下的样式设计。还有个 checkNightMode() 函数是直接调用的，此函数实现的功能有通过 cookie 来记录当前状态（DarkMode 为1则为深色模式），以及通过`if (new Date().getHours() >= 23 || new Date().getHours() < 7)`做到当时间为23~7 点时，自动设置深色模式。

我对这些的具体实现一窍不通，也只能靠作者的讲解稍微了解了一下大概的含义。

这里再谈谈深色模式下的样式，首先最主要的是把 body 的背景颜色设置为深色（background: #12121c !important;），其次还有如 post-block、main-menu 等容器背景，我将其设为浅一点的深色（#282c34）。然后是各容器的文字颜色，比如post-block、footer等，普遍设置为浅白色（color: rgba(255, 255, 255, 0.6) !important;），其中 0.6 表示透明度，表现为颜色没那么亮。还有利用属性 `filter: brightness(.7);`来降低元素的亮度，其中 .7 可修改，普遍适用于 RightDownBtn、img、note 等。此外还可以设置深色模式下超链接的表现、搜索界面的表现等等，具体可见我的样式文件。

### 播放背景音乐

```js
function music_on() {
    var audio1 = document.getElementById('bg_music');
    if (audio1.paused) {
        audio1.play();
        $("svg#music").addClass("xuanzhuan");
        
    }else{
        audio1.pause();
        $('svg#music').removeClass("xuanzhuan");
        audio1.currentTime = 0;//音乐从头播放
    }
}
```

onclick 事件调用 music_on() 函数，其中有着简单的判断，若音乐停止（paused），则播放（play）它，反之亦然。

音乐的实现则利用 html 对应的元素 `<audio></audio>`，此处即为`<audio id="bg_music" src="{{theme.bg_music}}" loop="loop"></audio>`，audio 具体可见此文：[HTML 5 视频/音频参考手册](https://www.w3school.com.cn/html5/html5_ref_audio_video_dom.asp)。此处有个地方很关键，src 的地址是一个参数，其值放在配置文件中。因而我们需要在配置文件中设置这个参数，即为音乐的地址。

在把此功能搬到 next 主题时，我遇到问题 "<" 报错，原代码为 `<%= theme.bg_music%>`，意思也是调用主题内设置的参数，但是我直接搬运可不行，我得找出如何表达调用主题参数的方法，自己试了好几个参数表示方法，都不成功，然后想到 next 主题用 Nunjucks 引擎来渲染文件，去搜了下 Nunjucks 参数的表示形式，发现了 `{{}}`，于是尝试成功。

此外，原代码并未有旋转功能，我看到大佬[Sanarous](https://bestzuo.cn/)的博客，点击音乐按钮有旋转的功能，于是我也想加一个。于是打开 F12，选中该元素，发现当音乐播放的时候，元素会加上类 xuanzhuan，又看到深色模式中代码也涉及了添加类，于是马上操作起来，即`$("选择器").addClass("类名");`以及`$('选择器').removeClass("类名");`，实现播放时加类，停止时去除类。然后就是 F12 、 ctrl + F 找到 xuanzhuan 的样式配置来，发现通过 rotate 实现，于是我 copy 了相关代码放入我的样式文件中，成功实现旋转功能。

## 总结

经过这次探索，我更加熟悉如何利用 F12 寻找资源以及修改样式，还学到了很多的 css 属性，当然也只不过是留下了个映像，等要用的时候再查寻具体用法😂。总而言之，收获良多，也很开心又实现了一个个小功能！😁]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>悬浮组件-gitter在线交流</title>
    <url>/12/</url>
    <content><![CDATA[
<p class='div-border green'>为博客添加gitter在线交流功能，并内置于悬浮组件中。</p>

<!--more-->

## 简介

博客拥有聊天系统也还是蛮不错的😄。目前也有很多聊天系统供选择，比如Chatra, Tidio, Daovoice, Gitter, Crisp等等，各有各的优点。这里我选择使用Gitter，据[官网](https://gitter.im/)介绍，其拥有如下功能特性：

* 自由无限制：无限人员、历史消息和集成，享受自由的公共和私有社区。
* 易于创建：只需创建您的社区并开始交谈 - 无需设置任何邀请服务。
* Markdown 和 KaTeX：就像在用您平常喜欢用的开发工具一样格式化您的讯息。
* 广为人知：完整的历史文件（通过搜寻引擎索引）和可分享的永久链接或使用 Sidecar 将 Gitter 嵌入至您的网站。

## 使用

先分别贴出直接添加以及内置于悬浮组件的效果图：

<img alt="直接添加" class="gifplayer" src="https://willcai2020.gitee.io/pic-go/Post/gitter/gitter-original.png">

<hr>

<img alt="悬浮组件" class="gifplayer" src="https://willcai2020.gitee.io/pic-go/Post/gitter/gitter-now.png">

<hr>

大家可根据自身情况选择使用哪种方式实现😄。

### 准备工作

首先前往 [Gitter官网](https://gitter.im/)，选择“创建你自己的社区”，然后登录（可选择通过Github登录）

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://willcai2020.gitee.io/pic-go/Post/gitter/20210321111618.png" alt="登录">

最后创建属于你自己的社区。

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Post/gitter/20210321112332.png" alt="创建社区">

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Post/gitter/20210321113003.png" alt="社区命名">

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Post/gitter/20210321113221.png" alt="创建成功">

### 直接添加

依据[官方教程](https://sidecar.gitter.im/)，只需将如下代码导入网页 body 中。（利用 Next 注入特性，将代码放入`根目录/source/_data/body-end.njk`中即可）

```nginx
{# 使用 Gitter 实现一个 IM 即时通讯聊天室功能 #}
<script>
  ((window.gitter = {}).chat = {}).options = {
    room: 'crcrc2021/community'		<!--注意修改为你自己的社区-->
  };
</script>
<script src="https://sidecar.gitter.im/dist/sidecar.v1.js" async defer></script>
```

### 置于悬浮组件

如果选择直接添加，对我来说，Open Chat 这个按钮有点占地方（特别是移动端🙃）。于是我思考能否将其入口按钮置于悬浮组件中。

观察发现：添加的以实现 Gitter 的代码均为 Js，且第一段 Js 拥有关键词 Options，不难想到这只是指明参数，那么后面引入的 sidecar.v1.js 中应具有实现添加 Gitter 元素的行为。

首先 Ctrl+Shift+C 直接打开F12定位，选择 Open Chat 按钮，找到类为 gitter-open-chat-button 的元素 a。

接着利用VSCode格式化 sidecar.js，方便阅读。再Ctrl+F搜索 gitter-open-chat-button，容易定位这一部分代码。

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Post/gitter/20210321135304.png" alt="添加元素">

搜索[createElement](https://www.runoob.com/jsref/met-document-createelement.html)、[appendChild](https://www.runoob.com/jsref/met-node-appendchild.html)等方法的教程（根据其英文名称并结合代码大概也能猜出相应的作用😶）。

再往上找对象 m，发现如下定义：

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Post/gitter/20210321134758.png" alt="对象m">

关于 [document.body](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/body) 、 [document.documentElement](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/documentElement)以及它们的区别，若有兴趣了解的话可自行搜索。

最后结合代码，可理解为 m（body标签）利用 appendChild在其末尾添加了子节点 i，i经createElement 得到元素 a，且此元素的超链接目标（href）、内容（innerHTML）、类等均可自定义。

综上所述，我想将节点i置于悬浮组件中（id为RightDownBtn），且元素a的内容（innerHTML）可设为SVG图形，于是修改如下：

```javascript
m = document.getElementById("RightDownBtn"),
...
(function () {
    var i = t[C].createElement("a");
    return (
      (i.href = "" + e.host + e.room),
      (i.title = '在线聊天'),
      (i.innerHTML = 
          '\n         <svg style=" width: 1.5em;height: 1.5em;" t="1614495740006" class="chat" aria-hidden="true" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2191" width="200" height="200"><path d="M712.2432 750.6944H505.2928c-5.632 0-11.1104 1.8432-15.5648 5.2736l-198.1952 151.4496c-16.896 12.9024-41.216 0.8704-41.216-20.3776v-110.7456c0-14.1824-11.4688-25.6512-25.6512-25.6512h-26.4192c-62.208 0-112.64-50.432-112.64-112.64V342.6816c0-62.208 50.432-112.64 112.64-112.64H712.192c62.208 0 112.64 50.432 112.64 112.64v295.3728c0.0512 62.208-50.3808 112.64-112.5888 112.64z" fill="#FACC31" p-id="2192" data-spm-anchor-id="a313x.7781069.0.i1"></path><path d="M655.0528 458.5984h-403.968c-14.1312 0-25.6-11.4688-25.6-25.6s11.4688-25.6 25.6-25.6h403.9168c14.1312 0 25.6 11.4688 25.6 25.6s-11.4176 25.6-25.5488 25.6zM425.6256 607.6416H251.0848c-14.1312 0-25.6-11.4688-25.6-25.6s11.4688-25.6 25.6-25.6h174.4896c14.1312 0 25.6 11.4688 25.6 25.6s-11.4176 25.6-25.5488 25.6z" fill="#191919" p-id="2193"></path><path d="M836.1984 72.0896H366.4384c-70.6048 0-128 57.3952-128 128v4.352h-40.192c-76.2368 0-138.24 62.0032-138.24 138.24v295.3728c0 76.2368 62.0032 138.24 138.24 138.24l26.4704 0.0512v110.7456c0 19.6096 10.9568 37.2224 28.5184 45.9264 7.2704 3.584 15.0528 5.376 22.784 5.376 11.008 0 21.9136-3.584 31.0784-10.5984l198.1952-151.5008h206.8992c76.2368 0 138.24-62.0032 138.24-138.24v-72.3968c63.8976-7.1168 113.7152-61.44 113.7152-127.1808V200.0896c0.0512-70.5536-57.3952-128-127.9488-128z m-36.9152 565.9648c0 47.9744-39.0656 87.04-87.04 87.04H505.2928c-11.2128 0-22.2208 3.7376-31.1296 10.5472l-198.2464 151.4496v-110.7456c0-28.2624-22.9888-51.2512-51.2512-51.2512h-26.4192c-47.9744 0-87.04-39.0656-87.04-87.04V342.6816c0-47.9744 39.0656-87.04 87.04-87.04H712.192c47.9744 0 87.04 39.0656 87.04 87.04v295.3728z m113.7152-199.5776c0 37.4784-26.9824 68.7104-62.5152 75.4176V342.6816c0-76.2368-62.0032-138.24-138.24-138.24H289.6384v-4.352c0-42.3424 34.4576-76.8 76.8-76.8h469.7088c42.3424 0 76.8 34.4576 76.8 76.8v238.3872z" fill="#191919" p-id="2194"></path></svg> \n'),                                    
      i.classList.add("gitter-open-chat-button"),
      m.appendChild(i),
      i
    );
  })()
...
```

最后引用修改完成的js，代码如下：

```nginx
{# Gitter聊天界面 begin #}
<script>
  ((window.gitter = {}).chat = {}).options = {
    room: 'ruchan666/community'
  };
</script>
<script src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.3.3/js/sidecar.min.js" async defer></script>
{# Gitter聊天界面 end #}
```

试验发现效果有点偏差，于是调整样式（加入样式文件 styles.styl 中即可）：

```stylus
#RightDownBtn .gitter-open-chat-button{
	display: contents !important;
}
```

也有另外一种修改方法，在引用的 sidecar.js 中搜索 gitter-open-chat-button，定位的这一部分设置了类gitter-open-chat-button的样式，将 607 行中有关 gitter-open-chat-button 的部分删除即可。

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Post/gitter/20210321144325.png" alt="样式">

## 样式调整

Gitter在线聊天界面的主体是通过内嵌 Iframe页面实现的，修改Iframe页面的样式我们无法做到（我搜索半天得到了这个结果）。

而我们需要调整的元素的样式是在Iframe元素之外的，根据我的要求，样式调整如下：

```stylus
/****************************************/
/*************gitter组件 begin***********/
/****************************************/
/* gitter置于最上层 */
.gitter-chat-embed {
  z-index: 100;
}

+ mobile() {
  .gitter-chat-embed iframe {
    position: fixed;
    top: 16px;
    height: 98% !important;
  }
  .gitter-chat-embed-action-bar {
    z-index: 1000;
  }
}
.gitter-chat-embed-action-bar-item-pop-out{
	margin: 9px;
}
#RightDownBtn svg.chat{
    width: 21px !important;
    height: 21px !important;    
	margin-top: 2px;
}
/****************************************/
/*************gitter组件 end*************/
/****************************************/
```

大功告成🎉🍻✨]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记-3</title>
    <url>/java3/</url>
    <content><![CDATA[
{% cq %}
Java 学习笔记 三
{%endcq %}
<!--more-->

## API

### 概述

* 什么是API
  * API (Application Programming Interface) ：应用程序编程接口
* Java中的API
  * 指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，**只需要学习这些类如何使用**即可，我们可以通过帮助文档来学习这些API如何使用。

### 使用帮助文档

#### 索引

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210309231402.png" alt="索引">

#### 查询所在包

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210309231442.png" alt="查询所在包">

{% note primary no-icon%}
需要导包 java.util.Random()
java.lang.Object 则不需要
{% endnote %}

#### 看类的描述

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210309231630.png" alt="描述">

#### 看构造方法

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210309231640.png" alt="构造方法">

#### 看成员方法

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210309231652.png" alt="成员方法">

## 例子：Scanner

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210309231706.png" alt="Scanner-所在包">

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210309231803.png" alt="Scanner-描述">

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210310001113.png" alt="Scanner-成员方法">

```java
import java.util.Scanner
...
Scanner sc = new Scanner(System.in);	//构造方法
String line = sc.nextLine();		//成员方法
```

{% note success no-icon%}
调用成员方法时，先写方法，再用ctrl+alt+v，会自动给出返回类型与变量名
{% endnote %}

## 字符串

### String

#### 概述

String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象。

{% note primary no-icon%}
String 类在 java.lang 包下，所以使用的时候不需要导包！
{% endnote %}

#### 特点

* 字符串不可变，它们的值在创建后不能被更改
* 内容不可变，指的是每次有新的内容时会有新的地址，与StringBuilder不同
* 虽然 String 的值是不可变的，但是它们可以被共享
* 字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )
* JDK8以前是字符数组，JDK9及以后是字节数组

#### 构造方法

|          方法名           |                   说明                    |
| :-----------------------: | :---------------------------------------: |
|      public String()      |  创建一个空白字符串对象，不含有任何内容   |
| public String(char[] chs) |   根据字符数组的内容，来创建字符串对象    |
| public String(byte[] bys) |   根据字节数组的内容，来创建字符串对象    |
|     String s = “abc”;     | 直接赋值的方式创建字符串对象，内容就是abc |

{% fold 点击显/隐代码 %}
```java
public class StringDemo01 {
	public static void main(String[] args) {
		//public String()：创建一个空白字符串对象，不含有任何内容
		String s1 = new String();
		System.out.println("s1:" + s1);
		
		//public String(char[] chs)：根据字符数组的内容，来创建字符串对象
		char[] chs = {'a', 'b', 'c'};
		String s2 = new String(chs);
		System.out.println("s2:" + s2);
		
		//public String(byte[] bys)：根据字节数组的内容，来创建字符串对象
		byte[] bys = {97, 98, 99};	//97,98,99对应分别为a,b,c
		String s3 = new String(bys);
		System.out.println("s3:" + s3);
		
		//String s = “abc”; 直接赋值的方式创建字符串对象，内容就是abc
		String s4 = "abc";
		System.out.println("s4:" + s4);
	}
}

/*
运行结果：
s1:
s2:abc
s3:abc
s4:abc
*/
```
{% endfold %}

{% note success no-icon%}
推荐直接赋值的方式使用String类
{% endnote %}

#### String对象

##### 特点

* 通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同
* 以`“”`方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都**只会建立一 个 String 对象**，并在字符串池中维护

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210310004053.png" alt="String-内存图">

#### 字符串的比较

* ==号比较
  * 比较基本数据类型：比较的是具体的值
  * 比较引用数据类型：比较的是对象地址值

{% note primary no-icon%}
字符串是对象，比较内容是否相同，是通过一个方法实现的，方法为：equals()

public boolean equals(String s) 比较两个字符串内容是否相同、区分大小写
{% endnote %}

#### 遍历字符串

```java
public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的
public int length()：返回此字符串的长度
```
{% note primary no-icon%}
数组的长度：数组名.length
字符串的长度：字符串对象.length()
{% endnote %}

{% fold 点击显/隐代码 %}
```java
//通用格式
public class StringTest02 {
	public static void main(String[] args) {
		//键盘录入一个字符串，用 Scanner 实现
		Scanner sc = new Scanner(System.in);
		
		System.out.println("请输入一个字符串：");
		String line = sc.nextLine();
		
		for(int i=0; i<line.length(); i++) {
			System.out.println(line.charAt(i));
		}
	}
}
```
{% endfold %}

#### 字符串拼接

{% note info no-icon%}
定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，并在控制台输出结果。例如，数组为 int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]
{% endnote %}

{% fold 点击显/隐代码 %}
```java
/*
	思路：
		1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化
		2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。
返回值类型 String，参数列表 int[] arr
		3:在方法中遍历数组，按照要求进行拼接
		4:调用方法，用一个变量接收结果
		5:输出结果
*/
public class StringTest04 {
	public static void main(String[] args) {
		//定义一个 int 类型的数组，用静态初始化完成数组元素的初始化
		int[] arr = {1, 2, 3};
		
		//调用方法，用一个变量接收结果
		String s = arrayToString(arr);
		
		//输出结果
		System.out.println("s:" + s);
	}
	//定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回
	/*
		两个明确：
		返回值类型：String
		参数：int[] arr
	*/
	public static String arrayToString(int[] arr) {
		//在方法中遍历数组，按照要求进行拼接
		String s = "";
		
		s += "[";
		
		for(int i=0; i<arr.length; i++) {
			if(i==arr.length-1) {
				s += arr[i];
			} else {
				s += arr[i];
				s += ", ";
			}
		}
		s += "]";
		return s;
	}
}
```
{% endfold %}

#### 帮助文档

|                 方法名                 |                      说明                      |
| :------------------------------------: | :--------------------------------------------: |
| public boolean equals(Object anObject) | 比较字符串的内容，严格区分大小写(用户名和密码) |
|     public char charAt(int index)      |            返回指定索引处的 char 值            |
|          public int length()           |               返回此字符串的长度               |

### StringBuilder

#### 概述

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210310002352.png" alt="StringBuilder-内存图">


如果对字符串进行拼接操作，**每次拼接，都会构建一个新的String对象**，既耗时，又浪费内存空间，而这种操作还不可避免。那么有没有一种比较好的方式可以解决这个问题呢？答案是肯定的，我们可以通过Java提供的StringBuilder类就来解决这个问题。

{% note info no-icon%}
StringBuilder 是一个可变的字符串类，我们可以把它看成是一个容器
这里的可变指的是 StringBuilder 对象中的内容是可变的
{% endnote %}

StringBuilder类和String类的区别
* String类：内容是不可变的
* StringBuilder类：内容是可变的

####  构造方法

|              方法名              |                    说明                    |
| :------------------------------: | :----------------------------------------: |
|      public StringBuilder()      | 创建一个空白可变字符串对象，不含有任何内容 |
| public StringBuilder(String str) |   根据字符串的内容，来创建可变字符串对象   |

#### 添加和反转方法

|                方法名                 |           说明           |
| :-----------------------------------: | :----------------------: |
| public StringBuilder append(任意类型) | 添加数据，并返回对象本身 |
|    public StringBuilder reverse()     |    返回相反的字符序列    |

```java
//链式编程
sb.append("hello").append("world").append("java").append(100);
得到的对象地址都是一样的
```

#### StringBuilder和String相互转换

* StringBuilder转换为String

  * public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String

  ```java
  StringBuilder sb = new StringBuilder();
  //String s = sb; //这个是错误的做法
  //public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为String
  String s = sb.toString();
  ```

* String转换为StringBuilder

  * public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder

  ```java
  String s = "hello";
  //StringBuilder sb = s; //这个是错误的做法
  //public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为StringBuilder
  StringBuilder sb = new StringBuilder(s);
  ```

#### 字符串拼接

{% fold 点击显/隐代码 %}
```
/*
	思路：
		1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化
		2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。
返回值类型 String，参数列表 int[] arr
		3:在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回
		4:调用方法，用一个变量接收结果
		5:输出结果
*/
public class StringBuilderTest01 {
	public static void main(String[] args) {
		//定义一个 int 类型的数组，用静态初始化完成数组元素的初始化
		int[] arr = {1, 2, 3};
		
		//调用方法，用一个变量接收结果
		String s = arrayToString(arr);
		
		//输出结果
		System.out.println("s:" + s);
	}
//定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回
/*
两个明确：
返回值类型：String
参数：int[] arr
*/

	public static String arrayToString(int[] arr) {
	//在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回
	StringBuilder sb = new StringBuilder();
	
	sb.append("[");
	
	for(int i=0; i<arr.length; i++) {
		if(i == arr.length-1) {
			sb.append(arr[i]);
		} else {
			sb.append(arr[i]).append(", ");
		}
	}
	
	sb.append("]");
	
	String s = sb.toString();
	
	return s;
	}
}
```
{% endfold %}

#### 字符串反转

{% fold 点击显/隐代码 %}
```java
/*
	思路：
		1:键盘录入一个字符串，用 Scanner 实现
		2:定义一个方法，实现字符串反转。返回值类型 String，参数 String s
		3:在方法中用StringBuilder实现字符串的反转，并把结果转成String返回
		4:调用方法，用一个变量接收结果
		5:输出结果
*/
public class StringBuilderTest02 {
	public static void main(String[] args) {
		//键盘录入一个字符串，用 Scanner 实现
		Scanner sc = new Scanner(System.in);
		System.out.println("请输入一个字符串：");
		String line = sc.nextLine();
		
		//调用方法，用一个变量接收结果
		String s = myReverse(line);
		
		//输出结果
		System.out.println("s:" + s);
}
	//定义一个方法，实现字符串反转。返回值类型 String，参数 String s
	/*
		两个明确：
			返回值类型：String
			参数：String s
	*/
	public static String myReverse(String s) {
	//在方法中用StringBuilder实现字符串的反转，并把结果转成String返回
	//String --- StringBuilder --- reverse() --- String
	// StringBuilder sb = new StringBuilder(s);
	// sb.reverse();
	// String ss = sb.toString();
	// return ss;
	return new StringBuilder(s).reverse().toString();
	}
}
```
{% endfold %}

```java
匿名对象：new StringBuilder(s).reverse().toString();
```

#### 帮助文档

|                 方法名                 |                        说明                         |
| :------------------------------------: | :-------------------------------------------------: |
| public StringBuilder append (任意类型) |              添加数据，并返回对象本身               |
|     public StringBuilder reverse()     |                 返回相反的字符序列                  |
|          public int length()           |                返回长度，实际存储值                 |
|        public String toString()        | 通过toString()就可以实现把StringBuilder转换为String |

## 集合基础

### 概述

编程的时候如果要存储多个数据，使用长度固定的数组存储格式，不一定满足我们的需求，更适应不了变化的需求，那么，此时该如何选择呢？

{% note success no-icon%}
集合类：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变
代表：ArrayList类
{% endnote %}

### ArrayList类

ArrayList&lt;E&gt;：

* 可调整大小的数组实现
* &lt;E&gt;：是一种特殊的数据类型，泛型

{% note info no-icon%}
在出现E的地方使用引用数据类型替换即可
如：ArrayList<String>,ArrayList<Student>

泛型：用于约束集合中存储元素的数据类型
{% endnote %}

{% note primary no-icon%}
底层是数组实现的，长度可以变化
需要导包java.util.ArrayList
{% endnote %}

#### 构造方法

|       方法名       |         说明         |
| :----------------: | :------------------: |
| public ArrayList() | 创建一个空的集合对象 |

#### 成员方法

|                方法名                |                  说明                  |
| :----------------------------------: | :------------------------------------: |
|   public boolean remove(Object o)    |    删除指定的元素，返回删除是否成功    |
|      public E remove(int index)      | 删除指定索引处的元素，返回被删除的元素 |
|  public E set(int index,E element)   | 修改指定索引处的元素，返回被修改的元素 |
|       public E get(int index)        |          返回指定索引处的元素          |
|          public int size()           |         返回集合中的元素的个数         |
|       public boolean add(E e)        |     将指定的元素追加到此集合的末尾     |
| public void add(int index,E element) |   在此集合中的指定位置插入指定的元素   |

#### 案例

```java
//public ArrayList(),创建一个空的集合对象
ArrayList<String> array = new ArrayList<>();
//这中写法后面省略的泛型可以由前面推断出来（JDK7以后的特性）
//或者
ArrayList<String> array = new ArrayList<String>();

//当集合为空时，即无元素，集合的内容为[]；
//可以通过添加方法添加集合元素：
public boolean add(E e)               /*将指定的元素追加到此集合的末尾*/
public void add(int index,E element)  /*在此集合中的指定位置插入指定的元素*/
```

{% fold 点击显/隐代码 %}
```java
public class ArrayListDemo02 {
	public static void main(String[] args) {
	//创建集合
	ArrayList<String> array = new ArrayList<String>();
	
	//添加元素
	array.add("hello");
	array.add("world");
	array.add("java");
	
	//public boolean remove(Object o)：删除指定的元素，返回删除是否成功
	// System.out.println(array.remove("world"));
	// System.out.println(array.remove("javaee"));
	
	//public E remove(int index)：删除指定索引处的元素，返回被删除的元素
	// System.out.println(array.remove(1));
	
	//IndexOutOfBoundsException（索引越界）
	// System.out.println(array.remove(3));
	
	//public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素
	// System.out.println(array.set(1,"javaee"));
	
	//IndexOutOfBoundsException（索引越界）
	// System.out.println(array.set(3,"javaee"));
	
	//public E get(int index)：返回指定索引处的元素
	// System.out.println(array.get(0));
	// System.out.println(array.get(1));
	// System.out.println(array.get(2));
	//System.out.println(array.get(3)); //？？？？？？ 自己测试
	
	//public int size()：返回集合中的元素的个数
	System.out.println(array.size());
	
	//输出集合
	System.out.println("array:" + array);
	}
}
```
{% endfold %}

##### 遍历

```java
//遍历集合的通用格式
for(int i=0; i<array.size(); i++) {
	String s = array.get(i);
	System.out.println(s);
}
```

##### 存储学生对象并遍历

###### 1

{% fold 点击显/隐代码 %}
```java
/*
	思路：
		1:定义学生类
		2:创建集合对象
		3:创建学生对象
		4:添加学生对象到集合中
		5:遍历集合，采用通用遍历格式实现
*/

public class ArrayListTest02 {
	public static void main(String[] args) {
		//创建集合对象
		ArrayList<Student> array = new ArrayList<>();
		
		//创建学生对象
		Student s1 = new Student("林青霞", 30);
		Student s2 = new Student("风清扬", 33);
		Student s3 = new Student("张曼玉", 18);
		
		//添加学生对象到集合中
		array.add(s1);
		array.add(s2);
		array.add(s3);
		
		//遍历集合，采用通用遍历格式实现
		for (int i = 0; i < array.size(); i++) {
		Student s = array.get(i);
		System.out.println(s.getName() + "," + s.getAge());
		}
	}
}
```
{% endfold %}

###### 2

{% fold 点击显/隐代码 %}
```java
/*
	思路：
		1:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型
		2:创建集合对象
		3:键盘录入学生对象所需要的数据
		4:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量
		5:往集合中添加学生对象
		6:遍历集合，采用通用遍历格式实现
*/

public class ArrayListTest {
	public static void main(String[] args) {
	//创建集合对象
	ArrayList<Student> array = new ArrayList<Student>();
	
	//为了提高代码的复用性，我们用方法来改进程序
	addStudent(array);
	addStudent(array);
	addStudent(array);
	
	//遍历集合，采用通用遍历格式实现
	for (int i = 0; i < array.size(); i++) {
		Student s = array.get(i);
		System.out.println(s.getName() + "," + s.getAge());
	}
}
/*
	两个明确：
		返回值类型：void
		参数：ArrayList<Student> array
*/
	public static void addStudent(ArrayList<Student> array) {
		//键盘录入学生对象所需要的数据
		Scanner sc = new Scanner(System.in);
		
		System.out.println("请输入学生姓名:");
		String name = sc.nextLine();
		
		System.out.println("请输入学生年龄:");
		String age = sc.nextLine();
		
		//创建学生对象，把键盘录入的数据赋值给学生对象的成员变量
		Student s = new Student();
		s.setName(name);
		s.setAge(age);
		
		//往集合中添加学生对象
		array.add(s);
	}
}
```
{% endfold %}

##### 学生管理系统

实现步骤：
*  定义学生类，包含以下成员变量
  * private String sid // 学生id
  * private String name // 学生姓名
  * private String age // 学生年龄
  * private String address // 学生所在地
* 学生管理系统主界面的搭建步骤
  *  用输出语句完成主界面的编写
  * 用Scanner实现键盘输入 
  * 用switch语句完成选择的功能
  * 用循环完成功能结束后再次回到主界面
* 学生管理系统的添加学生功能实现步骤
  * 定义一个方法，接收ArrayList集合
  * 方法内完成添加学生的功能
  * 键盘录入学生信息
  * 根据录入的信息创建学生对象
  * 将学生对象添加到集合中
  * 提示添加成功信息
  * 在添加学生的选项里调用添加学生的方法
* 学生管理系统的查看学生功能实现步骤
  * 定义一个方法，接收ArrayList集合
  * 方法内遍历集合，将学生信息进行输出
  * 在查看所有学生选项里调用查看学生方法
* 学生管理系统的删除学生功能实现步骤
  *  定义一个方法，接收ArrayList集合 
  * 方法中接收要删除学生的学号 
  * 遍历集合，获取每个学生对象 
  * 使用学生对象的学号和录入的要删除的学号进行比较,如果相同，则将当前学生对象从集合中删除
  * 在删除学生选项里调用删除学生的方法
* 学生管理系统的修改学生功能实现步骤
  * 定义一个方法，接收ArrayList集合
  * 方法中接收要修改学生的学号
  * 通过键盘录入学生对象所需的信息，并创建对象
  * 遍历集合，获取每一个学生对象。并和录入的修改学生学号进行比较.如果相 同，则使用新学生对象替换当前学生对象
  * 在修改学生选项里调用修改学生的方法
* 退出系统
  * 使用System.exit(0);退出JVM

## 继承

### 概述

#### 概念

继承是面向对象三大特征之一（封装，继承，多态），可以使得子类具有父类的属性和方法，还可以在子类中重新定义，以及追加属性和方法。

#### 格式

```java
public class 子类名 extends 父类名{}
范例：public class Zi extends Fu{}
Fu：是父类，也被称为基类、超类
Zi：是子类，也被称为派生类
```

#### 特点

继承可以让类与类之间产生关系，子父类关系，产生子父类后，子类则可以使用父类中非私有的成员。

### 好处与弊端

* 好处
* 提高了代码的复用性(多个类相同的成员可以放到同一个类中)
* 提高了代码的维护性(如果方法的代码需要修改，修改一处即可)
* 弊端
  * 继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性

#### 应用场景

{% note success no-icon%}
使用继承，需要考虑类与类之间是否存在is..a的关系，不能盲目使用继承
is..a的关系：谁是谁的一种，例如：老师和学生是人的一种，那人就是父类，学生和老师就是子类
{% endnote %}

### 访问特点

#### 成员

在子类方法中访问一个变量，采用的是**就近原则**。
* 子类局部范围找
* 子类成员范围找
*  父类成员范围找
*  如果都没有就报错(不考虑父亲的父亲…)

#### 构造方法

**注意：子类中所有的构造方法默认都会访问父类中无参的构造方法**

子类会继承父类中的数据，可能还会使用父类的数据。

所以，子类初始化之前，一定要先完成父类数据的初始化， 原因在于，每一个子类构造方法的第一条语句**默认都是：super();**

{% note success no-icon%}
问题：如果父类中没有无参构造方法，只有带参构造方法，该怎么办呢？
1.通过使用super关键字去显示的调用父类的带参构造方法
2.在父类中自己提供一个无参构造方法
建议：自己给出无参构造方法
{% endnote %}

#### 成员方法

通过子类对象访问一个方法 
* 子类成员范围找
* 父类成员范围找
* 如果都没有就报错(不考虑父亲的父亲…)

### super

#### 概述

* this & super关键字：
  * this：代表**本类对象**的引用
  * super：代表父类存储空间的标识(可以理解为**父类对象**引用)

* this 和 super 的使用区别
  * 成员变量：
    * this.成员变量 - 访问本类成员变量
    * super.成员变量 - 访问父类成员变量
  * 成员方法：
    * this.成员方法 - 访问本类成员方法
    * super.成员方法 - 访问父类成员方法
  * 构造方法：
    * this(…) - 访问本类构造方法
    * super(…) - 访问父类构造方法

#### 内存图

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/three/20210310010200.png" alt="super-内存图">

{% note info no-icon%}
对象在堆内存中，会单独存在一块super区域，用来存放父类的数据。
{% endnote %}

### 方法重写

#### 概念

子类出现了和父类中一模一样的方法声明（方法名一样，参数列表也必须一样）。

#### 应用场景

当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，既沿袭了父类的功能，又定义了子类特有的内容。

#### Override注解

{% note info no-icon%}
用来检测当前的方法，是否是重写的方法，起到【校验】的作用。
检查重写方法的方法声明的正确性。
{% endnote %}

#### 注意事项

{% note primary no-icon%}
1.私有方法不能被重写(父类私有成员子类是不能继承的)
2.子类方法访问权限不能更低(public > 默认 > 私有)
{% endnote %}

{% fold 点击显/隐代码 %}
```java
public class Fu {
	private void show() {
		System.out.println("Fu中show()方法被调用");
	}
	
	void method() {
		System.out.println("Fu中method()方法被调用");
	}
}

public class Zi extends Fu {

	/* 编译【出错】，子类不能重写父类私有的方法*/
	@Override
	private void show() {
		System.out.println("Zi中show()方法被调用");
	}
	
	/* 编译【出错】，子类重写父类方法的时候，访问权限需要大于等于父类 */
	@Override
	private void method() {
		System.out.println("Zi中method()方法被调用");
	}
	/* 编译【通过】，子类重写父类方法的时候，访问权限需要大于等于父类 */
	@Override
	public void method() {
		System.out.println("Zi中method()方法被调用");
	}
}
```
{% endfold %}

### 注意事项

Java中类只支持单继承，不支持多继承

*  Java中**类只支持单继承，不支持多继承**

  * 错误范例：class A extends B, C { }

* Java中**类支持多层继承**

  {% fold 点击显/隐代码 %}
  ```
  public class Granddad {
  
  	public void drink() {
  		System.out.println("爷爷爱喝酒");
  	}
  }
  
  public class Father extends Granddad {
  
  	public void smoke() {
  		System.out.println("爸爸爱抽烟");
  	}
  }
  
  public class Mother {
  
  	public void dance() {
  		System.out.println("妈妈爱跳舞");
  	}
  }
  
  public class Son extends Father {
  // 此时，Son类中就同时拥有drink方法以及smoke方法
}
  ```
  {% endfold %}
  

## 修饰符

### package

#### 概念

包就是文件夹，用来管理类文件的

#### 定义格式

```java
package 包名; (多级包用.分开)
例如：package com.heima.demo;
```

#### 运行

##### 手动建包

```java
javac 类名.java		//生成class文件
//新建com文件夹，其中再建对应文件夹，把class放入，然后带包编译即可
java 包名.类名
```

##### 自动建包

```java
带包编译：javac –d . 类名.java

例如：javac -d . com.heima.demo.HelloWorld.java

带包运行：java 包名+类名

例如：java com.heima.demo.HelloWorld

//d表示在当前目录建包
```

### 导包

#### 意义

{% note info no-icon%}
使用不同包下的类时，使用的时候要写类的全路径，写起来太麻烦了
为了简化带包的操作，Java就提供了导包的功能
{% endnote %}

#### 格式

```java
导包的格式
格式：import 包名;
范例：import java.util.Scanner;
```

### 权限修饰符

|  修饰符   | 同一个类中 | 同一个包中子类无关类 | 不同包的子类 | 不同包的无关类 |
| :-------: | :--------: | :------------------: | :----------: | :------------: |
|  private  |     √      |                      |              |                |
|   默认    |     √      |          √           |              |                |
| protected |     √      |          √           |      √       |                |
|  public   |     √      |          √           |      √       |       √        |

{% note primary no-icon%}
alt+enter导包
{% endnote %}

### 状态修饰符

#### final

* fianl关键字的作用
  * final代表最终的意思，可以修饰成员方法，成员变量，类

* final修饰类、方法、变量的效果
  * fianl修饰类：该类不能被继承（不能有子类，但是可以有父类）
  * final修饰方法：该方法不能被重写
  * final修饰变量：**表明该变量是一个常量，不能再次赋值**

##### 修饰局部变量

* fianl修饰基本数据类型变量

  * final 修饰指的是基本类型的数据值不能发生改变

* final修饰引用数据类型变量

  * final 修饰指的是引用类型的地址值不能发生改变，但是地址里面的内容是可以发生改变的

  * 举例：

    ```java
    public static void main(String[] args){
    	final Student s = new Student(23);
    	s = new Student(24); // 错误
    	s.setAge(24); // 正确
    }
    ```


#### static

* static的概念
  * static关键字是静态的意思，可以修饰【成员方法】，【成员变量】
* static修饰的特点
  * 被类的所有对象共享，这也是我们判断是否使用静态关键字的条件
  * 可以通过类名调用，当然也可以通过对象名调用【推荐使用类名调用】

##### 访问特点

* 非静态的成员方法
  * 能访问静态的成员变量
  * 能访问非静态的成员变量
  * 能访问静态的成员方法
  * 能访问非静态的成员方法
* 静态的成员方法
  * 能访问静态的成员变量
  * 能访问静态的成员方法
* 总结成一句话就是：
  * **静态成员方法只能访问静态成员**]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记-2</title>
    <url>/java2/</url>
    <content><![CDATA[
 {% cq %}
Java 学习笔记 二
{%endcq %}
<!--more-->

## 数组

{% note info no-icon%}
数组（array）是一种用于存储多个相同类型数据的存储模型
{% endnote%}

### 格式

```java
数据类型[] 变量名
int[] arr
//定义了一个int类型的数组，数组名是arr
//推荐使用
```

```java
数据类型 变量名[]
int arr[]
//定义了一个int类型的变量，变量名是arr数组
```

### 初始化

**JAVA中的数组必须先初始化，然后才能使用**

{% note info no-icon%}
初始化：为数据中的数组元素分配内存空间，并为每个元素赋值
{% endnote%}

#### 动态初始化
{% note info no-icon%}
动态初始化：初始化时只指定数据长度，由系统为数组分配初始值
{% endnote%}

```java
数据类型[] 变量名 = new 数据类型[数组长度];
```

#### 静态初始化
{% note info no-icon%}
静态初始化：初始化时指定每个元素的初始值，由系统决定数组长度
{% endnote%}
```java
数据类型[] 变量名 = new 数据类型[数组长度]{数据1,数据2,数据3,......};
//简化格式：
数据类型[] 变量名 = {数据1,数据2,数据3,......};
```



### 数组元素访问

{% note info no-icon%}
每一个存储到数组的元素，都会自动的拥有一个编号，从0开始。
这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。
{% endnote%}

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309171418.png" alt="数组元素访问">

### 内存分配

{% note info no-icon%}
内存是计算机中的重要原件，临时存储区域，作用是运行程序。
我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。
必须放进内存中才能运行，运行完毕后会清空内存。
Java 虚拟机要运行程序，必须要对内存进行空间的分配和管理。
{% endnote%}

{% note success no-icon%}
Java程序在运行时，需要在内存中分配空间。为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。
{% endnote %}

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309171547.png" alt="存储空间">

{% note primary no-icon%}
目前我们只需要记住两个内存，分别是：栈内存和堆内存
{% endnote %}

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309171610.png" alt="内存分配">

#### 单个数组

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309171631.png" alt="单个数组">

#### 多个数组

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309171655.png" alt="多个数组">

#### 相同地址

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309171752.png" alt="相同地址">

### 常见问题

#### 索引越界

{% note info no-icon%}
访问了数组中不存在的索引对应的元素，造成索引越界问题
程序运行后，将会抛出 ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。
{% endnote %}

#### 空指针异常

{% note info no-icon%}
访问的数组已经不再指向堆内存的数据，造成空指针异常
arr = null 这行代码，意味着变量 arr 将不会再保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。
null：空值，引用数据类型的默认值，表示不指向任何有效对象
{% endnote %}

### 常见操作

#### 遍历

{% note info no-icon%}
将数组中的每个元素分别获取出来，就是遍历。
{% endnote%}

```java
//获取数组元素数量：
数组名.length
```


#### 最值问题

```java
public class ArrayTest02 {
	public static void main(String[] args) {
		//定义数组
		int[] arr = {12, 45, 98, 73, 60};
		
		//定义一个变量，用于保存最大值
		//取数组中第一个数据作为变量的初始值
		int max = arr[0];
		
		//与数组中剩余的数据逐个比对，每次比对将最大值保存到变量中
		for(int x=1; x<arr.length; x++) {
			if(arr[x] > max) {
				max = arr[x];
			}
		}
		
		//循环结束后打印变量的值
		System.out.println("max:" + max);
	}
}
```

## 方法

{% note info no-icon%}
方法（method）是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集
{% endnote %}

注意：
* 方法必须先创建才可以使用，该过程称为**方法定义**。
* 方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程称为**方法调用**。

### 定义与调用

#### 不带参数

##### 定义

```java
public static void 方法名 ( ) {
	// 方法体;
}
```

##### 调用

```java
方法名();
```

#### 带参数

{% note primary no-icon%}
参数：由数据类型和变量名组成 → 数据类型 变量名
{% endnote %}

##### 定义

```java
public static void 方法名 (参数1) {
	方法体;
}
public static void 方法名 (参数1, 参数2, 参数3...) {
	方法体;
}
```

##### 调用

```java
方法名(参数)；
方法名(参数1,参数2);
```

注意：
* 方法定义时，参数中的**数据类型与变量名都不能缺少**，缺少任意一个程序将报错
* 方法调用时，参数的**数量与类型必须与方法定义中的设置相匹配**，否则程序将报错

#### 形参与实参

形参：方法**定义中**的参数

实参：方法**调用中**的参数

#### 带返回值

##### 定义

```java
public static 数据类型 方法名 ( 参数 ) {
	return 数据 ;
}
```

##### 调用

```java
方法名 ( 参数 ) ;
数据类型 变量名 = 方法名 ( 参数 ) ;
```

注意：
* 方法定义时 return 后面的**返回值与方法定义上的数据类型要匹配**，否则程序将报错
* 方法的**返回值通常会使用变量接收**，否则该返回值将无意义

### 注意事项

* 方法不能嵌套定义。
* void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据。

### 通用格式

```java
public static 返回值类型 方法名(参数) {
	方法体;
	return 数据 ;
}
```

* 定义方法时，要做到两个明确
  * 明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型
  * 明确参数：主要是明确参数的类型和数量
* 调用方法时的注意：
  * void类型的方法，直接调用即可
  * 非void类型的方法，推荐用变量接收调用

### 方法重载

* 方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载
  * 多个方法在**同一个类**中
  * 多个方法具有**相同的方法名**
  * 多个方法的**参数不相同，类型不同或者数量不同**
* 注意：
  * 重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式
  * 重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载

{% fold 点击显/隐代码 %}

```java
//例子
import java.util.Scanner;

public class compare {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("请输入两个数\n");
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println(compare_byte((byte) a, (byte) b));
        System.out.println(compare_short((short) a, (short) b));
        System.out.println(compare_int(a, b));
        System.out.println(compare_long((long) a, (long) b));
    }

    public static boolean compare_byte(byte a, byte b) {
        return a == b;
    }

    public static boolean compare_short(short a, short b) {
        return a == b;
    }

    public static boolean compare_int(int a, int b) {
        return a == b;
    }

    public static boolean compare_long(long a, long b) {
        return a == b;
    }
}
```

{% endfold %}

### 方法参数传递

#### 基本类型

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309171829.png" alt="方法参数传递-基本类型内存图">

{% note primary no-icon%}
对于基本数据类型的参数，形式参数的改变，不影响实际参数的值
{% endnote %}

#### 引用类型

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309171900.png" alt="方法参数传递-引用类型内存图">

{% note primary no-icon%}
对于引用类型的参数，形式参数的改变，影响实际参数的值
{% endnote %}

### 应用

#### 数组遍历

```java
System.out.println(“内容”); 输出内容并换行
System.out.print(“内容”); 输出内容不换行
System.out.println(); 起到换行的作用
```
{% fold 点击显/隐代码 %}
```java
public class MethodTest01 {
	public static void main(String[] args) {
		//定义一个数组，用静态初始化完成数组元素初始化
		int[] arr = {11, 22, 33, 44, 55};
		
		//调用方法
		printArray(arr);
	}
	
	//定义一个方法，用数组遍历通用格式对数组进行遍历
	/*
		两个明确：
			返回值类型：void
			参数：int[] arr
	*/
	public static void printArray(int[] arr) {
		System.out.print("[");
		for(int x=0; x<arr.length; x++) {
			if(x == arr.length-1) {
				System.out.print(arr[x]);
			} else {
				System.out.print(arr[x]+", ");
			}
		}
		System.out.println("]");
	}
}
```
{% endfold %}

## Debug模式

是供程序员使用的程序调试工具，它可以用于**查看程序的执行流程**，也可以用于追踪程序执行过程来**调试程序**。

### 操作流程

{% note info no-icon%}
Debug调试，又称为断点调试，断点即为一个标记，告诉我们从哪里开始查看。
{% endnote %}

#### 如何加断点

选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可。

#### 如何运行加断点的程序

在代码区域右键Debug执行。

#### 看哪里


* 看Debugger窗口
	
	* 代码执行到哪了
	* 代码执行过程中变量的变化
* 看Console窗口
	
	* 程序执行过程中结果的演示

#### 点哪里

* 点Step Into (F7)这个箭头，也可以直接按F7	---程序继续执行
* 点stop结束

#### 删除断点

选择要删除的断点，单击鼠标左键即可。如果是多个断点，可以每一个再点击一次。也可以一次性全部删除。

#### 注意

{% note primary no-icon%}
如果有键盘录入数据，记得前往Console录入数据
如果有方法调用，Debugger窗口则会显示方法
{% endnote %}

### 应用

#### Switch

{% fold 点击显/隐代码 %}
```java
/*
	思路：
		1:键盘录入一个星期数，用一个变量接收
		2:对星期数进行判断，这里用 switch 语句实现
		3:在对应的语句控制中输出对应的减肥活动
	导包：
		1:手动导包 import java.util.Scanner;
		2:快捷键导包 Alt+Enter
		3:自动导包
*/

import java.util.Scanner;

public class fit_switch {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("请输入星期数：");
        int number = sc.nextInt();
        switch (number) {
            case 1:
                System.out.println("跑步");
                break;
            case 2:
                System.out.println("游泳");
                break;
            case 3:
                System.out.println("慢走");
                break;
            case 4:
                System.out.println("动感单车");
                break;
            case 5:
                System.out.println("拳击");
                break;
            case 6:
                System.out.println("爬山");
                break;
            case 7:
                System.out.println("大吃一顿");
                break;
            default:
                System.out.println("你输入的星期数有误！");
        }
    }
}
```
{% endfold %}

#### 不死神兔

{% fold 点击显/隐代码 %}
```java
/*有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子， 假如兔子都不死，问第二十个月的兔子对数为多少？*/
/*
	思路：
		1:为了存储多个月的兔子对数，定义一个数组，用动态初始化完成数组元素的初始化，长度为20
		2:因为第1个月，第2个月兔子的对数是已知的，都是1，所以数组的第1个元素，第2个元素值也都是1
		3:用循环实现计算每个月的兔子对数
		4:输出数组中最后一个元素的值，就是第20个月的兔子对数
*/
public class Test04 {
	public static void main(String[] args) {
		//为了存储多个月的兔子对数，定义一个数组，用动态初始化完成数组元素的初始化，长度为20
		int[] arr = new int[20];
        
		//因为第1个月，第2个月兔子的对数是已知的，都是1，所以数组的第1个元素，第2个元素值也都是1
		arr[0] = 1;
		arr[1] = 1;
        
		//用循环实现计算每个月的兔子对数
		for(int x=2; x<arr.length; x++) {
			arr[x] = arr[x-2] + arr[x-1];
		}
        
		//输出数组中最后一个元素的值，就是第20个月的兔子对数
		System.out.println("第二十个月兔子的对数是：" + arr[19]);
	}
}
```
{% endfold %}

#### 百钱百鸡 

{% note info no-icon%}
循环穷举	---解方程
我国古代数学家张丘建在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。 百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？
{% endnote %}

{% fold 点击显/隐代码 %}
```java
/*
	思路：
		1:第1层循环，用于表示鸡翁的范围，初始化表达式的变量定义为 x=0，判断条件是x<=20
		2:第2层循环，用于表示鸡母的范围，初始化表达式的变量定义为 y=0，判断条件是y<=33
		3:这个时候，用于表示鸡雏的变量 z = 100 – x – y
		4:判断表达式 z%3==0 和表达式 5*x + 3*y + z/3 = 100 是否同时成立，如果成立，输出对应的x，y，z 的值，就是对应的鸡翁，鸡母，鸡雏的值
*/
public class Test05 {
	public static void main(String[] args) {
		//第1层循环，用于表示鸡翁的范围，初始化表达式的变量定义为 x=0，判断条件是x<=20
		for(int x=0; x<=20; x++) {
			//第2层循环，用于表示鸡母的范围，初始化表达式的变量定义为 y=0，判断条件是y<=33
			for(int y=0; y<=33; y++) {
				//这个时候，用于表示鸡雏的变量 z = 100 – x – y
				int z = 100 - x - y;
				//判断表达式 z%3==0 和表达式 5*x + 3*y + z/3 = 100 是否同时成立
				if(z%3==0 && 5*x+3*y+z/3==100) {
			System.out.println(x+","+y+","+z);
				}
			}
		}
	}
}
```
{% endfold %}

#### 查找

{% note info no-icon%}
已知一个数组 arr = {19, 28, 37, 46, 50}; 键盘录入一个数据，查找该数据在数组中的索引。并在控制台输出找到的索引值。如果没有查找到，则输出-1
{% endnote %}

{% fold 点击显/隐代码 %}
```java
/*
	思路：
		1:定义一个数组，用静态初始化完成数组元素的初始化
		2:键盘录入要查找的数据，用一个变量接收
		3:定义一个索引变量，初始值为-1
		4:遍历数组，获取到数组中的每一个元素
		5:拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量,并
结束循环
		6:输出索引变量
*/
public class Test08 {
	public static void main(String[] args) {
		//定义一个数组，用静态初始化完成数组元素的初始化
		int[] arr = {19, 28, 37, 46, 50};
		
		//键盘录入要查找的数据，用一个变量接收
		Scanner sc = new Scanner(System.in);
		System.out.println("请输入要查找的数据：");
		int number = sc.nextInt();
			
		//调用方法
		int index = getIndex(arr, number);
		
		//输出索引变量
		System.out.println("index: " + index);
	}
	
	//查找指定的数据在数组中的索引
	/*
		两个明确：
		返回值类型：int
		参数：int[] arr, int number
    */
	public static int getIndex(int[] arr, int number) {
		//定义一个索引变量，初始值为-1
		int index = -1;
	
		//遍历数组，获取到数组中的每一个元素
		for(int x=0; x<arr.length; x++) {
			//拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量,并结束循环
			if(arr[x] == number) {
				index = x;
				break;
			}
		}
		//返回索引
		return index;
	}
}
```
{% endfold %}

#### 反转

{% note info no-icon%}
已知一个数组 arr = {19, 28, 37, 46, 50}; 用程序实现把数组中的元素值交换， 交换后的数组 arr = {50, 46, 37, 28,19}; 并在控制台输出交换后的数组元素。
{% endnote %}

{% fold 点击显/隐代码 %}
```java
/*
	思路：
		1:定义一个数组，用静态初始化完成数组元素的初始化
		2:循环遍历数组，这一次初始化语句定义两个索引变量，判断条件是开始索引小于等于结束索引
		3:变量交换
		4:遍历数组
*/
public class Test09 {
	public static void main(String[] args) {
		//定义一个数组，用静态初始化完成数组元素的初始化
		int[] arr = {19, 28, 37, 46, 50};
		
		//调用反转的方法
		reverse(arr);
		
		//遍历数组
		printArray(arr);	
	}
	/*
		两个明确：
			返回值类型：void
			参数：int[] arr
	*/
	public static void reverse(int[] arr) {
		//循环遍历数组，这一次初始化语句定义两个索引变量，判断条件是开始索引小于等于结束索引
		for (int start = 0, end = arr.length - 1; start <= end; start++, end--) {
			//变量交换
			int temp = arr[start];
			arr[start] = arr[end];
			arr[end] = temp;
		}
	}
	
	/*
		两个明确：
			返回值类型：void
			参数：int[] arr
	*/
	public static void printArray(int[] arr) {
		System.out.print("[");
		
		for (int x = 0; x < arr.length; x++) {
			if (x == arr.length - 1) {
				System.out.print(arr[x]);
			} else {
				System.out.print(arr[x] + ", ");
			}
		}
		
		System.out.println("]");
	}
}
```
{% endfold %}

## 类和对象

{% note info no-icon%}
客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。
面向对象：理解面对的对象。
{% endnote %}

* 类
  * 类的理解
    * 类是对现实生活中**一类具有共同属性和行为的事物的抽象**
    * 类是**对象的数据类型**，类是**具有相同属性和行为的一组对象的集合**
    * 简单理解：类就是对现实事物的一种描述
  * 类的组成
    * 属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）
    * 行为：指事物能执行的操作，例如：手机事物（打电话，发短信）
* 类和对象的关系
  * 类：类是对现实生活中**一类具有共同属性和行为的事物的抽象**
  * 对象：是能够看得到摸的着的**真实存在的实体**
  * 简单理解：**类是对事物的一种描述，对象则为具体存在的事物**（类是对象的抽象，对象是类的实体）

### 类

{% note info no-icon%}
类是JAVA程序的基本组成单位。

类的组成是由属性和行为两部分组成：
	属性：在类中通过成员变量来体现（类中方法外的变量）
	行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）
{% endnote %}

#### 定义

```java
①定义类
②编写类的成员变量
③编写类的成员方法
public class 类名 {
	// 成员变量
	变量1的数据类型 变量1；
	变量2的数据类型 变量2;
	…
	// 成员方法
	方法1;
	方法2;
}
```

{% note primary no-icon%}
一个包里面有很多个类，其中有一个主类，包含main方法，并可以通过包里面的其他类来定义对象
{% endnote %}

### 对象

```java
创建对象：
	类名 对象名 = new 类名();
调用成员的格式：
	对象名.成员变量
	对象名.成员方法();
```

### 对象内存图

#### 单个对象

##### 成员对象

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309171950.png" alt="单个对象-成员对象">

##### 成员方法

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309172012.png" alt="单个对象-成员方法">

#### 多个对象

##### 成员变量

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309172033.png" alt="多个对象-成员变量">

##### 成员方法

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309172054.png" alt="多个对象-成员方法">

多个对象在堆内存中，都有不同的内存划分，**成员变量存储在各自的内存区域中，成员方法多个对象共用的一份**

#### 多个对象相同内存

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309172219.png" alt="多个对象相同内存">

{% note primary no-icon%}
当多个对象的引用指向同一个内存空间（变量所记录的地址值是一样的）
只要有任何一个对象修改了内存中的数据，随后，无论使用哪一个对象进行数据获取，都是修改后的数据。
{% endnote %}

### 成员表量和局部变量

|      区别      |                  成员变量                  |                    局部变量                     |
| :------------: | :----------------------------------------: | :---------------------------------------------: |
|  类中位置不同  |                 类中方法外                 |              方法内部或方法声明上               |
| 内存中位置不同 |                   堆内存                   |                     栈内存                      |
|  生命周期不同  | 随着对象的存在而存在，随着对象的消失而消失 | 随着方法的调用而 存在，随着方法的调用完毕而消失 |
|  初始化值不同  |               有默认初始化值               |   没有默认初始化值，必须先定义，赋值才能使用    |

## 封装

### private关键字

{% note info no-icon%}
private 是一个权限修饰符，可以用来修饰成员（成员变量，成员方法）
作用是保护成员不被其他类使用，被 private 修饰的成员只能在本类中才能访问
{% endnote %}

* 被 private 修饰的成员，只能在本类进行访问，针对 private 修饰的成员变量，如果需要被其他类使用，提供相应的操作
  * 提供“get变量名()”方法，用于获取成员变量的值，**方法用 public 修饰**
  * 提供“set变量名(参数)”方法，用于设置成员变量的值，**方法用 public 修饰**

### this关键字

{% note info no-icon%}
this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）
{% endnote %}

* 方法的形参如果与成员变量同名，不带 this 修饰的变量指的是形参，而不是成员变量
* 方法的形参没有与成员变量同名，不带 this 修饰的变量指的是成员变量

* **使用时机：解决局部变量隐藏成员变量**

#### 内存原理

{% note primary no-icon%}
this 代表当前调用方法的引用，哪个对象调用的方法，this 就代表哪一个对象
{% endnote %}

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309172245.png" alt="this内存原理1">

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/two/20210309172420.png" alt="this内存原理2">

### 封装

#### 概述

封装是面向对象三大特征之一（封装，继承，多态）；
是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的。

#### 原则

将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏。
信息的操作和访问成员变量private，提供对应的getXxx()/setXxx()方法。

#### 好处

通过方法来控制成员变量的操作，**提高了代码的安全性**。
把代码用方法进行封装，**提高了代码的复用性**。

### 构造方法

#### 概述

```java
/*
构造方法是一种特殊的方法
作用：创建对象 Student stu = new Student();
功能：主要是完成对象数据的初始化
*/

public class 类名{
	修饰符 类名( 参数 ) {
	}
}
// 修饰符一般为public
```

#### 注意事项

* 创建
  * 当类中无构造方法时，系统将会默认给出一个无参构造方法，如果定义了构造方法，系统将不再提供默认的构造方法。
* 重载
  * 如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法。

* 推荐
  * 无论是否使用，都手工书写无参数构造方法。

#### 标准类制作

* 成员变量
  * 使用**private**修饰
* 构造方法
  * 提供一个无参构造方法
  * 提供一个至多个带参构造方法
* 成员方法
  * 提供每一个成员变量对应的**getXxx()/setXxx()方法**
  * 提供一个显示对象信息的**show()**
* 创建对象并为其成员变量赋值的两种方式
  * 无参构造方法创建对象后使用**setXxx()**赋值
  * 使用带参构造方法直接创建带有属性值的对象


{% fold 点击显/隐代码 %}
```java
package com.Study_01.student;

public class Student {
    //定义变量
    private String name;
    private int age;

    //构造方法
    public Student() {
    }

    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }

    //成员方法
    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getAge() {
        return age;
    }

    public void show() {
        System.out.println(name + "," + age);
    }
}
```

```java
package com.Study_01.student;

public class StudentDemo {
    public static void main(String[] args) {
        Student stu1 = new Student();
        stu1.setName("李四");
        stu1.setAge(17);
        stu1.show();
        Student stu2 = new Student("张三",18);
        stu2.show();
    }
}
```
{% endfold %}

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记-1</title>
    <url>/java1/</url>
    <content><![CDATA[
{% cq %}
Java 学习笔记 一
{%endcq %}
<!--more-->

## JAVA准备

### **JVM、JRE、JDK**

跨平台原理：在需要运行JAVA应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机（JVM-Java Virtual Machine）

* JRE（Java Runtime Environment）

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210113123543142.png" alt="JRE">

* JDK（Java Development Kit）

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210113123659132.png" alt="JDK">

三者关系

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210113123739668.png" alt="三者关系">

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210113124227477.png" alt="路径">



### 常用DOS命令

|        操作         |               说明                |
| :-----------------: | :-------------------------------: |
|     `盘符名称:`     | 盘符切换，`E:`回车，表示切换到E盘 |
|        `dir`        |       查看当前路径下的内容        |
|      `cd 目录`      |           进入单级目录            |
|       `cd ..`       |         回退到上一级目录          |
| `cd 目录1\目录2\..` |           进入多级目录            |
|       `cd \`        |          回退到盘符目录           |
|        `cls`        |               清屏                |
|       `exit`        |        退出命令提示符窗口         |

`↑\↓`箭头能在使用过的命令之间进行切换

**当写出首字母后，按`table`键能自动补齐文件名**

### Path环境的配置

`此电脑→属性→高级系统设置→高级→环境变量→系统变量下的新建`

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117150855106.png" alt="环境变量1">

<p class='div-border blue'>
变量名： JAVA_HOME 是自己输入的<br>
变量值可自己通过复制JDK的安装目录粘贴到此<br>
也可以通过浏览目录选择JDK的安装目录<br>
然后选中 Path 变量，编辑<br>
</p>
<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117151221018.png" alt="环境变量2">

新建，输入 `%JAVA_HOME%\bin` ，建议将此行上移至最上行

### JAVA程序开发运行流程

三个步骤：

|   编写程序   |  编译程序   |  运行程序  |
| :----------: | :---------: | :--------: |
| 记事本等工具 | `javac`命令 | `java`命令 |

```java
//HelloWorld.java 示例
public class HelloWorld{
	public static void main(String[] args){
				System.out.println("HelloWorld");
	}
}
```

<p class='div-border blue'>
先进入java程序所在目录<br>
编译JAVA程序：javac 文件名.java<br>
如：javac HelloWorld.java<br>
执行java程序：java 类名<br>
如：java HelloWorld<br>
</p>


### 解决问题

{% note success no-icon%}
BUG：小甲虫
多看
多思考，多查阅资料
多尝试，多总结
养成分析与解决问题的能力
{% endnote %}

{% note primary no-icon%}
常见问题总结：
* 非法字符：一般为中英文状态下的符号问题
* 找不到包、符号等：一般为字符拼写问题
{% endnote %}

## JAVA基础

### 注释

```java
单行注释：
		格式：//注释信息
多行注释：
		格式：/*注释信息*/
文档注释
		格式：/**注释信息*/
```

```java
/*
	类的定义格式
		public class 类名{
		}
*/

//main方法是程序的入口方法，代码的执行是从main方法开始的
```

## 关键字


特点： 
* 字母全部小写
* 常用的代码编辑器，针对关键字有特殊的颜色标记

### 常量

<p class='div-border blue'>
在程序运行过程中，其值不可以发生改变的量
</p>

|  常量类型  |         说明         |          举例           |
| :--------: | :------------------: | :---------------------: |
| 字符串常量 | 用双引号括起来的内容 |      "HelloWorld"       |
|  整数常量  |    不带小数的数字    |        666，-88         |
|  小数常量  |     带小数的数字     |      13.14，-5.21       |
|  字符常量  | 用单引号括起来的内容 |    'A’ ，'o '，'我'     |
|  布尔常量  |   布尔值，表示真假   | 只有两个值：true，false |
|   空常量   |  一个特殊的值，空值  |       值是: null        |

**空常量是不能直接输出的**

### 数据类型

#### 计算机的存储单元

* 位(bit)：1bit可以保存一个0或者1（最小的存储单位）
* 字节(Byte)：1B = 8b
* 千字节(KB)：1KB = 1024B
* 兆字节(MB)：1MB = 1024KB
* 吉字节(GB)：1GB = 1024MB
* 太字节(TB)：1TB = 1024GB
* ...

#### 数据类型分类

<p class='div-border blue'>
java是强类型语言，对每一种数据都给出了明确的数据类型，不同的数据类型也分配了不同的内存空间，所以他们表示的数据大小也是不一样的。
</p >
<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117160323137.png" alt="数据类型分类">

#### 内存占用和取值范围

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117160231901.png" alt="常用数据类型">

### 变量

{% note info no-icon%}
在程序运行过程中，其值可以发生改变的量
本质：内存中的一小块区域
定义：数据类型 变量名 = 变量值
{% endnote %}

#### 注意事项

* 定义的变量名不能重复

* 定义变量时一定要给值

* 定义变量时，给出的整数默认为`int类型`，所以当定义`long类型`时，应当加上`L`（为防止整数过大）
  `如：long l = 100000000L`

* 定义变量时，浮点数默认为`double类型`，所以当定义`float类型`时，应当加上`F`（为防止类型不兼容）

  `如：float f = 13.14F`

### 标识符

{% note info no-icon%}
给类、方法、变量等起名字的符号
{% endnote %}

#### 定义规则

* 由数字、字母、下划线(_)和美元符($)组成
* 不能以数字开头
* 不能是关键字
* 区分大小写

#### 命名约定

##### 小驼峰命名法：方法、变量

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117162013979.png" alt="小驼峰命名法">

##### 大驼峰命名法：类

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117162034708.png" alt="大驼峰命名法">

### 类型转换

#### 自动类型转换

{% note info no-icon%}
把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量
{% endnote %}

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117162339226.png" alt="自动类型转换">

#### 强制类型转换

{% note info no-icon%}
把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量
格式：目标数据类型 变量名 = (目标数据类型)值或者变量
会有数据的丢失
{% endnote %}

## 运算符

### 算术运算符

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117163046984.png" alt="算术运算符">

#### 字符的"+"操作

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117163447831.png" alt="字符的“+”操作">

#### 字符串的"+"操作

* 当"+"操作中出现字符串时，这个"+"是字符串连接符，而不是算术运算
* 在"+"操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行"+"操作时，从左到右依次执行

```java
66 + 600 + "JAVA"
//结果为：666JAVA
```

### 赋值运算符

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117164443869.png" alt="赋值运算符">

```java
//以下两行等价
int i = i + 20;
int i += 20;
//但下面这行将会报错
short s = s + 20;
//在字符的"+"操作中，该表达式由于包含多个数据类型，则short将会提升至int，故而导致类型不兼容
//因做强制类型转换
short s = short(s + 20);
//等价于
short s += 20;
```

### 自增自减运算符

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117165219784.png" alt="自增自减运算符">

### 关系运算符

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117165529950.png" alt="关系运算符">

### 逻辑运算符

#### 基本

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117165742825.png" alt="逻辑运算符">

#### 短路逻辑运算符

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117170323385.png" alt="短路逻辑运算符">

### 三元运算符

```java
格式：关系表达式?表达式1:表达式2;
计算规则：
	首先计算关系表达式的结果
	若为true，表达式1的值就是运算的结果
	若为false，表达式2的值就是运算的结果
```

## 数据输入

### Scanner

```java
//1、导包→导包的动作必须出现在类定义的上边
import java.util.Scanner;
//2、创建对象→只有变量名sc能改变，其它均为固定格式
Scanner sc = new Scanner(System.in);
//3、接收数据→只有变量名i能改变，其它均为固定格式
int i = sc.nextInt();
```

## 分支语句

### 流程控制

* 顺序结构

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117172011271.png" alt="顺序结构">

* 分支结构
* 循环结构

### if语句

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117172212316.png" alt="if语句格式1">

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117172244440.png" alt="if语句格式2">

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117172405255.png" alt="if语句格式3">

### 数据测试

{% note info no-icon%}
数据测试：正确数据、边界数据、错误数据
{% endnote %}

### switch语句

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117172846901.png" alt="switch语句格式">

{% note primary no-icon%}
若某个case语句后无break语句，则会发生case穿透，即若执行了该case语句，则会一直向下执行(不会判断接下来的case语句)，直至遇到一个break或者整体switch语句结束
{% endnote %}

### for循环语句

#### 循环结构

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117183919135.png" alt="循环结构">

#### 格式

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210117184034359.png" alt="for循环语句格式">

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210124120630554.png" alt="任意位上的数值">

### while循环语句

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210124121040161.png" alt="while循环语句格式">

{% note info no-icon%}
知道循环次数，一般for循环
不知道循环次数，一般while循环
{% endnote %}

### do while循环语句

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210125160020506.png" alt="do while循环语句格式">

### 三种循环区别

```java
do while循环语句一定会执行一次循环语句
注意局部变量的定义
死循环：
	for(;;){}
	while(true){}
	do{}while(true);
```

### 跳转控制语句

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210125160728866.png" alt="跳转控制语句格式">

### 循环嵌套

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210125160923811.png" alt="循环嵌套">

### Random：产生随机数

```java
1、导包：
import java.util.Random;
//导包的动作必须出现在类定义的上面
2、创建对象
Random r = new Random();
//其中变量名r可变
3、获取随机数
int number = r.nextInt(10);
//获取随机数的范围：[0,10)
//变量名number可变
```

## IDEA

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210125173851422.png" alt="流程">

### 项目结构

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210125173945571.png" alt="项目结构">

### 辅助键与快捷键

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210125174106657.png" alt="辅助键与快捷键1">

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn@1.2.7/images/loading.gif" data-src="https://gitee.com/WillCAI2020/pic-go/raw/master/Java/one/image-20210125174149621.png" alt="辅助键与快捷键2">

{% note info no-icon%}
导包：ctrl+Enter
快捷创建标准类：alt+Insert
调用成员方法时，先写方法，再用 ctrl+alt+v，会自动给出返回类型与变量名
{% endnote %}

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 DarkMode 实现的深色主题</title>
    <url>/10/</url>
    <content><![CDATA[
<p class='div-border green'>基于 DarkMode.js 实现 Next 主题的自定义深色模式</p>

<!--more-->

## 概述

上一种方法实现的深色模式不包含 cookies 相关步骤，所以切换页面时无法保存深色配置。于是我搜索 next 自定义深色主题，发现许多文章提到可以通过 darkmode.js 实现，比如此文：[Hexo（Next 主题）实现可切换的 Dark Mode (暗色背景 / 夜间模式)](https://dog.wtf/tech/hexo-dark-mode-note/)。我将其中通过定制 vendors 以加入 darkmode,js 变为直接在自定义 body-end.njk 中引入，最终实现的结果并不如意。于是我前往 DarkMode,js 开源仓库，自己修改了一番，实现了需求。

<a href="https://github.com/sandoche/Darkmode.js" class="LinkCard">Darkmode.js  仓库</a>

下面直接放出实现步骤，最后谈一下如何实现的，权当总结。

## 实现

### 创建 darkmode.js

首先得引入 darkmode.js ，先在`根目录\source\js`中新建 darkmode.js ，填入以下代码：

{% note info no-icon 点击显 / 隐代码 %}

```javascript
!(function (e, t) {
"object" == typeof exports && "object" == typeof module
? (module.exports = t())
: "function" == typeof define && define.amd
? define("darkmode-js", [], t)
: "object" == typeof exports
? (exports["darkmode-js"] = t())
: (e["darkmode-js"] = t());
})("undefined" != typeof self ? self : this, function () {
return (function (e) {
var t = {};
function n(o) {
if (t[o]) return t[o].exports;
var r = (t[o] = { i: o, l: !1, exports: {} });
return e[o].call(r.exports, r, r.exports, n), (r.l = !0), r.exports;
}
return (
(n.m = e),
(n.c = t),
(n.d = function (e, t, o) {
n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: o });
}),
(n.r = function (e) {
"undefined" != typeof Symbol &&
Symbol.toStringTag &&
Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
Object.defineProperty(e, "**esModule", { value: !0 });
}),
(n.t = function (e, t) {
if ((1 & t && (e = n(e)), 8 & t)) return e;
if (4 & t && "object" == typeof e && e && e.**esModule) return e;
var o = Object.create(null);
if (
(n.r(o),
Object.defineProperty(o, "default", { enumerable: !0, value: e }),
2 & t && "string" != typeof e)
)
for (var r in e)
n.d(
o,
r,
function (t) {
return e[t];
}.bind(null, r)
);
return o;
}),
(n.n = function (e) {
var t =
e && e.**esModule
? function () {
return e.default;
}
: function () {
return e;
};
return n.d(t, "a", t), t;
}),
(n.o = function (e, t) {
return Object.prototype.hasOwnProperty.call(e, t);
}),
(n.p = ""),
n((n.s = 0))
);
})([
function (e, t, n) {
"use strict";
Object.defineProperty(t, "**esModule", { value: !0 }),
(t.default = void 0);
var o = (function (e) {
if (e && e.**esModule) return e;
var t = {};
if (null != e)
for (var n in e)
if (Object.prototype.hasOwnProperty.call(e, n)) {
var o =
Object.defineProperty && Object.getOwnPropertyDescriptor
? Object.getOwnPropertyDescriptor(e, n)
: {};
o.get || o.set ? Object.defineProperty(t, n, o) : (t[n] = e[n]);
}
return (t.default = e), t;
})(n(1));
var r = o.default;
(t.default = r),
o.IS_BROWSER &&
(function (e) {
e.Darkmode = o.default;
})(window),
(e.exports = t.default);
},
function (e, t, n) {
"use strict";
function o(e, t) {
for (var n = 0; n < t.length; n++) {
var o = t[n];
(o.enumerable = o.enumerable || !1),
(o.configurable = !0),
"value" in o && (o.writable = !0),
Object.defineProperty(e, o.key, o);
}
}
Object.defineProperty(t, "**esModule", { value: !0 }),
(t.default = t.IS_BROWSER = void 0);
var r = "undefined" != typeof window;
t.IS_BROWSER = r;
var a = (function () {
function e(t) {
if (
((function (e, t) {
if (!(e instanceof t))
throw new TypeError("Cannot call a class as a function");
})(this, e),
r)
) {
t = Object.assign(
{},
{
bottom: "32px",
right: "32px",
left: "unset",
time: "0.3s",
buttonColorDark: "#100f2c",
buttonColorLight: "#fff",
label: "",
saveInCookies: !0,
autoMatchOsTheme: !0,
},
t
);
var n = "\n .darkmode-layer {\n position: fixed;\n pointer-events: none;\n background: "

                   .concat(
                     t.time,
                     " ease;\n              }\n\n      .darkmode-layer--button {\n        width: 2.9rem;\n        height: 2.9rem;\n        border-radius: 50%;\n        right: "
                   )
                   .concat(t.right, ";\n        bottom: ")
                   .concat(t.bottom, ";\n        left: ")
                   .concat(
                     t.left,
                     ";\n      }\n\n      .darkmode-layer--simple {\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        transform: scale(1) !important;\n      }\n\n      .darkmode-layer--expanded {\n        transform: scale(100);\n        border-radius: 0;\n      }\n\n      .darkmode-layer--no-transition {\n        transition: none;\n      }\n\n      .darkmode-toggle {\n        background: "
                   )
                   .concat(
                     t.buttonColorDark,
                     ";\n        width: 3rem;\n        height: 3rem;\n        position: fixed;\n        border-radius: 50%;\n        border:none;\n        right: "
                   )
                   .concat(t.right, ";\n        bottom: ")
                   .concat(t.bottom, ";\n        left: ")
                   .concat(
                     t.left,
                     ";\n        cursor: pointer;\n        transition: all 0.5s ease;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .darkmode-toggle--white {\n        background: "
                   )
                   .concat(
                     t.buttonColorLight,
                     ";\n      }\n\n      .darkmode-toggle--inactive {\n        display: none;\n      }\n\n      .darkmode-background {\n        background: "
                   ),
                 o = document.createElement("div"),
                 a = document.createElement("button"),
                 i = document.createElement("div");
               (a.innerHTML = t.label),
                 a.classList.add("darkmode-toggle--inactive"),
                 o.classList.add("darkmode-layer"),
                 i.classList.add("darkmode-background");
               var d = "true" === window.localStorage.getItem("darkmode"),
                 s =
                   t.autoMatchOsTheme &&
                   window.matchMedia("(prefers-color-scheme: dark)").matches,
                 l = null === window.localStorage.getItem("darkmode");
               ((!0 === d && t.saveInCookies) || (l && s)) &&
                 (o.classList.add(
                   "darkmode-layer--expanded",
                   "darkmode-layer--simple",
                   "darkmode-layer--no-transition"
                 ),
                 a.classList.add("darkmode-toggle--white"),
                 document.body.classList.add("darkmode--activated")),
                 document.body.insertBefore(a, document.body.firstChild),
                 document.body.insertBefore(o, document.body.firstChild),
                 document.body.insertBefore(i, document.body.firstChild),
                 this.addStyle(n),
                 (this.button = a),
                 (this.layer = o),
                 (this.saveInCookies = t.saveInCookies),
                 (this.time = t.time);
             }
           }
           var t, n, a;
           return (
             (t = e),
             (n = [
               {
                 key: "addStyle",
                 value: function (e) {
                   var t = document.createElement("link");
                   t.setAttribute("rel", "stylesheet"),
                     t.setAttribute("type", "text/css"),
                     t.setAttribute(
                       "href",
                       "data:text/css;charset=UTF-8," + encodeURIComponent(e)
                     ),
                     document.head.appendChild(t);
                 },
               },
               {
                 key: "showWidget",
                 value: function () {
                   var e = this;
                   if (r) {
                     var t = this.button,
                       n = this.layer,
                       o = 1e3 * parseFloat(this.time);
                     t.classList.add("darkmode-toggle"),
                       t.classList.remove("darkmode-toggle--inactive"),
                       t.setAttribute("aria-label", "Activate dark mode"),
                       t.setAttribute("aria-checked", "false"),
                       t.setAttribute("role", "checkbox"),
                       n.classList.add("darkmode-layer--button"),
                       t.addEventListener("click", function () {
                         var r = e.isActivated();
                         r
                           ? (n.classList.remove("darkmode-layer--simple"),
                             t.setAttribute("disabled", !0),
                             setTimeout(function () {
                               n.classList.remove("darkmode-layer--no-transition"),
                                 n.classList.remove("darkmode-layer--expanded"),
                                 t.removeAttribute("disabled");
                             }, 1))
                           : (n.classList.add("darkmode-layer--expanded"),
                             t.setAttribute("disabled", !0),
                             setTimeout(function () {
                               n.classList.add("darkmode-layer--no-transition"),
                                 n.classList.add("darkmode-layer--simple"),
                                 t.removeAttribute("disabled");
                             }, o)),
                           t.classList.toggle("darkmode-toggle--white"),
                           document.body.classList.toggle("darkmode--activated"),
                           window.localStorage.setItem("darkmode", !r);
                       });
                   }
                 },
               },
               {
                 key: "toggle",
                 value: function () {
                   if (r) {
                     var e = this.layer,
                       t = this.isActivated(),
                       n = this.button;
                     e.classList.toggle("darkmode-layer--simple"),
                       document.body.classList.toggle("darkmode--activated"),
                       window.localStorage.setItem("darkmode", !t),
                       n.setAttribute("aria-label", "De-activate dark mode"),
                       n.setAttribute("aria-checked", "true");
                   }
                 },
               },
               {
                 key: "isActivated",
                 value: function () {
                   return r
                     ? document.body.classList.contains("darkmode--activated")
                     : null;
                 },
               },
             ]) && o(t.prototype, n),
             a && o(t, a),
             e
           );
         })();
         t.default = a;
       },
     ]);

});
```

{% endnote %}

<p class='div-border yellow'>此 darkmode.js 是我基于原版 darkmode.js，加上自己对文件内容浅显的理解，最后经过实践改动了一小部分所得的成品</p>

### 引入 darkmode.js

然后在根目录`\source\_data\body-end.njk`加入以下代码以引入 darkmode.js：

```nginx
{%- if theme.darkmode_js.enable %}
  <script src="/js/darkmode.js"></script>
{%- endif %}
```

### 调用

最后在同一个文件（`\source\_data\body-end.njk`）中加入以下代码来配置相应的参数并调用 js 中的函数：

```nginx
{%- if theme.darkmode_js.enable %}
<script>
var options = {
  bottom: '64px', // default: '32px'
  right: '32px', // default: '32px'
  left: 'unset', // default: 'unset'
  time: '0.5s', // default: '0.3s'
  buttonColorDark: '#100f2c',  // default: '#100f2c'
  buttonColorLight: '#fff', // default: '#fff'
  saveInCookies: true, // default: true,
  label: '🌓', // default: ''
  autoMatchOsTheme: true // default: true
}
const darkmode = new Darkmode(options);
darkmode.showWidget();
</script>
{%- endif %}
```

### 自定义深色样式

当你做完上述步骤，预览界面是将能在页面左下角看到切换按钮'🌓'。点击这个按钮后，页面中 body 元素将加上类 darkmode--activated，故而深色模式下许多元素样式我们将能利用类 darkmode--activated 来自己定义（纯为 css 内容）。

修改样式自然与 next 全能的自定义样式文件 styles.styl 有关啦，你可以直接在其中加入属于你自己的样式。

下面贴出对我来说比较适合的深色模式配置，权当参考：

{% note info no-icon 点击显 / 隐代码 %}

```stylus
//修改darkmode.js样式
.darkmode--activated {
  background: #000 !important;	/* 去除mix-blend-mode实现背景 */
}
/*主体 main-inner */
.darkmode--activated .main-inner{
  background: rgba(40,44,52,0.5);	/*区分阴影度*/
}
/* 文章块 post-block */
.darkmode--activated .post-block{
  opacity: 1;
  background: #282c34;				/*背景颜色*/
  color: #92fbfb;					/*文字颜色*/
}
/* 页脚 */
.darkmode--activated .footer{
  color: #92fbfb;					/*页脚颜色*/
}
/* 文章尾部上下文 */
.darkmode--activated .post-nav-item a{
  color: #92fbfb;					/*上下文颜色*/
  &:hover {
    color: #FFD700;					/* 移动至所显现颜色*/
  }
}

/* header上部的下部 */
.darkmode--activated .main-menu{
  background: #282c34;				/*header上部分颜色*/
  border-radius: 0 0 $myradius $myradius;	/*设置圆角*/
}
.darkmode--activated .menu-item a{
  &:hover {
	border-radius: $myradius;
    background: #382d2d;			/* 移动至所显现颜色*/
	color: aqua;
  }
}
.darkmode--activated a.menu-item-active{
	border-radius: $myradius;
    background: #382d2d;			/* 选中时显现颜色*/
}

/* 设置 brand 背景 */
.darkmode--activated .site-brand-container{
  background: url(https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/header-bg1.jpg);
  background-repeat: repeat;
  background-position: 70% 20%;
  background-size: cover;
}
/* 设置header下部 */
.darkmode--activated .sidebar-inner{
	background: #282c34;
}
.darkmode--activated .site-state-item a{
  &:hover {
	color: aqua;
  }
}
.darkmode--activated .links-of-author-item a{
  &:hover {
	background: #382d2d;
	color: aqua;
  }
}

/* 设置二级标题 */
.darkmode--activated  .sub-menu{
  background: #282c34;
}

/* 搜索页面背景颜色 */
.darkmode--activated  .search-header,
.darkmode--activated  .search-result-container{
  background: #282c34 !important;
}

/* 搜索页面字体颜色 */
.darkmode--activated  .search-input,
.darkmode--activated  .search-result-container,
.darkmode--activated  .search-result-list a{
  color: white;
}
/* 搜索页面鼠标划入变化 */
.darkmode--activated  .search-result-list a{
  border-bottom: 1px solid white;
  &:hover {
	color: aqua;
	border-bottom: 1px solid aqua;
  } 
}
/* live2d 文字颜色 */
.darkmode--activated  #waifu-tips{
  color: white;
}
.darkmode--activated  #waifu-tips span{
  color: purple;
}
/* 设置post-meta超链接 */
.darkmode--activated .post-meta-item a{
  color: #4169E1;
  border-bottom: none;
  border-bottom: 1px solid #0593d3;
  &:hover {
    color: #FFD700;
    border-bottom: none;
    border-bottom: 1px solid #fc6423;
  }
}

.darkmode--activated  .comments{
  background: #282c34;
}
.darkmode--activated  a.vlogin-btn,
.darkmode--activated  .vnick,
.darkmode--activated  .vmail,
.darkmode--activated  .vlink,
.darkmode--activated  .vmail,
.darkmode--activated  .veditor,
.darkmode--activated  .vinput p,
.darkmode--activated  .vinput h1,
.darkmode--activated  .vinput h2,
.darkmode--activated  .vinput h3{
	color: #92fbfb !important
}
.darkmode--activated  a.vlogin-btn{
  &:hover {
    color: #FFD700 !important;
  }
}
```

{% endnote %}

以上样式是我通过 F12，按照自己的审美观配置出的。由于我对 CSS 并未有太深入的了解，所以代码写的比较简陋，对我来说，完成网页深色模式的适配无非就是哪里不喜欢改哪里（网页的美化也就是这样）。

## 历程

最后叙述一下历程。（PS：单纯的记录一下自己愚蠢的历程而已😶）

因对上一种无法保存已选的模式的深色切换功能不满，我便找寻各种教程。于是很快遇上并应用了 darkmode.js。实现后发下页面很多地方颜色很怪异，于是我前往 body-end.njk 中修改默认配置（见[官方仓库](https://github.com/sandoche/Darkmode.js)）。当我修改 mixColor 这个参数后，发现页面怪异颜色也在变化，于是认定是 mixColor 的原因。

页面的样式由 css 控制，而 body-end.njk 中没有，那么相应的样式肯定放在另一个新导入的文件 darkmode.js 中，打开原版文件（此 darkmode.js 是我格式化官方 darkmode-js.min.js 所得到的），全局搜索 mixColor。

{% note info no-icon 点击显 / 隐代码 %}
```javascript
!(function (e, t) {
  "object" == typeof exports && "object" == typeof module
    ? (module.exports = t())
    : "function" == typeof define && define.amd
    ? define("darkmode-js", [], t)
    : "object" == typeof exports
    ? (exports["darkmode-js"] = t())
    : (e["darkmode-js"] = t());
})("undefined" != typeof self ? self : this, function () {
  return (function (e) {
    var t = {};
    function n(o) {
      if (t[o]) return t[o].exports;
      var r = (t[o] = { i: o, l: !1, exports: {} });
      return e[o].call(r.exports, r, r.exports, n), (r.l = !0), r.exports;
    }
    return (
      (n.m = e),
      (n.c = t),
      (n.d = function (e, t, o) {
        n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: o });
      }),
      (n.r = function (e) {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(e, "__esModule", { value: !0 });
      }),
      (n.t = function (e, t) {
        if ((1 & t && (e = n(e)), 8 & t)) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var o = Object.create(null);
        if (
          (n.r(o),
          Object.defineProperty(o, "default", { enumerable: !0, value: e }),
          2 & t && "string" != typeof e)
        )
          for (var r in e)
            n.d(
              o,
              r,
              function (t) {
                return e[t];
              }.bind(null, r)
            );
        return o;
      }),
      (n.n = function (e) {
        var t =
          e && e.__esModule
            ? function () {
                return e.default;
              }
            : function () {
                return e;
              };
        return n.d(t, "a", t), t;
      }),
      (n.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }),
      (n.p = ""),
      n((n.s = 0))
    );
  })([
    function (e, t, n) {
      "use strict";
      Object.defineProperty(t, "__esModule", { value: !0 }),
        (t.default = void 0);
      var o = (function (e) {
        if (e && e.__esModule) return e;
        var t = {};
        if (null != e)
          for (var n in e)
            if (Object.prototype.hasOwnProperty.call(e, n)) {
              var o =
                Object.defineProperty && Object.getOwnPropertyDescriptor
                  ? Object.getOwnPropertyDescriptor(e, n)
                  : {};
              o.get || o.set ? Object.defineProperty(t, n, o) : (t[n] = e[n]);
            }
        return (t.default = e), t;
      })(n(1));
      var r = o.default;
      (t.default = r),
        o.IS_BROWSER &&
          (function (e) {
            e.Darkmode = o.default;
          })(window),
        (e.exports = t.default);
    },
    function (e, t, n) {
      "use strict";
      function o(e, t) {
        for (var n = 0; n < t.length; n++) {
          var o = t[n];
          (o.enumerable = o.enumerable || !1),
            (o.configurable = !0),
            "value" in o && (o.writable = !0),
            Object.defineProperty(e, o.key, o);
        }
      }
      Object.defineProperty(t, "__esModule", { value: !0 }),
        (t.default = t.IS_BROWSER = void 0);
      var r = "undefined" != typeof window;
      t.IS_BROWSER = r;
      var a = (function () {
        function e(t) {
          if (
            ((function (e, t) {
              if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function");
            })(this, e),
            r)
          ) {
            t = Object.assign(
              {},
              {
                bottom: "32px",
                right: "32px",
                left: "unset",
                time: "0.3s",
                mixColor: "#fff",
                backgroundColor: "#fff",
                buttonColorDark: "#100f2c",
                buttonColorLight: "#fff",
                label: "",
                saveInCookies: !0,
                autoMatchOsTheme: !0,
              },
              t
            );
            var n = "\n      .darkmode-layer {\n        position: fixed;\n        pointer-events: none;\n        background: "
                .concat(t.mixColor, ";\n        transition: all ")
                .concat(
                  t.time,
                  " ease;\n        mix-blend-mode: difference;\n      }\n\n      .darkmode-layer--button {\n        width: 2.9rem;\n        height: 2.9rem;\n        border-radius: 50%;\n        right: "
                )
                .concat(t.right, ";\n        bottom: ")
                .concat(t.bottom, ";\n        left: ")
                .concat(
                  t.left,
                  ";\n      }\n\n      .darkmode-layer--simple {\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        transform: scale(1) !important;\n      }\n\n      .darkmode-layer--expanded {\n        transform: scale(100);\n        border-radius: 0;\n      }\n\n      .darkmode-layer--no-transition {\n        transition: none;\n      }\n\n      .darkmode-toggle {\n        background: "
                )
                .concat(
                  t.buttonColorDark,
                  ";\n        width: 3rem;\n        height: 3rem;\n        position: fixed;\n        border-radius: 50%;\n        border:none;\n        right: "
                )
                .concat(t.right, ";\n        bottom: ")
                .concat(t.bottom, ";\n        left: ")
                .concat(
                  t.left,
                  ";\n        cursor: pointer;\n        transition: all 0.5s ease;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .darkmode-toggle--white {\n        background: "
                )
                .concat(
                  t.buttonColorLight,
                  ";\n      }\n\n      .darkmode-toggle--inactive {\n        display: none;\n      }\n\n      .darkmode-background {\n        background: "
                )
                .concat(
                  t.backgroundColor,
                  ";\n        position: fixed;\n        pointer-events: none;\n        z-index: -10;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n      }\n\n      img, .darkmode-ignore {\n        isolation: isolate;\n        display: inline-block;\n      }\n\n      @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n        .darkmode-toggle {display: none !important}\n      }\n\n      @supports (-ms-ime-align:auto), (-ms-accelerator:true) {\n        .darkmode-toggle {display: none !important}\n      }\n    "
                ),
              o = document.createElement("div"),
              a = document.createElement("button"),
              i = document.createElement("div");
            (a.innerHTML = t.label),
              a.classList.add("darkmode-toggle--inactive"),
              o.classList.add("darkmode-layer"),
              i.classList.add("darkmode-background");
            var d = "true" === window.localStorage.getItem("darkmode"),
              s =
                t.autoMatchOsTheme &&
                window.matchMedia("(prefers-color-scheme: dark)").matches,
              l = null === window.localStorage.getItem("darkmode");
            ((!0 === d && t.saveInCookies) || (l && s)) &&
              (o.classList.add(
                "darkmode-layer--expanded",
                "darkmode-layer--simple",
                "darkmode-layer--no-transition"
              ),
              a.classList.add("darkmode-toggle--white"),
              document.body.classList.add("darkmode--activated")),
              document.body.insertBefore(a, document.body.firstChild),
              document.body.insertBefore(o, document.body.firstChild),
              document.body.insertBefore(i, document.body.firstChild),
              this.addStyle(n),
              (this.button = a),
              (this.layer = o),
              (this.saveInCookies = t.saveInCookies),
              (this.time = t.time);
          }
        }
        var t, n, a;
        return (
          (t = e),
          (n = [
            {
              key: "addStyle",
              value: function (e) {
                var t = document.createElement("link");
                t.setAttribute("rel", "stylesheet"),
                  t.setAttribute("type", "text/css"),
                  t.setAttribute(
                    "href",
                    "data:text/css;charset=UTF-8," + encodeURIComponent(e)
                  ),
                  document.head.appendChild(t);
              },
            },
            {
              key: "showWidget",
              value: function () {
                var e = this;
                if (r) {
                  var t = this.button,
                    n = this.layer,
                    o = 1e3 * parseFloat(this.time);
                  t.classList.add("darkmode-toggle"),
                    t.classList.remove("darkmode-toggle--inactive"),
                    t.setAttribute("aria-label", "Activate dark mode"),
                    t.setAttribute("aria-checked", "false"),
                    t.setAttribute("role", "checkbox"),
                    n.classList.add("darkmode-layer--button"),
                    t.addEventListener("click", function () {
                      var r = e.isActivated();
                      r
                        ? (n.classList.remove("darkmode-layer--simple"),
                          t.setAttribute("disabled", !0),
                          setTimeout(function () {
                            n.classList.remove("darkmode-layer--no-transition"),
                              n.classList.remove("darkmode-layer--expanded"),
                              t.removeAttribute("disabled");
                          }, 1))
                        : (n.classList.add("darkmode-layer--expanded"),
                          t.setAttribute("disabled", !0),
                          setTimeout(function () {
                            n.classList.add("darkmode-layer--no-transition"),
                              n.classList.add("darkmode-layer--simple"),
                              t.removeAttribute("disabled");
                          }, o)),
                        t.classList.toggle("darkmode-toggle--white"),
                        document.body.classList.toggle("darkmode--activated"),
                        window.localStorage.setItem("darkmode", !r);
                    });
                }
              },
            },
            {
              key: "toggle",
              value: function () {
                if (r) {
                  var e = this.layer,
                    t = this.isActivated(),
                    n = this.button;
                  e.classList.toggle("darkmode-layer--simple"),
                    document.body.classList.toggle("darkmode--activated"),
                    window.localStorage.setItem("darkmode", !t),
                    n.setAttribute("aria-label", "De-activate dark mode"),
                    n.setAttribute("aria-checked", "true");
                }
              },
            },
            {
              key: "isActivated",
              value: function () {
                return r
                  ? document.body.classList.contains("darkmode--activated")
                  : null;
              },
            },
          ]) && o(t.prototype, n),
          a && o(t, a),
          e
        );
      })();
      t.default = a;
    },
  ]);
});
```
{% endnote %}

很容易找到 116 行开始的参数以及样式配置。其中有许多属性并不认识，全文就出现两次 mixColor，一次是参数赋值，另一次是 t.mixColor，于是猜测与 t 有关，同时搜索与 mix 有关词眼，发现了就出现三次，两次为 mixColor，还有一次 mix-blend-mode，我见其写法像 css 属性，于是搜索了解到[该属性](https://developer.mozilla.org/zh-CN/docs/Web/CSS/mix-blend-mode)描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合。我在 PS 中见过以差值方式混合颜色，故而也大概明白了页面出现怪异颜色的原因。

接着我想到能否不用这么高深的方法实现深色，简单点用 css 换颜色就行了。于是我尝试删去 mix 有关语句，经过数次试验后，预览终于不报错。接着再想如何利用深色模式下的选择器实现点击按钮换颜色。仔细浏览官方说明，发现这一条关于覆盖样式的说明：[Override style](https://github.com/sandoche/Darkmode.js#override-style)。其中讲到：

{% note info no-icon %}

- A CSS class darkmode--activated is added to the body tag when the darkmode is activated. You can take advantage of it to override the style and have a custom style

- Use the class darkmode-ignore where you don't want to apply darkmode

- You can also add this style: isolation: isolate; in your CSS, this will also ignore the darkmode.

- It is also possible to revert the Dark Mode with this style mix-blend-mode: difference;

{% endnote %}

第一句话很明显告知我们该如何自定义样式，于是解决问题。

深入浏览官方文档发现很多问题都豁然开朗，官方文档算是最权威的教程！

以及接下来适配各种元素的样式，更是让我对 F12 更加熟练，对各种属性也更加清晰。

上述经历是一种成长，在此叙述以留念 🙃。

<img alt="方法一" class="gifplayer" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/dark-one/an-one.png" >
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>探索“亮/暗”主题实现</title>
    <url>/9/</url>
    <content><![CDATA[
{% note success %}
尝试为博客添加一个切换亮暗主题的功能。
{% endnote %}

<!--more-->

## 版本信息

{% tabs version %}
<!-- tab Next -->

<strong><div align="center">version：8.2.1</div></strong>

<!-- endtab -->

<!-- tab Hexo-->
<strong><div align="center">hexo: 5.3.0
hexo-cli: 3.1.0</div></strong>
<!-- endtab -->

{% endtabs %}

---

## 方法一

1. ### 概述
	简单的添加一个button按钮，并为按钮以及黑暗模式设计样式，最后加入为按钮的 onclick 事件而设计的 js 代码。
	
2. ### 添加 button
	button 的位置取决于存在哪个元素对应的 njk 文件中，这里我将 button 放在 sidebar 中。故而先前往 _config.yml 取消 custom_file_path 关于 sidebar.njk 的注释，然后在`站点根目录/source/_data`下建立文件 sidebar.njk（已有sidebar.njk 的可忽略此步）。在其中加入：

   ```
   <a id="theme_change"
           type="button"
           onclick="theme_change()"
   >
      🌞
   </a>
   ```

3. ### 设计样式

   同理取消关于 styles.styl 的注释并建立此文件，并在该文件中加入关于主题切换 button 的样式。

   {% note info %}

   styles.styl 中能加入博客所有元素的样式设计代码。为了方便管理，我这利用 @import 引入绝对路径下的样式代码。

   {% endnote %}

   此处的 button 属于自定义内容，故而我在 _data 下创建文件夹 custom，并在其中建立 dark-theme.styl，然后在 styles.styl 文件中加入：

   ```stylus
   /*自定义主题样式设置*/
   @import "custom/dark-theme";
   ```

   最后在 dark-theme.styl 中加入：

   ```stylus
   // 黑暗主题样式
   body.dark-theme {
       background: #282c34		/* 设置黑暗主题背景颜色 */
   }
   ```

   这里我添加的 button 属于超链接（`<a></a>`），若利用`<button></button>`，还能在 dark-theme.styl 中设计 button 元素的样式，详情见[此文](http://pygo2.top/articles/41680/)。
   
4. ### 添加 JS

   由`onclick="theme_change()"`可知当我们点击 🌞 这个 button 时，会执行`theme_change()` 这个函数。所以设计并添加 `theme_change()`：建立`source/js/theme_change.js`文件，在 theme_change.js 中设计`theme_change()`，最后引入 theme_change.js 。具体如下：

   ```javascript
   // source/js/theme_change.js
   // 主题切换功能
   function theme_change() {
       // 切换字内容
       var button = document.getElementById('theme_change');
       var pattern = new RegExp('🌞', 'i');
       if (pattern.test(button.innerHTML)){
           button.innerHTML = "🌙";
       } else{
           button.innerHTML = "🌞";
       }	
       // 切换主题
       document.body.classList.toggle('dark-theme');
   	setCookie("inner",button.innerHTML,1)
   };
   ```

   同前所述，取消 footer.njk 的注释，并建立`source/_data/footer.njk`（此文件以及 body-end.njk 均被我用作引入 js）。footer.njk 中加入：

   ```nginx
   {# 自定义黑暗主题切换 #}
   <script type="text/javascript" src="/js/theme_change.js"></script>
   ```

   至此已完成，效果如下：

   <img alt="method1" class="gifplayer" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/try-light-dark-themes/method1.png" >
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试加密功能</title>
    <url>/8/</url>
    <content><![CDATA[
测试插件 hexo-blog-encrypt。
<!--more-->

```c
npm install --save hexo-blog-encrypt
```

```yaml
# 文章加密功能
encrypt:
    enable: true
```

```yaml
password: 博客密码
abstract: home 主页显示的文字提示
message: 查看博客，密码输入框上面的描述性文字
```

[hexo-blog-encrypt 资料](https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md)。


{% fold 点击显/隐内容 %}
```nginx
{% fold 点击显/隐内容 %}
something you want to fold, include code block.
{% endfold %}
```
{% endfold %}]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>记录 tags 用法</title>
    <url>/7/</url>
    <content><![CDATA[
{% cq %}Next主题使用的内置tag，官方都已经写好js

我们只要根据官方教程调用，就可以实现多样式、多功能的效果。{% endcq %}
<!--more-->

## 设置

```yaml
# 配置文件
# ---------------------------------------------------------------
# Tags Settings
# See: https://theme-next.js.org/docs/tag-plugins/
# ---------------------------------------------------------------

# Note tag (bootstrap callout)
note:
# Note tag style values:
# - simple bootstrap callout old alert style. Default.
# - modern bootstrap callout new (v2-v3) alert style.
# - flat flat callout style with background, like on Mozilla or StackOverflow.
# - disabled disable all CSS styles import of note tag.
style: flat
icons: false
# Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).
# Offset also applied to label tag variables. This option can work with disabled note tag.
light_bg_offset: 0

# Tabs tag
tabs:
transition:
tabs: false
labels: true

# PDF tag
# NexT will try to load pdf files natively, if failed, pdf.js will be used.
# So, you have to install the dependency of pdf.js if you want to use pdf tag and make it available to all browsers.
# Dependencies: https://github.com/next-theme/theme-next-pdf
pdf:
enable: false
# Default height
height: 500px

# Mermaid tag
mermaid:
enable: false
# Available themes: default | dark | forest | neutral
theme: forest
```

## 使用

看[官方文档](https://theme-next.js.org/docs/tag-plugins/)。

### [Note](https://theme-next.js.org/docs/tag-plugins/note.html)

#### 配置

```
note:
# Note tag style values:
# - simple bs-callout old alert style. Default.
# - modern bs-callout new (v2-v3) alert style.
# - flat flat callout style with background, like on Mozilla or StackOverflow.
# - disabled disable all CSS styles import of note tag.
style: modern
icons: true
# Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).
# Offset also applied to label tag variables. This option can work with disabled note tag.
light_bg_offset: 0
```

#### 用法

```nginx
{% note default %}
##### Default Header
Welcome to [Hexo!](https://hexo.io)
{% endnote %}
```

{% note default %}
##### Default Header
Welcome to [Hexo!](https://hexo.io)
{% endnote %}

```nginx
{% note primary %}
##### Primary Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}
```

{% note primary %}
##### Primary Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}

```nginx
{% note info %}
##### Info Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}
```
{% note info %}
##### Info Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}

```nginx
{% note success %}
##### Success Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}
```

{% note success %}
##### Success Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}

```nginx
{% note warning %}
##### Warning Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}
```

{% note warning %}
##### Warning Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}

### [Tabs](https://theme-next.js.org/docs/tag-plugins/tabs.html)

#### 配置

```yaml
tabs:
transition:
tabs: false
labels: true
```

#### 用法

```nginx
{% tabs Unique name, [index] %}
<!-- tab [Tab caption] [@icon] -->
Any content (support inline tags too).
<!-- endtab -->
{% endtabs %}
```

```nginx
{% tabs First unique name %}
<!-- tab -->
**This is Tab 1.**
<!-- endtab -->

<!-- tab -->
**This is Tab 2.**
<!-- endtab -->

<!-- tab -->
**This is Tab 3.**
<!-- endtab -->
{% endtabs %}
```

{% tabs First unique name %}
<!-- tab -->
**This is Tab 1.**
<!-- endtab -->

<!-- tab -->
**This is Tab 2.**
<!-- endtab -->

<!-- tab -->
**This is Tab 3.**
<!-- endtab -->
{% endtabs %}

可以嵌套使用

### [Mermaid](https://theme-next.js.org/docs/tag-plugins/mermaid.html)

#### 配置

```yaml
# Mermaid tag
mermaid:
enable: true
# Available themes: default | dark | forest | neutral
theme: forest
```

#### 使用

```nginx
{% mermaid type %}
{% endmermaid %}
```

```nginx
{% mermaid graph TD %}
A[Hard] -->|Text| B(Round)
B --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
{% endmermaid %}
```

```nginx
{% mermaid graph TD %}
A[Christmas] -->|Get money| B(Go shopping)
B --> C{Let me thinksssss<br />ssssssssssssssssssssss}
C -->|One| D[Laptop]
C -->|Two| E[iPhone]
C -->|Three| F[Car]
{% endmermaid %}
```

<p class='div-border red'>有错误，不用</p>

### cq && centerquote

```nginx
{% cq %}
**文本居中**
引用样式
cq 与 centerquote 等价
{% endcq %}
```

{% centerquote %}
**文本居中**
引用样式
cq与centerquote等价
{% endcenterquote %}

### [Label](https://theme-next.js.org/docs/tag-plugins/label.html)

```nginx
# 内置label标签。
{% label default@default %}
{% label primary@primary %}
{% label success@success %}
{% label info@info %}
{% label warning@warning %}
{% label danger@danger %}
```


<div align="center">
    {% label default@default %}
    {% label primary@primary %}
    {% label success@success %}
    {% label info@info %}
    {% label warning@warning %}
    {% label danger@danger %}
</div>
### [button && btn](https://theme-next.js.org/docs/tag-plugins/button.html)

**内置button**标签。btn与button等价。

```
{% btn https://www.baidu.com, 百度首页, download fa-lg fa-fw %}
```

<div align="center">{% btn https://www.baidu.com, 百度首页, download fa-lg fa-fw %}</div>

### [grouppicture](https://theme-next.js.org/docs/tag-plugins/group-pictures)

```
{% grouppicture 6-6 %}
![](https://theme-next.js.org/images/next.svg)
![](https://theme-next.js.org/images/next.svg)
![](https://theme-next.js.org/images/next.svg)
![](https://theme-next.js.org/images/next.svg)
![](https://theme-next.js.org/images/next.svg)
![](https://theme-next.js.org/images/next.svg)
{% endgrouppicture %}
```

{% grouppicture 6-6 %}
![](https://theme-next.js.org/images/next.svg)
![](https://theme-next.js.org/images/next.svg)
![](https://theme-next.js.org/images/next.svg)
![](https://theme-next.js.org/images/next.svg)
![](https://theme-next.js.org/images/next.svg)
![](https://theme-next.js.org/images/next.svg)
{% endgrouppicture %}

### [Link Grid](https://theme-next.js.org/docs/tag-plugins/link-grid)

```nginx
{% linkgrid %}
Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://i.loli.net/2021/03/02/QLOMIVmSPA8C36a.png
Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://i.loli.net/2021/03/02/QLOMIVmSPA8C36a.png
Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://i.loli.net/2021/03/02/QLOMIVmSPA8C36a.png
Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://i.loli.net/2021/03/02/QLOMIVmSPA8C36a.png
% Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://i.loli.net/2021/03/02/QLOMIVmSPA8C36a.png
{% endlinkgrid %}
```

{% linkgrid %}
Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://i.loli.net/2021/03/02/QLOMIVmSPA8C36a.png
Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://i.loli.net/2021/03/02/QLOMIVmSPA8C36a.png
Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://i.loli.net/2021/03/02/QLOMIVmSPA8C36a.png
Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://i.loli.net/2021/03/02/QLOMIVmSPA8C36a.png
% Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://i.loli.net/2021/03/02/QLOMIVmSPA8C36a.png
{% endlinkgrid %}

## 参考文章

* [Next主题优化-内置tags篇](http://pygo2.top/articles/25933/)

* [Tag Plugins](https://theme-next.js.org/docs/tag-plugins/)]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 bash 脚本提高效率-git push</title>
    <url>/6/</url>
    <content><![CDATA[
{% cq %}每次提交都要输重复命令

遂想能否通过脚本来自动执行，省的手动重复输入这三个命令

上网查询，发现可以通过 bash 命令。{% endcq %}
<!--more-->

## 概述

利用 git 命令更新代码仓库，普遍三个命令：

```c
git add .
git commit -m "message"
git push origin main
```

每次提交都要输一遍这三行，于是想到能否通过脚本来自动执行这三个，省的手动重复输入这三个命令。上网查询，发现可以通过 bash 命令。

## 实现

根据网上教程，编写出以下代码：

```bash
# 命名：git_WillCAI2020.bat
@echo off
echo "Introduction: Update the remote repository, written by ruchan"
echo "Steps:"

::注意修改为你自己的仓库地址
echo "1. Move to working directory" 
cd D:\Github\WillCAI2020\blog

echo "2. Display the status of the working directory and staging area" 
git status

echo "3. Start submitting code to the local repository"
git add .
 
echo "4. Commit the changes to the local repository"
set /p message=请输入提交信息：
echo %message%
git commit -m "%message%"
 
echo "5. Push the changes to the remote git server"
git push origin main
 
echo "You have successfully submitted!"
pause
```

步骤如代码中注释，通俗易懂。

注意修改仓库路径，命名以 bat 结尾，存放位置任意。

执行代码时，还能手动输入待提交信息（利于帮助管理代码）。

使用时双击运行即可。

## 扩展

还想到能否通过 bash 来执行：

```c
hexo clean && hexo g && hexo s
```

然后直接把相关命令通过 dos 运行，这是发现结果并不如愿。

于是发现应该先通过 bash 命令启动 git-bash，然后在 Git 中执行 `hexo clean && hexo g && hexo s`。

得到：

```bash
@echo off

echo "Introduction: Preview your hexo site locally, written by ruchan"
echo "Steps:"

start C:\环境\Git\git-bash.exe --cd=D:\Github\WillCAI2020\blog -c "hexo clean && hexo g && hexo s"
```

虽然发现能行，但速度不大满意，还是手动输吧。

## 参考

* [Windows 下bat脚本git提交代码到github](https://blog.csdn.net/Ep_Little_prince/article/details/108895103)
* [.bat脚本基本命令语法](https://www.cnblogs.com/iTlijun/p/6137027.html)
* [.Bat之批处理实现手动输入变量参数](https://blog.csdn.net/laozhuxinlu/article/details/52853787)
* [bat 批处理教程](https://www.w3cschool.cn/dosmlxxsc1/wvqyr9.html)

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>git</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>提示：Your branch is up to date  ...</title>
    <url>/5/</url>
    <content><![CDATA[
{% cq %}解决提示：
“On branch main
Your branch is up to date with 'origin/main'.”
不能上传代码的问题。{% endcq %}
<!--more-->
## 记录

执行 git status 发现提示：

```c
On branch main
Your branch is up to date with 'origin/main'.
```

直接 `git add .`、`git commit -m "修改"`，`git push origin main`，发现无法提交。

于是搜索，根据这篇文章： [git commit提示Your branch is up-to-date with 'origin/master'.](https://www.jianshu.com/p/e25c763b9816)，认为是版本分支的原因（不大懂）。

1. ### 新建分支

    ```c
    git branch newbranch
    //查看是否是否创建成功
    git branch 
    //若结果中有 newbranch，即成功
    ```

2. ### 切换新分支并提交改动

    ```c
    git checkout newbranch
        git add . 
    git commit -m "改动"
    ```

3. ### 切换主分支并合并改动

    ```c
    git checkout master
    git merge newbranch 
    ```

4. ### 提交代码

    ```c
    git push -u origin master
    ```

5. ### 删除新分支

    ```c
    git branch -D newbranch
    ```


## 后记

完成上述流程后，已能提交代码，但是仍会提示：

```
On branch main
Your branch is up to date with 'origin/main'.
```

根据[此文](https://blog.csdn.net/S_o_l_o_n/article/details/108130341)，暂不理会。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>实现 Github Actions 持续部署</title>
    <url>/4/</url>
    <content><![CDATA[
{% cq %}完整实现 Github Actions 持续部署！{% endcq %}
<!--more-->

## 更新

浏览 Docker 方法，发现它模拟的是本地生成 SSH 密钥，然后通过密钥连接并推送代码到远程仓库。我也尝试把 `entrypoint.sh`中的命令化为一个个步骤，直接放在 jobs 中，而不是放在 Docker 容器中，但是发现我不会 linux，所以后面再说。

最终选择仍以 token 为路径，来提交代码。

## 实现

代码如下：

```
# 文件路径 .github/workflows/deployment.yml
name: Deployment

on:
  push:
    branches: [main] # only push events on source branch trigger deployment

jobs:
  hexo-deployment:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai

    steps:
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        
    - name: Install dependencies & Generate static files
      run: |
        node -v
        npm i -g hexo-cli
        npm i
        hexo clean
        hexo g        
    - name: Deploy to Github Pages
      env:
        GIT_NAME: WillCAI2020
        GIT_EMAIL: ${{ secrets.GIT_EMAIL_BLOG }}
        REPO: github.com/WillCAI2020/WillCAI2020.github.io
        GH_TOKEN: ${{ secrets.GH_TOKEN_BLOG }}
      run: |
        cd ./public && git init && git checkout -b main && git add .
        git config --global user.name $GIT_NAME
        git config --global user.email $GIT_EMAIL
        git commit -m "GitHub Actions Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"
        git push --force --quiet "https://$GH_TOKEN@$REPO" main:main

```

## 注意

变量命名以及步骤解释在 [此文](https://crcrc.cn/3/) 均有讲解，这里不再赘述。

1. ### 分支

    2020年10月份开始 GitHub 把默认的 master 分支换成了 main 分支。为了方便，我在远程仓库的分支也设为了 main 分支。这里注意：本地 `git init`后默认仍为 master 分支，此时应将新建 main 分支，并切换到 main 分支。

    ```c
    //新建 main 分支，并切换到 main 分支
    git checkout -b main
    ```

2. ### 仓库

    我的源码放在了仓库 blog 中，但是为使用 gh-pages，生成的 public 静态文件必须放在 username.github.io 的仓库中。

    故而添加的 Secrets 变量均在 bolg 仓库中。


## 错误总结

原本我的仓库均只有 main 分支，而 jobs 代码并未加上 `git checkout -b main`，导致报错 `error: failed to push some refs to`，根据[此文](https://www.jianshu.com/p/c6f2e1ca2999)，同时浏览了 [Git push 讲解](https://www.yiibai.com/git/git_push.html)，然后从“分支名不完整、没有提交代码、本地与远程产生冲突”入手。

经过一番苦思，突然想到把远程那虚拟主机当成自己的电脑，直接 `git init`，然后 `git add .`，提交的不就是本地的 master 分支吗，但是我 `git push`指明本地的是 main 分支，而 main 分支不存在当然会报错，于是加上 `git checkout -b main`，解决问题。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>记录</title>
    <url>/2/</url>
    <content><![CDATA[
{% cq %}随手记。{% endcq %}

<!--more-->

```
hexo init
git init
由于使用SSH多账号，故而添加远程地址时要注意
为Github Actions 做准备
由于想在blog仓库放源码（要部署的文件一定得放在username.github.io仓库中），故而新生成一个SSH密钥，公钥作为username.github.io的Deploy KEY，私钥作为blog的变量
```

```css
html,body {
	margin: 0;
	padding:0;
	height: 100%;
}

.main{
	min-height:100%;
	height: auto !important;
	height: 100%; /*IE6不识别min-height*/
	position: relative;
}

.main-inner{
	margin: 0 auto;
	padding-bottom: 80px;
}
	
.footer{
	position: absolute;
	bottom: 0;
	width: 100%;
	height: 60px;
	clear: both;
}
```

```
git clone https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas_ribbon
```

```
git submodule add --depth 1 https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas_ribbon
```

```
git rm -r --cached source/lib/canvas_ribbon
```

```
git submodule add --depth 1 https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest
```

```
git rm -r --cached source/lib/canvas-nest
```

```
git rm -r --cached _config.landscape.yml
```

```
npm install hexo-generator-searchdb --save
```

```
https://github.com/WillCAI2020/blog/edit/main/source/
```

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.webp" data-src="https://s3.ax1x.com/2021/02/09/yaffns.png"  alt="彩色标签页">

```
a7ee87d5b4b364c71deb97c0a88976b982c41c01
```

```
git rm -r --cached actions
```

```
52a73c0d7f6af17588b4941829cd0ef8da372875
```

```
html是由很多元素组成的，而每个元素的样式由css控制，css有很多属性，比如这个background，还有这个设置透明度的，设置内边距(padding)，外边距(margin)的。
我们要充分利用浏览器的开发者工具，谷歌浏览器是F12，Edge也是，你看，我用这个选中我想修改的元素，而元素的样式可以通过一个又一个的类来控制，你看这个post-block类，（class就是类的意思：class="post-block"），在css，我们通过 .post-block来为类设置属性，你看我改变它的background
```

```c
git submodule add --depth 1 https://github.com/theme-next/theme-next-pace source/lib/pace
```

![加载进度条](https://s3.ax1x.com/2021/02/09/ydzxJS.png)

```
git submodule add --depth 1 https://github.com/stevenjoezhang/live2d-widget.git source/lib/live2d-widget
```

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.webp" data-src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/try-light-dark-themes/method1.png" alt="test1">

<hr>
<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.webp" data-src="https://i.loli.net/2021/02/16/x39c4XnuqQeCgt7.jpg" alt="test2">

<hr>
<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.webp" data-src="https://i.loli.net/2021/02/16/ze5hlG1NIERATts.jpg" alt="test3">



```html
<div class='tip'><p>默认情况<p></div>
<div class='tip success'><p>success<p></div>
<div class='tip error'><p>error<p></div>
<div class='tip warning'><p>warning<p></div>
```

<div class='tip'><p>默认情况<p></div>
<div class='tip success'><p>success<p></div>
<div class='tip error'><p>error<p></div>
<div class='tip warning'><p>warning<p></div>

```
<a href="https://willcai2020.github.io/" class="LinkCard">欢迎来到——我的小站</a>
```

<a href="https://willcai2020.github.io/" class="LinkCard">欢迎来到——我的小站</a>

```
/* note语法示例 */
<p class='div-border green'>绿色</p>
<p class='div-border red'>红色</p>
<p class='div-border yellow'>黄色</p>
<p class='div-border grey'>灰色</p>
<p class='div-border blue'>蓝色</p>

/* 小tag标签语法示例 */
<span class="inline-tag red">红色小标签</span>
<span class="inline-tag green">绿色小标签</span>
<span class="inline-tag blue">蓝色小标签</span>
<span class="inline-tag yellow">黄色小标签</span>
<span class="inline-tag grey">灰色小标签</span>
```
/* note语法示例 */
<p class='div-border green'>绿色</p>
<p class='div-border red'>红色</p>
<p class='div-border yellow'>黄色</p>
<p class='div-border grey'>灰色</p>
<p class='div-border blue'>蓝色</p>

/* 小tag标签语法示例 */
<span class="inline-tag red">红色小标签</span>
<span class="inline-tag green">绿色小标签</span>
<span class="inline-tag blue">蓝色小标签</span>
<span class="inline-tag yellow">黄色小标签</span>
<span class="inline-tag grey">灰色小标签</span>

试验pangu，此行中英文间未加空格。

ipconfig /flushdns

来tryagain，这是pangu，能给文章中English添加space。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/1/</url>
    <content><![CDATA[Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).

<!--more-->
## Quick Start

### Create a new post

``` bash
$ hexo new "My New Post"
```

More info: [Writing](https://hexo.io/docs/writing.html)

### Run server

``` bash
$ hexo server
```

More info: [Server](https://hexo.io/docs/server.html)

### Generate static files

``` bash
$ hexo generate
```

More info: [Generating](https://hexo.io/docs/generating.html)

### Deploy to remote sites

``` bash
$ hexo deploy
```

More info: [Deployment](https://hexo.io/docs/one-command-deployment.html)]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
      </tags>
  </entry>
</search>
