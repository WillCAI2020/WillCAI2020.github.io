<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>实现 Github Actions 持续部署</title>
    <url>/2021/02/09/4/</url>
    <content><![CDATA[<p>完整实现 Github Actions 持续部署！</p>
<a id="more"></a>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>浏览 Docker 方法，发现它模拟的是本地生成 SSH 密钥，然后通过密钥连接并推送代码到远程仓库。我也尝试把 <code>entrypoint.sh</code>中的命令化为一个个步骤，直接放在 jobs 中，而不是放在 Docker 容器中，但是发现我不会 linux，所以后面再说。</p>
<p>最终选择仍以 token 为路径，来提交代码。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 文件路径 .github&#x2F;workflows&#x2F;deployment.yml</span><br><span class="line">name: Deployment</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [main] # only push events on source branch trigger deployment</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  hexo-deployment:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    env:</span><br><span class="line">      TZ: Asia&#x2F;Shanghai</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout source</span><br><span class="line">      uses: actions&#x2F;checkout@v2</span><br><span class="line">      with:</span><br><span class="line">        submodules: true</span><br><span class="line"></span><br><span class="line">    - name: Setup Node.js</span><br><span class="line">      uses: actions&#x2F;setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: &#39;12.x&#39;</span><br><span class="line">        </span><br><span class="line">    - name: Install dependencies &amp; Generate static files</span><br><span class="line">      run: |</span><br><span class="line">        node -v</span><br><span class="line">        npm i -g hexo-cli</span><br><span class="line">        npm i</span><br><span class="line">        hexo clean</span><br><span class="line">        hexo g        </span><br><span class="line">    - name: Deploy to Github Pages</span><br><span class="line">      env:</span><br><span class="line">        GIT_NAME: WillCAI2020</span><br><span class="line">        GIT_EMAIL: $&#123;&#123; secrets.GIT_EMAIL_BLOG &#125;&#125;</span><br><span class="line">        REPO: github.com&#x2F;WillCAI2020&#x2F;WillCAI2020.github.io</span><br><span class="line">        GH_TOKEN: $&#123;&#123; secrets.GH_TOKEN_BLOG &#125;&#125;</span><br><span class="line">      run: |</span><br><span class="line">        cd .&#x2F;public &amp;&amp; git init &amp;&amp; git checkout -b main &amp;&amp; git add .</span><br><span class="line">        git config --global user.name $GIT_NAME</span><br><span class="line">        git config --global user.email $GIT_EMAIL</span><br><span class="line">        git commit -m &quot;GitHub Actions Auto Builder at $(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&quot;</span><br><span class="line">        git push --force --quiet &quot;https:&#x2F;&#x2F;$GH_TOKEN@$REPO&quot; main:main</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>变量命名以及步骤解释在此文均有讲解，这里不再赘述。</p>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>2020年10月份开始 GitHub 把默认的 master 分支换成了 main 分支。为了方便，我在远程仓库的分支也设为了 main 分支。这里注意：本地 <code>git init</code>后默认仍为 master 分支，此时应将新建 main 分支，并切换到 main 分支。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建 main 分支，并切换到 main 分支</span></span><br><span class="line">git checkout -b main</span><br></pre></td></tr></table></figure>
<h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>我的源码放在了仓库 blog 中，但是为使用 gh-pages，生成的 public 静态文件必须放在 username.github.io 的仓库中。</p>
<p>故而添加的 Secrets 变量均在 bolg 仓库中。</p>
<h2 id="错误总结"><a href="#错误总结" class="headerlink" title="错误总结"></a>错误总结</h2><p>原本我的仓库均只有 main 分支，而 jobs 代码并未加上 <code>git checkout -b main</code>，导致报错 <code>error: failed to push some refs to</code>，根据<a href="https://www.jianshu.com/p/c6f2e1ca2999">此文</a>，同时浏览了 <a href="https://www.yiibai.com/git/git_push.html">Git push 讲解</a>，然后从“分支名不完整、没有提交代码、本地与远程产生冲突”入手。</p>
<p>经过一番苦思，突然想到把远程那虚拟主机当成自己的电脑，直接 <code>git init</code>，然后 <code>git add .</code>，提交的不就是本地的 master 分支吗，但是我 <code>git push</code>指明本地的是 main 分支，而 main 分支不存在当然会报错，于是加上 <code>git checkout -b main</code>，解决问题。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>提示：Your branch is up to date  ...</title>
    <url>/2021/02/09/5/</url>
    <content><![CDATA[<p>解决提示：“<br>On branch main<br>Your branch is up to date with ‘origin/main’.”<br>不能上传代码的问题。</p>
<a id="more"></a>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>执行 git status 发现提示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">On branch main</span><br><span class="line">Your branch is up to date with &#x27;origin/main&#x27;.</span><br></pre></td></tr></table></figure>
<p>直接 <code>git add .</code>、<code>git commit -m &quot;修改&quot;</code>，<code>git push origin main</code>，发现无法提交。</p>
<p>于是搜索，根据这篇文章： <a href="https://www.jianshu.com/p/e25c763b9816">git commit提示Your branch is up-to-date with ‘origin/master’.</a>，认为是版本分支的原因（不大懂）。</p>
<h3 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git branch newbranch</span><br><span class="line"><span class="comment">//查看是否是否创建成功</span></span><br><span class="line">git branch </span><br><span class="line"><span class="comment">//若结果中有 newbranch，即成功</span></span><br></pre></td></tr></table></figure>
<h3 id="切换新分支并提交改动"><a href="#切换新分支并提交改动" class="headerlink" title="切换新分支并提交改动"></a>切换新分支并提交改动</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git checkout newbranch</span><br><span class="line">    git add . </span><br><span class="line">git commit -m <span class="string">&quot;改动&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="切换主分支并合并改动"><a href="#切换主分支并合并改动" class="headerlink" title="切换主分支并合并改动"></a>切换主分支并合并改动</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge newbranch </span><br></pre></td></tr></table></figure>
<h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="删除新分支"><a href="#删除新分支" class="headerlink" title="删除新分支"></a>删除新分支</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git branch -D newbranch</span><br></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>完成上述流程后，已能提交代码，但是仍会提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">On branch main</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;main&#39;.</span><br></pre></td></tr></table></figure>
<p>根据<a href="https://blog.csdn.net/S_o_l_o_n/article/details/108130341">此文</a>，暂不理会。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 bash 脚本提高效率-git push</title>
    <url>/2021/02/09/6/</url>
    <content><![CDATA[<p>每次提交都要输重复命令，于是想到能否用过脚本来自动执行，省的手动重复输入这三个命令。上网查询，发现可以通过 bash 命令。</p>
<a id="more"></a>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>利用 git 命令更新代码仓库，普遍三个命令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>
<p>每次提交都要输一遍这三行，于是想到能否用过脚本来自动执行这三个，省的手动重复输入这三个命令。上网查询，发现可以通过 bash 命令。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>根据网上教程，编写出以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命名：git_WillCAI2020.bat</span></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Introduction: Update the remote repository, written by ruchan&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Steps:&quot;</span></span><br><span class="line"></span><br><span class="line">::注意修改为你自己的仓库地址</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1. Move to working directory&quot;</span> </span><br><span class="line"><span class="built_in">cd</span> D:\Github\WillCAI2020\blog</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2. Display the status of the working directory and staging area&quot;</span> </span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;3. Start submitting code to the local repository&quot;</span></span><br><span class="line">git add .</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;4. Commit the changes to the local repository&quot;</span></span><br><span class="line"><span class="built_in">set</span> /p message=请输入提交信息：</span><br><span class="line"><span class="built_in">echo</span> %message%</span><br><span class="line">git commit -m <span class="string">&quot;%message%&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;5. Push the changes to the remote git server&quot;</span></span><br><span class="line">git push origin main</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;You have successfully submitted!&quot;</span></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>步骤如代码中注释，通俗易懂。</p>
<p>注意修改仓库路径，命名以 bat 结尾，存放位置任意。</p>
<p>执行代码时，还能手动输入待提交信息（利于帮助管理代码）。</p>
<p>使用时双击运行即可。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>还想到能否通过 bash 来执行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>然后直接把相关命令通过 dos 运行，这是发现结果并不如愿。</p>
<p>于是发现应该先通过 bash 命令启动 git-bash，然后在 Git 中执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>。</p>
<p>得到：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Introduction: Preview your hexo site locally, written by ruchan&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Steps:&quot;</span></span><br><span class="line"></span><br><span class="line">start C:\环境\Git\git-bash.exe --<span class="built_in">cd</span>=D:\Github\WillCAI2020\blog -c <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span></span><br></pre></td></tr></table></figure>
<p>虽然发现能行，但速度不大满意，还是手动输吧。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/Ep_Little_prince/article/details/108895103">Windows 下bat脚本git提交代码到github</a></li>
<li><a href="https://www.cnblogs.com/iTlijun/p/6137027.html">.bat脚本基本命令语法</a></li>
<li><a href="https://blog.csdn.net/laozhuxinlu/article/details/52853787">.Bat之批处理实现手动输入变量参数</a></li>
<li><a href="https://www.w3cschool.cn/dosmlxxsc1/wvqyr9.html">bat 批处理教程</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>git</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/09/1/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
      </tags>
  </entry>
  <entry>
    <title>记录探索 Github Actions</title>
    <url>/2021/02/09/3/</url>
    <content><![CDATA[<p>在实践中成长与学习，在学习后巩固与整理。</p>
<a id="more"></a>

<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>对于通过 Github Actions 部署博客，大概已经摸清原理。利用 Github Actions 提供的环境（我愿称其为虚拟主机），环境一般配置为 ubuntu-latest （我对 Linux 并不是很熟）。之前写过一篇文章，也是借鉴别人的代码，然后整理，并结合一下自己的理解完成 Github Actions 的 jobs。</p>
<p>那篇文章得到的结果是源码以及生成的静态文件均放在同一个代码仓库，只不过分属两个分支而已，并不如我所愿。</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件路径 .github/workflows/deployment.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deployment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">master</span>] <span class="comment"># only push events on source branch trigger deployment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">hexo-deployment:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">&amp;</span> <span class="string">Generate</span> <span class="string">static</span> <span class="string">files</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">node</span> <span class="string">-v</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">g</span>        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">GIT_NAME:</span> <span class="string">WillCAI2020</span></span><br><span class="line">        <span class="attr">GIT_EMAIL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GIT_EMAIL</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">REPO:</span> <span class="string">github.com/WillCAI2020/WillCAI2020.github.io</span></span><br><span class="line">        <span class="attr">GH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">./public</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">init</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_NAME</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line">        <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Site deployed by GitHub Actions&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$GH_TOKEN@$REPO&quot;</span> <span class="string">master:master</span></span><br></pre></td></tr></table></figure>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>一个 Github Actions 可以有很多 jobs ，上述代码就一个<code>job：hexo-deployment</code>，并且设置它工作在 ubuntu-latest 上，一个 job 还能分为许多 steps，你可以为每个 step 设置name、uses（使用什么，可以选择自己写的 actions，也可以调用<a href="https://github.com/actions">官网提供</a>的，比如<code>actions/checkout@v2</code>）、with（uses 的伴随参数）、env（run 所调用的参数）、run（在虚拟主机上调用的命令）。</p>
<p>从<code>secrets.GH_TOKEN</code>与<code>secrets.GIT_EMAIL</code>可以看出，需要设置仓库的变量有<code>GH_TOKEN</code>与<code>GIT_EMAIL</code>。<code>GIT_NAME、GIT_EMAIL、GH_TOKEN、REPO</code>是 <code>step:Deploy to Github Pages</code>调用命令所需的的<code>env</code>变量。顺序执行，很容易看出：</p>
<ul>
<li>配置依赖环境（貌似不用装 Git）<ul>
<li>先调用官网提供的 actions 配置了版本为 <code>12.x 的 nodejs</code></li>
<li>然后 <code>node -v</code>观察是否成功配置</li>
<li>再 <code>npm i -g hexo-cli</code>装好 hexo</li>
<li>再<code>npm i</code>装好依赖的包</li>
<li>然后就到熟悉的 <code>hexo clean</code>与<code>hexo generate</code></li>
</ul>
</li>
<li>接下来把虚拟主机上本地仓库根目录中的 public 文件夹 （<code>hexo generate</code>生成的静态文件）提交到远程仓库<ul>
<li>进入 public 文件夹 同时将此文件夹初始化为一个 Git 仓库，并本地提交（<code>cd ./public &amp;&amp; git init &amp;&amp; git add .</code>）</li>
<li>确定全局信息<ul>
<li><code>git config --global user.name $GIT_NAM</code></li>
<li><code>git config --global user.email $GIT_EMAIL</code></li>
</ul>
</li>
<li>提交信息（<code>git commit -m &quot;Site deployed by GitHub Actions&quot;</code>）</li>
<li>上传（<code>git push --force --quiet &quot;https://$GH_TOKEN@$REPO&quot; master:master</code>）<ul>
<li><code>master:master</code>前一个 master 指的是虚拟主机上本地分支，后一个 master 则为远程仓库分支。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="GH-TOKEN"><a href="#GH-TOKEN" class="headerlink" title="GH_TOKEN"></a>GH_TOKEN</h3><p><a href="https://github.com/settings/tokens">获取</a>。<code>Generate new token</code> 来生成，随便你取什么名字，只要内容你正确拷贝到仓库的 Secrets 变量中就行了。这个东西相当于密码，创建的时候可以选择这个密码允许干些什么，我们只需要用这个来提交代码仓库，故而勾选 repo 就够了，并且这个 token 是能作用于该账号的所有仓库。</p>
<p>然后前往源码所在仓库，添加 Secrets。</p>
<p>这里取的名字注意要和代码中的相同，代码中调用<code>secrets.GH_TOKEN</code>，那这里的就要命名为 GH_TOKEN。</p>
<p><img src="https://s3.ax1x.com/2021/02/09/ydi1tP.png" alt="Secrets"></p>
<h3 id="GIT-EMAIL"><a href="#GIT-EMAIL" class="headerlink" title="GIT_EMAIL"></a>GIT_EMAIL</h3><p>这个直接添加 Secrets，内容为账号绑定的邮箱。其实这也没必要添加，直接 env 中写明<code>GIT_EMAIL: 账号邮箱</code>。</p>
<h3 id="最终版"><a href="#最终版" class="headerlink" title="最终版"></a>最终版</h3><p>详情见此文。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>通过 Docker 容器，Docker 属于操作系统层虚拟化，现在很热门，我不懂这个。</p>
<p>我根据 <a href="https://github.com/reuixiy/io-oi.me/">reuixiy</a> 为 Hugo 基于Docker、通过Arch Linux 完成 Actions 所编写的代码，改成了能实现 Hexo 部署的代码。</p>
<p>改编后代码如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/build.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Checkout codes&#x27;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Building...&#x27;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">./.github/actions/hexo-deploy</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">DEPLOY_REPO:</span> <span class="string">WillCAI2020/WillCAI2020.github.io</span></span><br><span class="line">        <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span></span><br><span class="line">        <span class="attr">DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="comment"># https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</span></span><br><span class="line">        <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .github/actions/hexo-deploy/action.yml </span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;hexo-deploy&#x27;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">&#x27;according-reuixiy&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;Deploy your Hexo site to GitHub Pages, via GitHub Actions, with Arch Linux.&#x27;</span></span><br><span class="line"><span class="attr">runs:</span></span><br><span class="line">  <span class="attr">using:</span> <span class="string">&#x27;docker&#x27;</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">&#x27;Dockerfile&#x27;</span></span><br><span class="line"><span class="attr">branding:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;arrow-up-circle&#x27;</span>  </span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;yellow&#x27;</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .github/actions/hexo-deploy/Dockerfile </span></span><br><span class="line"><span class="string">FROM</span> <span class="string">archlinux</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">pacman</span> <span class="string">-Syu</span> <span class="string">--noconfirm</span> <span class="string">nodejs</span> <span class="string">npm</span> <span class="string">git</span> <span class="string">openssh</span></span><br><span class="line"></span><br><span class="line"><span class="string">COPY</span> <span class="string">entrypoint.sh</span> <span class="string">/entrypoint.sh</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">/entrypoint.sh</span></span><br><span class="line"><span class="string">ENTRYPOINT</span> [<span class="string">&quot;/entrypoint.sh&quot;</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .github/actions/hexo-deploy/entrypoint.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Required environment variables:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   DEPLOY_KEY          SSH private key</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   DEPLOY_REPO         GitHub Pages repository</span></span><br><span class="line"><span class="comment">#   DEPLOY_BRANCH       GitHub Pages publishing branch</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   GITHUB_ACTOR        GitHub username</span></span><br><span class="line"><span class="comment">#   GITHUB_REPOSITORY   GitHub repository (source code)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   TZ                  Timezone</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line">REMOTE_REPO=<span class="string">&quot;git@github.com:<span class="variable">$&#123;DEPLOY_REPO&#125;</span>.git&quot;</span></span><br><span class="line">REMOTE_BRANCH=<span class="string">&quot;<span class="variable">$&#123;DEPLOY_BRANCH&#125;</span>&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;<span class="variable">$&#123;GITHUB_ACTOR&#125;</span>&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;<span class="variable">$&#123;GITHUB_ACTOR&#125;</span>@users.noreply.github.com&quot;</span></span><br><span class="line"><span class="comment"># https://github.com/reuixiy/hugo-theme-meme/issues/27</span></span><br><span class="line">git config --global core.quotePath <span class="literal">false</span></span><br><span class="line">ln -s /usr/share/zoneinfo/<span class="variable">$&#123;TZ&#125;</span> /etc/localtime</span><br><span class="line">mkdir /root/.ssh</span><br><span class="line">ssh-keyscan -t rsa github.com &gt; /root/.ssh/known_hosts &amp;&amp; \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;DEPLOY_KEY&#125;</span>&quot;</span> &gt; /root/.ssh/id_rsa &amp;&amp; \</span><br><span class="line">chmod 400 /root/.ssh/id_rsa</span><br><span class="line">git <span class="built_in">clone</span> --recurse-submodules <span class="string">&quot;git@github.com:<span class="variable">$&#123;GITHUB_REPOSITORY&#125;</span>.git&quot;</span> site &amp;&amp; \</span><br><span class="line"><span class="built_in">cd</span> site</span><br><span class="line"></span><br><span class="line">node -v</span><br><span class="line">npm i -g hexo-cli</span><br><span class="line">npm i</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="built_in">pushd</span> public \</span><br><span class="line">&amp;&amp; git init \</span><br><span class="line">&amp;&amp; git remote add origin <span class="variable">$REMOTE_REPO</span> \</span><br><span class="line">&amp;&amp; git add -A \</span><br><span class="line">&amp;&amp; git checkout -b <span class="variable">$REMOTE_BRANCH</span> \</span><br><span class="line">&amp;&amp; git commit -m <span class="string">&quot;Automated deployment @ <span class="subst">$(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)</span> <span class="variable">$&#123;TZ&#125;</span>&quot;</span> \</span><br><span class="line">&amp;&amp; git push -f origin <span class="variable">$REMOTE_BRANCH</span> \</span><br><span class="line">&amp;&amp; <span class="built_in">popd</span></span><br><span class="line">rm -rf /root/.ssh</span><br></pre></td></tr></table></figure>
<p>使用方法参考<a href="https://io-oi.me/tech/deploy-hugo-to-github-pages-via-github-actions/">此文</a>即可。</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>通过这个方法，我接触并浅显地了解了 Docker，明白 Dockerfile 中通过 <code>FROM archlinux</code> 能指明操作系统，为了更改 Dockerfile，我搜索并学习了一些 ArchLinux 的指令，比如通过 pacman 来安装包。</p>
<p>大致阅览了如下文章：</p>
<ul>
<li><a href="https://mogeko.me/2019/063/">在 Docker 中使用 Archlinux 的折腾记录</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%89%8B%E5%8A%A8%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85_pacman">pacman (简体中文)</a></li>
</ul>
<h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>突然发现 Github Actions 报错了，原因是 <code>failed to initialize alpm library</code>，于是去查询解决方法，普遍答复为以 root 权限运行 <code>pacman-db-upgrade</code>即可（是因为 yaourt 更新 pacman 以后，没更新 pacman 资料库的关系），于是我在 Dockerfile 中加上该命令，却报错 <code>You must have correct permissions to upgrade the database</code>，我觉得是没有 root 权限，于是找寻如何切换 root 权限，最终不了了之。</p>
<p>阅览以下文章：</p>
<ul>
<li><a href="https://blog.elleryq.idv.tw/2014/12/failed-to-initialize-alpm-library.html">failed to initialize alpm library</a></li>
<li><a href="https://segmentfault.com/a/1190000016781704">Docker 运行时的用户与组管理</a></li>
<li><a href="https://blog.csdn.net/u012763794/article/details/80943472">如何获得docker容器里面的root权限</a></li>
<li><a href="https://blog.csdn.net/u010741032/article/details/102606888">Linux系统下 -bash: apt-get: command not found</a></li>
<li><a href="https://www.runoob.com/linux/linux-shell-echo.html">Shell echo命令</a></li>
<li><a href="https://www.runoob.com/linux/linux-comm-mkdir.html">Linux mkdir 命令</a></li>
<li><a href="https://blog.csdn.net/roxxo/article/details/90410259">容器内使用sudo 报bash: sudo: command not found</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>记录</title>
    <url>/2021/02/07/2/</url>
    <content><![CDATA[<p>随手记。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">git init</span><br><span class="line">由于使用SSH多账号，故而添加远程地址时要注意</span><br><span class="line">为Github Actions 做准备</span><br><span class="line">由于想在blog仓库放源码（要部署的文件一定得放在username.github.io仓库中），故而新生成一个SSH密钥，公钥作为username.github.io的Deploy KEY，私钥作为blog的变量</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">	<span class="attribute">min-height</span>:<span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">height</span>: auto <span class="meta">!important</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>; <span class="comment">/*IE6不识别min-height*/</span></span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-inner</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">	<span class="attribute">padding-bottom</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">	<span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-ribbon source&#x2F;lib&#x2F;canvas_ribbon</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git submodule add --depth 1 https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-ribbon source&#x2F;lib&#x2F;canvas_ribbon</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm -r --cached source&#x2F;lib&#x2F;canvas_ribbon</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git submodule add --depth 1 https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-nest source&#x2F;lib&#x2F;canvas-nest</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm -r --cached source&#x2F;lib&#x2F;canvas-nest</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm -r --cached _config.landscape.yml</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;WillCAI2020&#x2F;blog&#x2F;edit&#x2F;main&#x2F;source&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2021/02/09/yaffns.png" alt="彩色标签页"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a7ee87d5b4b364c71deb97c0a88976b982c41c01</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm -r --cached actions</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">52a73c0d7f6af17588b4941829cd0ef8da372875</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html是由很多元素组成的，而每个元素的样式由css控制，css有很多属性，比如这个background，还有这个设置透明度的，设置内边距(padding)，外边距(margin)的。</span><br><span class="line">我们要充分利用浏览器的开发者工具，谷歌浏览器是F12，Edge也是，你看，我用这个选中我想修改的元素，而元素的样式可以通过一个又一个的类来控制，你看这个post-block类，（class就是类的意思：class&#x3D;&quot;post-block&quot;），在css，我们通过 .post-block来为类设置属性，你看我改变它的background</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git submodule add --depth <span class="number">1</span> https:<span class="comment">//github.com/theme-next/theme-next-pace source/lib/pace</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
