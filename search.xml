<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/1/</url>
    <content><![CDATA[Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).

<!--more-->
## Quick Start

### Create a new post

``` bash
$ hexo new "My New Post"
```

More info: [Writing](https://hexo.io/docs/writing.html)

### Run server

``` bash
$ hexo server
```

More info: [Server](https://hexo.io/docs/server.html)

### Generate static files

``` bash
$ hexo generate
```

More info: [Generating](https://hexo.io/docs/generating.html)

### Deploy to remote sites

``` bash
$ hexo deploy
```

More info: [Deployment](https://hexo.io/docs/one-command-deployment.html)]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
      </tags>
  </entry>
  <entry>
    <title>记录探索 Github Actions</title>
    <url>/3/</url>
    <content><![CDATA[
{% cq %}在实践中成长与学习，在学习后巩固与整理。{% endcq %}
<!--more-->

## 概述

对于通过 Github Actions 部署博客，大概已经摸清原理。利用 Github Actions 提供的环境（我愿称其为虚拟主机），环境一般配置为 ubuntu-latest （我对 Linux 并不是很熟）。之前写过一篇文章，也是借鉴别人的代码，然后整理，并结合一下自己的理解完成 Github Actions 的 jobs。

那篇文章得到的结果是源码以及生成的静态文件均放在同一个代码仓库，只不过分属两个分支而已，并不如我所愿。

## 方法一

1. ### 代码

    ```yaml
    # 文件路径 .github/workflows/deployment.yml
    name: Deployment

    on:
      push:
        branches: [master] # only push events on source branch trigger deployment

    jobs:
      hexo-deployment:
        runs-on: ubuntu-latest
        env:
          TZ: Asia/Shanghai

        steps:
        - name: Checkout source
          uses: actions/checkout@v2
          with:
            submodules: true

        - name: Setup Node.js
          uses: actions/setup-node@v1
          with:
            node-version: '12.x'

        - name: Install dependencies & Generate static files
          run: |
            node -v
            npm i -g hexo-cli
            npm i
            hexo clean
            hexo g        
        - name: Deploy to Github Pages
          env:
            GIT_NAME: WillCAI2020
            GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
            REPO: github.com/WillCAI2020/WillCAI2020.github.io
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
          run: |
            cd ./public && git init && git add .
            git config --global user.name $GIT_NAME
            git config --global user.email $GIT_EMAIL
            git commit -m "Site deployed by GitHub Actions"
            git push --force --quiet "https://$GH_TOKEN@$REPO" master:master
    ```
2. ### 流程

    一个 Github Actions 可以有很多 jobs ，上述代码就一个`job：hexo-deployment`，并且设置它工作在 ubuntu-latest 上，一个 job 还能分为许多 steps，你可以为每个 step 设置name、uses（使用什么，可以选择自己写的 actions，也可以调用[官网提供](https://github.com/actions)的，比如`actions/checkout@v2`）、with（uses 的伴随参数）、env（run 所调用的参数）、run（在虚拟主机上调用的命令）。

    从`secrets.GH_TOKEN`与`secrets.GIT_EMAIL`可以看出，需要设置仓库的变量有`GH_TOKEN`与`GIT_EMAIL`。`GIT_NAME、GIT_EMAIL、GH_TOKEN、REPO`是 `step:Deploy to Github Pages`调用命令所需的的`env`变量。顺序执行，很容易看出：

    * 配置依赖环境（貌似不用装 Git）
      * 先调用官网提供的 actions 配置了版本为 `12.x 的 nodejs`
      * 然后 `node -v`观察是否成功配置
      * 再 `npm i -g hexo-cli`装好 hexo
      * 再`npm i`装好依赖的包
      * 然后就到熟悉的 `hexo clean`与`hexo generate`
    * 接下来把虚拟主机上本地仓库根目录中的 public 文件夹 （`hexo generate`生成的静态文件）提交到远程仓库
      * 进入 public 文件夹 同时将此文件夹初始化为一个 Git 仓库，并本地提交（`cd ./public && git init && git add .`）
      * 确定全局信息
        * `git config --global user.name $GIT_NAM`
        * `git config --global user.email $GIT_EMAIL`
      * 提交信息（`git commit -m "Site deployed by GitHub Actions"`）
      * 上传（`git push --force --quiet "https://$GH_TOKEN@$REPO" master:master`）
        * `master:master`前一个 master 指的是虚拟主机上本地分支，后一个 master 则为远程仓库分支。
3. ### GH_TOKEN

    [获取](https://github.com/settings/tokens)。`Generate new token` 来生成，随便你取什么名字，只要内容你正确拷贝到仓库的 Secrets 变量中就行了。这个东西相当于密码，创建的时候可以选择这个密码允许干些什么，我们只需要用这个来提交代码仓库，故而勾选 repo 就够了，并且这个 token 是能作用于该账号的所有仓库。

    然后前往源码所在仓库，添加 Secrets。

    这里取的名字注意要和代码中的相同，代码中调用`secrets.GH_TOKEN`，那这里的就要命名为 GH_TOKEN。

    ![Secrets](https://s3.ax1x.com/2021/02/09/ydi1tP.png)
4. ### GIT_EMAIL

    这个直接添加 Secrets，内容为账号绑定的邮箱。其实这也没必要添加，直接 env 中写明`GIT_EMAIL: 账号邮箱`。
5. ### 最终版

    详情见此文。

## 方法二
1. ### 概述
    通过 Docker 容器，Docker 属于操作系统层虚拟化，现在很热门，我不懂这个。

    我根据 [reuixiy](https://github.com/reuixiy/io-oi.me/) 为 Hugo 基于Docker、通过Arch Linux 完成 Actions 所编写的代码，改成了能实现 Hexo 部署的代码。

    改编后代码如下：

    ```yaml
    # .github/workflows/build.yml
    name: build

    on:
      push:
        branches:
        - main

    jobs:
      build:
        runs-on: ubuntu-latest

        steps:
        - name: 'Checkout codes'
          uses: actions/checkout@v2
          with:
            submodules: true

        - name: 'Building...'
          uses: ./.github/actions/hexo-deploy
          env:
            DEPLOY_REPO: WillCAI2020/WillCAI2020.github.io
            DEPLOY_BRANCH: main
            DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
            # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
            TZ: Asia/Shanghai 
    ```

    ```yaml
    # .github/actions/hexo-deploy/action.yml 
    name: 'hexo-deploy'
    author: 'according-reuixiy'
    description: 'Deploy your Hexo site to GitHub Pages, via GitHub Actions, with Arch Linux.'
    runs:
      using: 'docker'
      image: 'Dockerfile'
    branding:
      icon: 'arrow-up-circle'  
      color: 'yellow' 
    ```

    ```yaml
    # .github/actions/hexo-deploy/Dockerfile 
    FROM archlinux

    RUN pacman -Syu --noconfirm nodejs npm git openssh

    COPY entrypoint.sh /entrypoint.sh

    RUN chmod +x /entrypoint.sh
    ENTRYPOINT ["/entrypoint.sh"]
    ```

    ```sh
    # .github/actions/hexo-deploy/entrypoint.sh 
    #!/bin/bash
    # Required environment variables:
    #
    #   DEPLOY_KEY          SSH private key
    #
    #   DEPLOY_REPO         GitHub Pages repository
    #   DEPLOY_BRANCH       GitHub Pages publishing branch
    #
    #   GITHUB_ACTOR        GitHub username
    #   GITHUB_REPOSITORY   GitHub repository (source code)
    #
    #   TZ                  Timezone
    set -e
    REMOTE_REPO="git@github.com:${DEPLOY_REPO}.git"
    REMOTE_BRANCH="${DEPLOY_BRANCH}"
    git config --global user.name "${GITHUB_ACTOR}"
    git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
    # https://github.com/reuixiy/hugo-theme-meme/issues/27
    git config --global core.quotePath false
    ln -s /usr/share/zoneinfo/${TZ} /etc/localtime
    mkdir /root/.ssh
    ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts && \
    echo "${DEPLOY_KEY}" > /root/.ssh/id_rsa && \
    chmod 400 /root/.ssh/id_rsa
    git clone --recurse-submodules "git@github.com:${GITHUB_REPOSITORY}.git" site && \
    cd site

    node -v
    npm i -g hexo-cli
    npm i
    hexo clean
    hexo g

    pushd public \
    && git init \
    && git remote add origin $REMOTE_REPO \
    && git add -A \
    && git checkout -b $REMOTE_BRANCH \
    && git commit -m "Automated deployment @ $(date '+%Y-%m-%d %H:%M:%S') ${TZ}" \
    && git push -f origin $REMOTE_BRANCH \
    && popd
    rm -rf /root/.ssh
    ```

    使用方法参考[此文](https://io-oi.me/tech/deploy-hugo-to-github-pages-via-github-actions/)即可。

2. ### 说明

    通过这个方法，我接触并浅显地了解了 Docker，明白 Dockerfile 中通过 `FROM archlinux` 能指明操作系统，为了更改 Dockerfile，我搜索并学习了一些 ArchLinux 的指令，比如通过 pacman 来安装包。

    大致阅览了如下文章：

    * [在 Docker 中使用 Archlinux 的折腾记录](https://mogeko.me/2019/063/)
    * [pacman (简体中文)](https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%89%8B%E5%8A%A8%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85_pacman)

3. ### 报错

    突然发现 Github Actions 报错了，原因是 `failed to initialize alpm library`，于是去查询解决方法，普遍答复为以 root 权限运行 `pacman-db-upgrade`即可（是因为 yaourt 更新 pacman 以后，没更新 pacman 资料库的关系），于是我在 Dockerfile 中加上该命令，却报错 `You must have correct permissions to upgrade the database`，我觉得是没有 root 权限，于是找寻如何切换 root 权限，最终不了了之。

    阅览以下文章：

    * [failed to initialize alpm library](https://blog.elleryq.idv.tw/2014/12/failed-to-initialize-alpm-library.html)
    * [Docker 运行时的用户与组管理](https://segmentfault.com/a/1190000016781704)
    * [如何获得docker容器里面的root权限](https://blog.csdn.net/u012763794/article/details/80943472)
    * [Linux系统下 -bash: apt-get: command not found](https://blog.csdn.net/u010741032/article/details/102606888)
    * [Shell echo命令](https://www.runoob.com/linux/linux-shell-echo.html)
    * [Linux mkdir 命令](https://www.runoob.com/linux/linux-comm-mkdir.html)
    * [容器内使用sudo 报bash: sudo: command not found](https://blog.csdn.net/roxxo/article/details/90410259)
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 DarkMode 实现的深色主题</title>
    <url>/8/</url>
    <content><![CDATA[
<p class='div-border green'>基于 DarkMode.js 实现 Next 主题的自定义深色模式</p>

<!--more-->

## 概述

上一种方法实现的深色模式不包含 cookies 相关步骤，所以切换页面时无法保存深色配置。于是我搜索 next 自定义深色主题，发现许多文章提到可以通过 darkmode.js 实现，比如此文：[Hexo（Next 主题）实现可切换的 Dark Mode (暗色背景 / 夜间模式)](https://dog.wtf/tech/hexo-dark-mode-note/)。我将其中通过定制 vendors 以加入 darkmode,js 变为直接在自定义 body-end.njk 中引入，最终实现的结果并不如意。于是我前往 DarkMode,js 开源仓库，自己修改了一番，实现了需求。

<a href="https://github.com/sandoche/Darkmode.js" class="LinkCard">Darkmode.js 仓库</a>

下面直接放出实现步骤，最后谈一下如何实现的，权当总结。

## 实现

1. ### 创建 darkmode.js

   首先得引入 darkmode.js ，先在`根目录\source\js`中新建 darkmode.js ，填入以下代码：

   {% fold 点击显/隐代码 %}

   ```javascript
   !(function (e, t) {
     "object" == typeof exports && "object" == typeof module
       ? (module.exports = t())
       : "function" == typeof define && define.amd
       ? define("darkmode-js", [], t)
       : "object" == typeof exports
       ? (exports["darkmode-js"] = t())
       : (e["darkmode-js"] = t());
   })("undefined" != typeof self ? self : this, function () {
     return (function (e) {
       var t = {};
       function n(o) {
         if (t[o]) return t[o].exports;
         var r = (t[o] = { i: o, l: !1, exports: {} });
         return e[o].call(r.exports, r, r.exports, n), (r.l = !0), r.exports;
       }
       return (
         (n.m = e),
         (n.c = t),
         (n.d = function (e, t, o) {
           n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: o });
         }),
         (n.r = function (e) {
           "undefined" != typeof Symbol &&
             Symbol.toStringTag &&
             Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
             Object.defineProperty(e, "__esModule", { value: !0 });
         }),
         (n.t = function (e, t) {
           if ((1 & t && (e = n(e)), 8 & t)) return e;
           if (4 & t && "object" == typeof e && e && e.__esModule) return e;
           var o = Object.create(null);
           if (
             (n.r(o),
             Object.defineProperty(o, "default", { enumerable: !0, value: e }),
             2 & t && "string" != typeof e)
           )
             for (var r in e)
               n.d(
                 o,
                 r,
                 function (t) {
                   return e[t];
                 }.bind(null, r)
               );
           return o;
         }),
         (n.n = function (e) {
           var t =
             e && e.__esModule
               ? function () {
                   return e.default;
                 }
               : function () {
                   return e;
                 };
           return n.d(t, "a", t), t;
         }),
         (n.o = function (e, t) {
           return Object.prototype.hasOwnProperty.call(e, t);
         }),
         (n.p = ""),
         n((n.s = 0))
       );
     })([
       function (e, t, n) {
         "use strict";
         Object.defineProperty(t, "__esModule", { value: !0 }),
           (t.default = void 0);
         var o = (function (e) {
           if (e && e.__esModule) return e;
           var t = {};
           if (null != e)
             for (var n in e)
               if (Object.prototype.hasOwnProperty.call(e, n)) {
                 var o =
                   Object.defineProperty && Object.getOwnPropertyDescriptor
                     ? Object.getOwnPropertyDescriptor(e, n)
                     : {};
                 o.get || o.set ? Object.defineProperty(t, n, o) : (t[n] = e[n]);
               }
           return (t.default = e), t;
         })(n(1));
         var r = o.default;
         (t.default = r),
           o.IS_BROWSER &&
             (function (e) {
               e.Darkmode = o.default;
             })(window),
           (e.exports = t.default);
       },
       function (e, t, n) {
         "use strict";
         function o(e, t) {
           for (var n = 0; n < t.length; n++) {
             var o = t[n];
             (o.enumerable = o.enumerable || !1),
               (o.configurable = !0),
               "value" in o && (o.writable = !0),
               Object.defineProperty(e, o.key, o);
           }
         }
         Object.defineProperty(t, "__esModule", { value: !0 }),
           (t.default = t.IS_BROWSER = void 0);
         var r = "undefined" != typeof window;
         t.IS_BROWSER = r;
         var a = (function () {
           function e(t) {
             if (
               ((function (e, t) {
                 if (!(e instanceof t))
                   throw new TypeError("Cannot call a class as a function");
               })(this, e),
               r)
             ) {
               t = Object.assign(
                 {},
                 {
                   bottom: "32px",
                   right: "32px",
                   left: "unset",
                   time: "0.3s",
                   buttonColorDark: "#100f2c",
                   buttonColorLight: "#fff",
                   label: "",
                   saveInCookies: !0,
                   autoMatchOsTheme: !0,
                 },
                 t
               );
               var n = "\n      .darkmode-layer {\n        position: fixed;\n        pointer-events: none;\n        background: "
                   
                   .concat(
                     t.time,
                     " ease;\n              }\n\n      .darkmode-layer--button {\n        width: 2.9rem;\n        height: 2.9rem;\n        border-radius: 50%;\n        right: "
                   )
                   .concat(t.right, ";\n        bottom: ")
                   .concat(t.bottom, ";\n        left: ")
                   .concat(
                     t.left,
                     ";\n      }\n\n      .darkmode-layer--simple {\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        transform: scale(1) !important;\n      }\n\n      .darkmode-layer--expanded {\n        transform: scale(100);\n        border-radius: 0;\n      }\n\n      .darkmode-layer--no-transition {\n        transition: none;\n      }\n\n      .darkmode-toggle {\n        background: "
                   )
                   .concat(
                     t.buttonColorDark,
                     ";\n        width: 3rem;\n        height: 3rem;\n        position: fixed;\n        border-radius: 50%;\n        border:none;\n        right: "
                   )
                   .concat(t.right, ";\n        bottom: ")
                   .concat(t.bottom, ";\n        left: ")
                   .concat(
                     t.left,
                     ";\n        cursor: pointer;\n        transition: all 0.5s ease;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .darkmode-toggle--white {\n        background: "
                   )
                   .concat(
                     t.buttonColorLight,
                     ";\n      }\n\n      .darkmode-toggle--inactive {\n        display: none;\n      }\n\n      .darkmode-background {\n        background: "
                   ),
                 o = document.createElement("div"),
                 a = document.createElement("button"),
                 i = document.createElement("div");
               (a.innerHTML = t.label),
                 a.classList.add("darkmode-toggle--inactive"),
                 o.classList.add("darkmode-layer"),
                 i.classList.add("darkmode-background");
               var d = "true" === window.localStorage.getItem("darkmode"),
                 s =
                   t.autoMatchOsTheme &&
                   window.matchMedia("(prefers-color-scheme: dark)").matches,
                 l = null === window.localStorage.getItem("darkmode");
               ((!0 === d && t.saveInCookies) || (l && s)) &&
                 (o.classList.add(
                   "darkmode-layer--expanded",
                   "darkmode-layer--simple",
                   "darkmode-layer--no-transition"
                 ),
                 a.classList.add("darkmode-toggle--white"),
                 document.body.classList.add("darkmode--activated")),
                 document.body.insertBefore(a, document.body.firstChild),
                 document.body.insertBefore(o, document.body.firstChild),
                 document.body.insertBefore(i, document.body.firstChild),
                 this.addStyle(n),
                 (this.button = a),
                 (this.layer = o),
                 (this.saveInCookies = t.saveInCookies),
                 (this.time = t.time);
             }
           }
           var t, n, a;
           return (
             (t = e),
             (n = [
               {
                 key: "addStyle",
                 value: function (e) {
                   var t = document.createElement("link");
                   t.setAttribute("rel", "stylesheet"),
                     t.setAttribute("type", "text/css"),
                     t.setAttribute(
                       "href",
                       "data:text/css;charset=UTF-8," + encodeURIComponent(e)
                     ),
                     document.head.appendChild(t);
                 },
               },
               {
                 key: "showWidget",
                 value: function () {
                   var e = this;
                   if (r) {
                     var t = this.button,
                       n = this.layer,
                       o = 1e3 * parseFloat(this.time);
                     t.classList.add("darkmode-toggle"),
                       t.classList.remove("darkmode-toggle--inactive"),
                       t.setAttribute("aria-label", "Activate dark mode"),
                       t.setAttribute("aria-checked", "false"),
                       t.setAttribute("role", "checkbox"),
                       n.classList.add("darkmode-layer--button"),
                       t.addEventListener("click", function () {
                         var r = e.isActivated();
                         r
                           ? (n.classList.remove("darkmode-layer--simple"),
                             t.setAttribute("disabled", !0),
                             setTimeout(function () {
                               n.classList.remove("darkmode-layer--no-transition"),
                                 n.classList.remove("darkmode-layer--expanded"),
                                 t.removeAttribute("disabled");
                             }, 1))
                           : (n.classList.add("darkmode-layer--expanded"),
                             t.setAttribute("disabled", !0),
                             setTimeout(function () {
                               n.classList.add("darkmode-layer--no-transition"),
                                 n.classList.add("darkmode-layer--simple"),
                                 t.removeAttribute("disabled");
                             }, o)),
                           t.classList.toggle("darkmode-toggle--white"),
                           document.body.classList.toggle("darkmode--activated"),
                           window.localStorage.setItem("darkmode", !r);
                       });
                   }
                 },
               },
               {
                 key: "toggle",
                 value: function () {
                   if (r) {
                     var e = this.layer,
                       t = this.isActivated(),
                       n = this.button;
                     e.classList.toggle("darkmode-layer--simple"),
                       document.body.classList.toggle("darkmode--activated"),
                       window.localStorage.setItem("darkmode", !t),
                       n.setAttribute("aria-label", "De-activate dark mode"),
                       n.setAttribute("aria-checked", "true");
                   }
                 },
               },
               {
                 key: "isActivated",
                 value: function () {
                   return r
                     ? document.body.classList.contains("darkmode--activated")
                     : null;
                 },
               },
             ]) && o(t.prototype, n),
             a && o(t, a),
             e
           );
         })();
         t.default = a;
       },
     ]);
   });
   ```

   {% endfold %}

   <p class='div-border yellow'>此 darkmode.js 是我基于原版 darkmode.js，加上自己对文件内容浅显的理解，最后经过实践改动了一小部分所得的成品</p>

2. ### 引入 darkmode.js

    然后在根目录`\source\_data\body-end.njk`加入以下代码以引入 darkmode.js：

   ```nginx
   {%- if theme.darkmode_js.enable %}
     <script src="/js/darkmode.js"></script>
   {%- endif %}
   ```

3. ### 调用

   最后在同一个文件（`\source\_data\body-end.njk`）中加入以下代码来配置相应的参数并调用 js 中的函数：

   ```nginx
   {%- if theme.darkmode_js.enable %}
   <script>
   var options = {
     bottom: '64px', // default: '32px'
     right: '32px', // default: '32px'
     left: 'unset', // default: 'unset'
     time: '0.5s', // default: '0.3s'
     buttonColorDark: '#100f2c',  // default: '#100f2c'
     buttonColorLight: '#fff', // default: '#fff'
     saveInCookies: true, // default: true,
     label: '🌓', // default: ''
     autoMatchOsTheme: true // default: true
   }
   const darkmode = new Darkmode(options);
   darkmode.showWidget();
   </script>
   {%- endif %}
   ```

4. ### 自定义深色样式

   当你做完上述步骤，预览界面是将能在页面左下角看到切换按钮'🌓'。点击这个按钮后，页面中 body 元素将加上类 darkmode--activated，故而深色模式下许多元素样式我们将能利用类 darkmode--activated 来自己定义（纯为 css 内容）。

   修改样式自然与 next 全能的自定义样式文件 styles.styl 有关啦，你可以直接在其中加入属于你自己的样式。

	下面贴出对我来说比较适合的深色模式配置，权当参考：

	{% fold 点击显/隐代码 %}
	
	```css
	//修改darkmode.js样式
	.darkmode--activated {
	  background: #000 !important;	/* 去除mix-blend-mode实现背景 */
	}
	/*主体 main-inner */
	.darkmode--activated .main-inner{
	  background: rgba(40,44,52,0.5);	/*区分阴影度*/
	}
	/* 文章块 post-block */
	.darkmode--activated .post-block{
	  opacity: 1;
	  background: #282c34;				/*背景颜色*/
	  color: #92fbfb;					/*文字颜色*/
	}
	/* 页脚 */
	.darkmode--activated .footer{
	  color: #92fbfb;					/*页脚颜色*/
	}
	/* 文章尾部上下文 */
	.darkmode--activated .post-nav-item a{
	  color: #92fbfb;					/*上下文颜色*/
	  &:hover {
	    color: #FFD700;					/* 移动至所显现颜色*/
	  }
	}
	
	/* header上部的下部 */
	.darkmode--activated .main-menu{
	  background: #282c34;				/*header上部分颜色*/
	  border-radius: 0 0 $myradius $myradius;	/*设置圆角*/
	}
	.darkmode--activated .menu-item a{
	  &:hover {
		border-radius: $myradius;
	    background: #382d2d;			/* 移动至所显现颜色*/
		color: aqua;
	  }
	}
	.darkmode--activated a.menu-item-active{
		border-radius: $myradius;
	    background: #382d2d;			/* 选中时显现颜色*/
	}
	
	/* 设置 brand 背景 */
	.darkmode--activated .site-brand-container{
	  background: url(https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/header-bg1.jpg);
	  background-repeat: repeat;
	  background-position: 70% 20%;
	  background-size: cover;
	}
	/* 设置header下部 */
	.darkmode--activated .sidebar-inner{
		background: #282c34;
	}
	.darkmode--activated .site-state-item a{
	  &:hover {
		color: aqua;
	  }
	}
	.darkmode--activated .links-of-author-item a{
	  &:hover {
		background: #382d2d;
		color: aqua;
	  }
	}
	
	/* 设置二级标题 */
	.darkmode--activated  .sub-menu{
	  background: #282c34;
	}
	
	/* 搜索页面背景颜色 */
	.darkmode--activated  .search-header,
	.darkmode--activated  .search-result-container{
	  background: #282c34 !important;
	}
	
	/* 搜索页面字体颜色 */
	.darkmode--activated  .search-input,
	.darkmode--activated  .search-result-container,
	.darkmode--activated  .search-result-list a{
	  color: white;
	}
	/* 搜索页面鼠标划入变化 */
	.darkmode--activated  .search-result-list a{
	  border-bottom: 1px solid white;
	  &:hover {
		color: aqua;
		border-bottom: 1px solid aqua;
	  } 
	}
	/* live2d 文字颜色 */
	.darkmode--activated  #waifu-tips{
	  color: white;
	}
	.darkmode--activated  #waifu-tips span{
	  color: purple;
	}
	/* 设置post-meta超链接 */
	.darkmode--activated .post-meta-item a{
	  color: #4169E1;
	  border-bottom: none;
	  border-bottom: 1px solid #0593d3;
	  &:hover {
	    color: #FFD700;
	    border-bottom: none;
	    border-bottom: 1px solid #fc6423;
	  }
	}
	
	.darkmode--activated  .comments{
	  background: #282c34;
	}
	.darkmode--activated  a.vlogin-btn,
	.darkmode--activated  .vnick,
	.darkmode--activated  .vmail,
	.darkmode--activated  .vlink,
	.darkmode--activated  .vmail,
	.darkmode--activated  .veditor,
	.darkmode--activated  .vinput p,
	.darkmode--activated  .vinput h1,
	.darkmode--activated  .vinput h2,
	.darkmode--activated  .vinput h3{
		color: #92fbfb !important
	}
	.darkmode--activated  a.vlogin-btn{
	  &:hover {
	    color: #FFD700 !important;
	  }
	}
	```
	
	{% endfold %}
	
	以上样式是我通过 F12，按照自己的审美观配置出的。由于我对 CSS 并未有太深入的了解，所以代码写的比较简陋，对我来说，完成网页深色模式的适配无非就是哪里不喜欢改哪里（网页的美化也就是这样）。



## 历程

最后叙述一下历程。（PS：单纯的记录一下自己愚蠢的历程而已😶）

因对上一种无法保存已选的模式的深色切换功能不满，我便找寻各种教程。于是很快遇上并应用了 darkmode.js。实现后发下页面很多地方颜色很怪异，于是我前往 body-end.njk 中修改默认配置（见[官方仓库](https://github.com/sandoche/Darkmode.js)）。当我修改 mixColor 这个参数后，发现页面怪异颜色也在变化，于是认定是 mixColor 的原因。

页面的样式由 css 控制，而 body-end.njk 中没有，那么相应的样式肯定放在另一个新导入的文件 darkmode.js 中，打开原版文件（此 darkmode.js 是我格式化官方 darkmode-js.min.js 所得到的），全局搜索 mixColor。

{% fold 点击显/隐代码 %}

```javascript
!(function (e, t) {
  "object" == typeof exports && "object" == typeof module
    ? (module.exports = t())
    : "function" == typeof define && define.amd
    ? define("darkmode-js", [], t)
    : "object" == typeof exports
    ? (exports["darkmode-js"] = t())
    : (e["darkmode-js"] = t());
})("undefined" != typeof self ? self : this, function () {
  return (function (e) {
    var t = {};
    function n(o) {
      if (t[o]) return t[o].exports;
      var r = (t[o] = { i: o, l: !1, exports: {} });
      return e[o].call(r.exports, r, r.exports, n), (r.l = !0), r.exports;
    }
    return (
      (n.m = e),
      (n.c = t),
      (n.d = function (e, t, o) {
        n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: o });
      }),
      (n.r = function (e) {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(e, "__esModule", { value: !0 });
      }),
      (n.t = function (e, t) {
        if ((1 & t && (e = n(e)), 8 & t)) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var o = Object.create(null);
        if (
          (n.r(o),
          Object.defineProperty(o, "default", { enumerable: !0, value: e }),
          2 & t && "string" != typeof e)
        )
          for (var r in e)
            n.d(
              o,
              r,
              function (t) {
                return e[t];
              }.bind(null, r)
            );
        return o;
      }),
      (n.n = function (e) {
        var t =
          e && e.__esModule
            ? function () {
                return e.default;
              }
            : function () {
                return e;
              };
        return n.d(t, "a", t), t;
      }),
      (n.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }),
      (n.p = ""),
      n((n.s = 0))
    );
  })([
    function (e, t, n) {
      "use strict";
      Object.defineProperty(t, "__esModule", { value: !0 }),
        (t.default = void 0);
      var o = (function (e) {
        if (e && e.__esModule) return e;
        var t = {};
        if (null != e)
          for (var n in e)
            if (Object.prototype.hasOwnProperty.call(e, n)) {
              var o =
                Object.defineProperty && Object.getOwnPropertyDescriptor
                  ? Object.getOwnPropertyDescriptor(e, n)
                  : {};
              o.get || o.set ? Object.defineProperty(t, n, o) : (t[n] = e[n]);
            }
        return (t.default = e), t;
      })(n(1));
      var r = o.default;
      (t.default = r),
        o.IS_BROWSER &&
          (function (e) {
            e.Darkmode = o.default;
          })(window),
        (e.exports = t.default);
    },
    function (e, t, n) {
      "use strict";
      function o(e, t) {
        for (var n = 0; n < t.length; n++) {
          var o = t[n];
          (o.enumerable = o.enumerable || !1),
            (o.configurable = !0),
            "value" in o && (o.writable = !0),
            Object.defineProperty(e, o.key, o);
        }
      }
      Object.defineProperty(t, "__esModule", { value: !0 }),
        (t.default = t.IS_BROWSER = void 0);
      var r = "undefined" != typeof window;
      t.IS_BROWSER = r;
      var a = (function () {
        function e(t) {
          if (
            ((function (e, t) {
              if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function");
            })(this, e),
            r)
          ) {
            t = Object.assign(
              {},
              {
                bottom: "32px",
                right: "32px",
                left: "unset",
                time: "0.3s",
                mixColor: "#fff",
                backgroundColor: "#fff",
                buttonColorDark: "#100f2c",
                buttonColorLight: "#fff",
                label: "",
                saveInCookies: !0,
                autoMatchOsTheme: !0,
              },
              t
            );
            var n = "\n      .darkmode-layer {\n        position: fixed;\n        pointer-events: none;\n        background: "
                .concat(t.mixColor, ";\n        transition: all ")
                .concat(
                  t.time,
                  " ease;\n        mix-blend-mode: difference;\n      }\n\n      .darkmode-layer--button {\n        width: 2.9rem;\n        height: 2.9rem;\n        border-radius: 50%;\n        right: "
                )
                .concat(t.right, ";\n        bottom: ")
                .concat(t.bottom, ";\n        left: ")
                .concat(
                  t.left,
                  ";\n      }\n\n      .darkmode-layer--simple {\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        transform: scale(1) !important;\n      }\n\n      .darkmode-layer--expanded {\n        transform: scale(100);\n        border-radius: 0;\n      }\n\n      .darkmode-layer--no-transition {\n        transition: none;\n      }\n\n      .darkmode-toggle {\n        background: "
                )
                .concat(
                  t.buttonColorDark,
                  ";\n        width: 3rem;\n        height: 3rem;\n        position: fixed;\n        border-radius: 50%;\n        border:none;\n        right: "
                )
                .concat(t.right, ";\n        bottom: ")
                .concat(t.bottom, ";\n        left: ")
                .concat(
                  t.left,
                  ";\n        cursor: pointer;\n        transition: all 0.5s ease;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .darkmode-toggle--white {\n        background: "
                )
                .concat(
                  t.buttonColorLight,
                  ";\n      }\n\n      .darkmode-toggle--inactive {\n        display: none;\n      }\n\n      .darkmode-background {\n        background: "
                )
                .concat(
                  t.backgroundColor,
                  ";\n        position: fixed;\n        pointer-events: none;\n        z-index: -10;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n      }\n\n      img, .darkmode-ignore {\n        isolation: isolate;\n        display: inline-block;\n      }\n\n      @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n        .darkmode-toggle {display: none !important}\n      }\n\n      @supports (-ms-ime-align:auto), (-ms-accelerator:true) {\n        .darkmode-toggle {display: none !important}\n      }\n    "
                ),
              o = document.createElement("div"),
              a = document.createElement("button"),
              i = document.createElement("div");
            (a.innerHTML = t.label),
              a.classList.add("darkmode-toggle--inactive"),
              o.classList.add("darkmode-layer"),
              i.classList.add("darkmode-background");
            var d = "true" === window.localStorage.getItem("darkmode"),
              s =
                t.autoMatchOsTheme &&
                window.matchMedia("(prefers-color-scheme: dark)").matches,
              l = null === window.localStorage.getItem("darkmode");
            ((!0 === d && t.saveInCookies) || (l && s)) &&
              (o.classList.add(
                "darkmode-layer--expanded",
                "darkmode-layer--simple",
                "darkmode-layer--no-transition"
              ),
              a.classList.add("darkmode-toggle--white"),
              document.body.classList.add("darkmode--activated")),
              document.body.insertBefore(a, document.body.firstChild),
              document.body.insertBefore(o, document.body.firstChild),
              document.body.insertBefore(i, document.body.firstChild),
              this.addStyle(n),
              (this.button = a),
              (this.layer = o),
              (this.saveInCookies = t.saveInCookies),
              (this.time = t.time);
          }
        }
        var t, n, a;
        return (
          (t = e),
          (n = [
            {
              key: "addStyle",
              value: function (e) {
                var t = document.createElement("link");
                t.setAttribute("rel", "stylesheet"),
                  t.setAttribute("type", "text/css"),
                  t.setAttribute(
                    "href",
                    "data:text/css;charset=UTF-8," + encodeURIComponent(e)
                  ),
                  document.head.appendChild(t);
              },
            },
            {
              key: "showWidget",
              value: function () {
                var e = this;
                if (r) {
                  var t = this.button,
                    n = this.layer,
                    o = 1e3 * parseFloat(this.time);
                  t.classList.add("darkmode-toggle"),
                    t.classList.remove("darkmode-toggle--inactive"),
                    t.setAttribute("aria-label", "Activate dark mode"),
                    t.setAttribute("aria-checked", "false"),
                    t.setAttribute("role", "checkbox"),
                    n.classList.add("darkmode-layer--button"),
                    t.addEventListener("click", function () {
                      var r = e.isActivated();
                      r
                        ? (n.classList.remove("darkmode-layer--simple"),
                          t.setAttribute("disabled", !0),
                          setTimeout(function () {
                            n.classList.remove("darkmode-layer--no-transition"),
                              n.classList.remove("darkmode-layer--expanded"),
                              t.removeAttribute("disabled");
                          }, 1))
                        : (n.classList.add("darkmode-layer--expanded"),
                          t.setAttribute("disabled", !0),
                          setTimeout(function () {
                            n.classList.add("darkmode-layer--no-transition"),
                              n.classList.add("darkmode-layer--simple"),
                              t.removeAttribute("disabled");
                          }, o)),
                        t.classList.toggle("darkmode-toggle--white"),
                        document.body.classList.toggle("darkmode--activated"),
                        window.localStorage.setItem("darkmode", !r);
                    });
                }
              },
            },
            {
              key: "toggle",
              value: function () {
                if (r) {
                  var e = this.layer,
                    t = this.isActivated(),
                    n = this.button;
                  e.classList.toggle("darkmode-layer--simple"),
                    document.body.classList.toggle("darkmode--activated"),
                    window.localStorage.setItem("darkmode", !t),
                    n.setAttribute("aria-label", "De-activate dark mode"),
                    n.setAttribute("aria-checked", "true");
                }
              },
            },
            {
              key: "isActivated",
              value: function () {
                return r
                  ? document.body.classList.contains("darkmode--activated")
                  : null;
              },
            },
          ]) && o(t.prototype, n),
          a && o(t, a),
          e
        );
      })();
      t.default = a;
    },
  ]);
});
```

{% endfold  %}

很容易找到 116 行开始的参数以及样式配置。其中有许多属性并不认识，全文就出现两次 mixColor，一次是参数赋值，另一次是 t.mixColor，于是猜测与 t 有关，同时搜索与 mix 有关词眼，发现了就出现三次，两次为 mixColor，还有一次 mix-blend-mode，我见其写法像 css 属性，于是搜索了解到[该属性](https://developer.mozilla.org/zh-CN/docs/Web/CSS/mix-blend-mode)描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合。我在 PS 中见过以差值方式混合颜色，故而也大概明白了页面出现怪异颜色的原因。

接着我想到能否不用这么高深的方法实现深色，简单点用 css 换颜色就行了。于是我尝试删去 mix 有关语句，经过数次试验后，预览终于不报错。接着再想如何利用深色模式下的选择器实现点击按钮换颜色。仔细浏览官方说明，发现这一条关于覆盖样式的说明：[Override style](https://github.com/sandoche/Darkmode.js#override-style)。其中讲到：

{% note info no-icon %}
* A CSS class darkmode--activated is added to the body tag when the darkmode is activated. You can take advantage of it to override the style and have a custom style

* Use the class darkmode-ignore where you don't want to apply darkmode

* You can also add this style: isolation: isolate; in your CSS, this will also ignore the darkmode.

* It is also possible to revert the Dark Mode with this style mix-blend-mode: difference;

{% endnote %}

第一句话很明显告知我们该如何自定义样式，于是解决问题。

深入浏览官方文档发现很多问题都豁然开朗，官方文档算是最权威的教程！

以及接下来适配各种元素的样式，更是让我对 F12 更加熟练，对各种属性也更加清晰。

上述经历是一种成长，在此叙述以留念🙃。



<img alt="method1" class="gifplayer" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/dark-one/an-one.png" >]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>探索“亮/暗”主题实现</title>
    <url>/009/</url>
    <content><![CDATA[
{% note success %}
尝试为博客添加一个切换亮暗主题的功能。
{% endnote %}

<!--more-->

## 版本信息

{% tabs version %}
<!-- tab Next -->

<strong><div align="center">version：8.2.1</div></strong>

<!-- endtab -->

<!-- tab Hexo-->
<strong><div align="center">hexo: 5.3.0
hexo-cli: 3.1.0</div></strong>
<!-- endtab -->

{% endtabs %}

---

## 方法一

1. ### 概述
	简单的添加一个button按钮，并为按钮以及黑暗模式设计样式，最后加入为按钮的 onclick 事件而设计的 js 代码。
	
2. ### 添加 button
	button 的位置取决于存在哪个元素对应的 njk 文件中，这里我将 button 放在 sidebar 中。故而先前往 _config.yml 取消 custom_file_path 关于 sidebar.njk 的注释，然后在`站点根目录/source/_data`下建立文件 sidebar.njk（已有sidebar.njk 的可忽略此步）。在其中加入：

   ```
   <a id="theme_change"
           type="button"
           onclick="theme_change()"
   >
      🌞
   </a>
   ```

3. ### 设计样式

   同理取消关于 styles.styl 的注释并建立此文件，并在该文件中加入关于主题切换 button 的样式。

   {% note info %}

   styles.styl 中能加入博客所有元素的样式设计代码。为了方便管理，我这利用 @import 引入绝对路径下的样式代码。

   {% endnote %}

   此处的 button 属于自定义内容，故而我在 _data 下创建文件夹 custom，并在其中建立 dark-theme.styl，然后在 styles.styl 文件中加入：

   ```stylus
   /*自定义主题样式设置*/
   @import "custom/dark-theme";
   ```

   最后在 dark-theme.styl 中加入：

   ```stylus
   // 黑暗主题样式
   body.dark-theme {
       background: #282c34		/* 设置黑暗主题背景颜色 */
   }
   ```

   这里我添加的 button 属于超链接（`<a></a>`），若利用`<button></button>`，还能在 dark-theme.styl 中设计 button 元素的样式，详情见[此文](http://pygo2.top/articles/41680/)。
   
4. ### 添加 JS

   由`onclick="theme_change()"`可知当我们点击 🌞 这个 button 时，会执行`theme_change()` 这个函数。所以设计并添加 `theme_change()`：建立`source/js/theme_change.js`文件，在 theme_change.js 中设计`theme_change()`，最后引入 theme_change.js 。具体如下：

   ```javascript
   // source/js/theme_change.js
   // 主题切换功能
   function theme_change() {
       // 切换字内容
       var button = document.getElementById('theme_change');
       var pattern = new RegExp('🌞', 'i');
       if (pattern.test(button.innerHTML)){
           button.innerHTML = "🌙";
       } else{
           button.innerHTML = "🌞";
       }	
       // 切换主题
       document.body.classList.toggle('dark-theme');
   	setCookie("inner",button.innerHTML,1)
   };
   ```

   同前所述，取消 footer.njk 的注释，并建立`source/_data/footer.njk`（此文件以及 body-end.njk 均被我用作引入 js）。footer.njk 中加入：

   ```nginx
   {# 自定义黑暗主题切换 #}
   <script type="text/javascript" src="/js/theme_change.js"></script>
   ```

   至此已完成，效果如下：

   <img alt="method1" class="gifplayer" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/try-light-dark-themes/method1.png" >
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试加密功能</title>
    <url>/008/</url>
    <content><![CDATA[
测试插件 hexo-blog-encrypt。
<!--more-->

```c
npm install --save hexo-blog-encrypt
```

```yaml
# 文章加密功能
encrypt:
    enable: true
```

```yaml
password: 博客密码
abstract: home 主页显示的文字提示
message: 查看博客，密码输入框上面的描述性文字
```

[hexo-blog-encrypt 资料](https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md)。


{% fold 点击显/隐内容 %}
```nginx
{% fold 点击显/隐内容 %}
something you want to fold, include code block.
{% endfold %}
```
{% endfold %}]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>记录 tags 用法</title>
    <url>/7/</url>
    <content><![CDATA[
{% cq %}Next主题使用的内置tag，官方都已经写好js

我们只要根据官方教程调用，就可以实现多样式、多功能的效果。{% endcq %}
<!--more-->

## 设置

```yaml
# 配置文件
# ---------------------------------------------------------------
# Tags Settings
# See: https://theme-next.js.org/docs/tag-plugins/
# ---------------------------------------------------------------

# Note tag (bootstrap callout)
note:
  # Note tag style values:
  #  - simple    bootstrap callout old alert style. Default.
  #  - modern    bootstrap callout new (v2-v3) alert style.
  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.
  #  - disabled  disable all CSS styles import of note tag.
  style: flat
  icons: false
  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).
  # Offset also applied to label tag variables. This option can work with disabled note tag.
  light_bg_offset: 0

# Tabs tag
tabs:
  transition:
  tabs: false
  labels: true

# PDF tag
# NexT will try to load pdf files natively, if failed, pdf.js will be used.
# So, you have to install the dependency of pdf.js if you want to use pdf tag and make it available to all browsers.
# Dependencies: https://github.com/next-theme/theme-next-pdf
pdf:
  enable: false
  # Default height
  height: 500px

# Mermaid tag
mermaid:
  enable: false
  # Available themes: default | dark | forest | neutral
  theme: forest
```

## 使用

看[官方文档](https://theme-next.js.org/docs/tag-plugins/)。

1. ### [Note](https://theme-next.js.org/docs/tag-plugins/note.html)

    #### 配置

    ```
    note:
      # Note tag style values:
      #  - simple    bs-callout old alert style. Default.
      #  - modern    bs-callout new (v2-v3) alert style.
      #  - flat      flat callout style with background, like on Mozilla or StackOverflow.
      #  - disabled  disable all CSS styles import of note tag.
      style: modern
      icons: true
      # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).
      # Offset also applied to label tag variables. This option can work with disabled note tag.
      light_bg_offset: 0
    ```

    #### 用法

    ```nginx
    {% note default %}
    ##### Default Header
    Welcome to [Hexo!](https://hexo.io)
    {% endnote %}
    ```

    {% note default %}
    ##### Default Header
    Welcome to [Hexo!](https://hexo.io)
    {% endnote %}

    ```nginx
    {% note primary %}
    ##### Primary Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}
    ```

    {% note primary %}
    ##### Primary Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}

    ```nginx
    {% note info %}
    ##### Info Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}
    ```
    {% note info %}
    ##### Info Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}

    ```nginx
    {% note success %}
    ##### Success Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}
    ```

    {% note success %}
    ##### Success Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}

    ```nginx
    {% note warning %}
    ##### Warning Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}
    ```

    {% note warning %}
    ##### Warning Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}

2. ### [Tabs](https://theme-next.js.org/docs/tag-plugins/tabs.html)

    #### 配置

    ```yaml
    tabs:
      transition:
        tabs: false
        labels: true
    ```

    #### 用法

    ```nginx
    {% tabs Unique name, [index] %}
    <!-- tab [Tab caption] [@icon] -->
    Any content (support inline tags too).
    <!-- endtab -->
    {% endtabs %}
    ```

    ```nginx
    {% tabs First unique name %}
    <!-- tab -->
    **This is Tab 1.**
    <!-- endtab -->

    <!-- tab -->
    **This is Tab 2.**
    <!-- endtab -->

    <!-- tab -->
    **This is Tab 3.**
    <!-- endtab -->
    {% endtabs %}
    ```

    {% tabs First unique name %}
    <!-- tab -->
    **This is Tab 1.**
    <!-- endtab -->

    <!-- tab -->
    **This is Tab 2.**
    <!-- endtab -->

    <!-- tab -->
    **This is Tab 3.**
    <!-- endtab -->
    {% endtabs %}

    可以嵌套使用

3. ### [Mermaid](https://theme-next.js.org/docs/tag-plugins/mermaid.html)

    #### 配置

    ```yaml
    # Mermaid tag
    mermaid:
      enable: true
      # Available themes: default | dark | forest | neutral
      theme: forest
    ```

    #### 使用

    ```nginx
    {% mermaid type %}
    {% endmermaid %}
    ```

    ```nginx
    {% mermaid graph TD %}
    A[Hard] -->|Text| B(Round)
    B --> C{Decision}
    C -->|One| D[Result 1]
    C -->|Two| E[Result 2]
    {% endmermaid %}
    ```

    ```nginx
    {% mermaid graph TD %}
    A[Christmas] -->|Get money| B(Go shopping)
    B --> C{Let me thinksssss<br/>ssssssssssssssssssssss}
    C -->|One| D[Laptop]
    C -->|Two| E[iPhone]
C -->|Three| F[Car]
    {% endmermaid %}
    ```
    
    <p class='div-border red'>有错误，不用</p>
    
4. ### cq && centerquote

    ```nginx
    {% cq %}
    **文本居中**
    引用样式
    cq 与 centerquote 等价
    {% endcq %}
    ```

    {% centerquote %}
    **文本居中**
    引用样式
    cq与centerquote等价
    {% endcenterquote %}

5. ### [Label](https://theme-next.js.org/docs/tag-plugins/label.html)

    ```nginx
    # 内置label标签。
    {% label default@default %}
    {% label primary@primary %}
    {% label success@success %}
    {% label info@info %}
    {% label warning@warning %}
    {% label danger@danger %}
    ```


    <div align="center">
    {% label default@default %}
    {% label primary@primary %}
    {% label success@success %}
    {% label info@info %}
    {% label warning@warning %}
    {% label danger@danger %}
    </div>

6. ### [button && btn](https://theme-next.js.org/docs/tag-plugins/button.html)

    **内置button**标签。btn与button等价。

    ```
    {% btn https://www.baidu.com, 百度首页, download fa-lg fa-fw %}
    ```

    <div align="center">{% btn https://www.baidu.com, 百度首页, download fa-lg fa-fw %}</div>

## 参考文章

* [Next主题优化-内置tags篇](http://pygo2.top/articles/25933/)

* [Tag Plugins](https://theme-next.js.org/docs/tag-plugins/)]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 bash 脚本提高效率-git push</title>
    <url>/6/</url>
    <content><![CDATA[
{% cq %}每次提交都要输重复命令

遂想能否通过脚本来自动执行，省的手动重复输入这三个命令

上网查询，发现可以通过 bash 命令。{% endcq %}
<!--more-->

## 概述

利用 git 命令更新代码仓库，普遍三个命令：

```c
git add .
git commit -m "message"
git push origin main
```

每次提交都要输一遍这三行，于是想到能否通过脚本来自动执行这三个，省的手动重复输入这三个命令。上网查询，发现可以通过 bash 命令。

## 实现

根据网上教程，编写出以下代码：

```bash
# 命名：git_WillCAI2020.bat
@echo off
echo "Introduction: Update the remote repository, written by ruchan"
echo "Steps:"

::注意修改为你自己的仓库地址
echo "1. Move to working directory" 
cd D:\Github\WillCAI2020\blog

echo "2. Display the status of the working directory and staging area" 
git status

echo "3. Start submitting code to the local repository"
git add .
 
echo "4. Commit the changes to the local repository"
set /p message=请输入提交信息：
echo %message%
git commit -m "%message%"
 
echo "5. Push the changes to the remote git server"
git push origin main
 
echo "You have successfully submitted!"
pause
```

步骤如代码中注释，通俗易懂。

注意修改仓库路径，命名以 bat 结尾，存放位置任意。

执行代码时，还能手动输入待提交信息（利于帮助管理代码）。

使用时双击运行即可。

## 扩展

还想到能否通过 bash 来执行：

```c
hexo clean && hexo g && hexo s
```

然后直接把相关命令通过 dos 运行，这是发现结果并不如愿。

于是发现应该先通过 bash 命令启动 git-bash，然后在 Git 中执行 `hexo clean && hexo g && hexo s`。

得到：

```bash
@echo off

echo "Introduction: Preview your hexo site locally, written by ruchan"
echo "Steps:"

start C:\环境\Git\git-bash.exe --cd=D:\Github\WillCAI2020\blog -c "hexo clean && hexo g && hexo s"
```

虽然发现能行，但速度不大满意，还是手动输吧。

## 参考

* [Windows 下bat脚本git提交代码到github](https://blog.csdn.net/Ep_Little_prince/article/details/108895103)
* [.bat脚本基本命令语法](https://www.cnblogs.com/iTlijun/p/6137027.html)
* [.Bat之批处理实现手动输入变量参数](https://blog.csdn.net/laozhuxinlu/article/details/52853787)
* [bat 批处理教程](https://www.w3cschool.cn/dosmlxxsc1/wvqyr9.html)

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>git</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>提示：Your branch is up to date  ...</title>
    <url>/5/</url>
    <content><![CDATA[
{% cq %}解决提示：
“On branch main
Your branch is up to date with 'origin/main'.”
不能上传代码的问题。{% endcq %}
<!--more-->
## 记录

执行 git status 发现提示：

```c
On branch main
Your branch is up to date with 'origin/main'.
```

直接 `git add .`、`git commit -m "修改"`，`git push origin main`，发现无法提交。

于是搜索，根据这篇文章： [git commit提示Your branch is up-to-date with 'origin/master'.](https://www.jianshu.com/p/e25c763b9816)，认为是版本分支的原因（不大懂）。

1. ### 新建分支

    ```c
    git branch newbranch
    //查看是否是否创建成功
    git branch 
    //若结果中有 newbranch，即成功
    ```

2. ### 切换新分支并提交改动

    ```c
    git checkout newbranch
        git add . 
    git commit -m "改动"
    ```

3. ### 切换主分支并合并改动

    ```c
    git checkout master
    git merge newbranch 
    ```

4. ### 提交代码

    ```c
    git push -u origin master
    ```

5. ### 删除新分支

    ```c
    git branch -D newbranch
    ```


## 后记

完成上述流程后，已能提交代码，但是仍会提示：

```
On branch main
Your branch is up to date with 'origin/main'.
```

根据[此文](https://blog.csdn.net/S_o_l_o_n/article/details/108130341)，暂不理会。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>实现 Github Actions 持续部署</title>
    <url>/4/</url>
    <content><![CDATA[
{% cq %}完整实现 Github Actions 持续部署！{% endcq %}
<!--more-->

## 更新

浏览 Docker 方法，发现它模拟的是本地生成 SSH 密钥，然后通过密钥连接并推送代码到远程仓库。我也尝试把 `entrypoint.sh`中的命令化为一个个步骤，直接放在 jobs 中，而不是放在 Docker 容器中，但是发现我不会 linux，所以后面再说。

最终选择仍以 token 为路径，来提交代码。

## 实现

代码如下：

```
# 文件路径 .github/workflows/deployment.yml
name: Deployment

on:
  push:
    branches: [main] # only push events on source branch trigger deployment

jobs:
  hexo-deployment:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai

    steps:
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        
    - name: Install dependencies & Generate static files
      run: |
        node -v
        npm i -g hexo-cli
        npm i
        hexo clean
        hexo g        
    - name: Deploy to Github Pages
      env:
        GIT_NAME: WillCAI2020
        GIT_EMAIL: ${{ secrets.GIT_EMAIL_BLOG }}
        REPO: github.com/WillCAI2020/WillCAI2020.github.io
        GH_TOKEN: ${{ secrets.GH_TOKEN_BLOG }}
      run: |
        cd ./public && git init && git checkout -b main && git add .
        git config --global user.name $GIT_NAME
        git config --global user.email $GIT_EMAIL
        git commit -m "GitHub Actions Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"
        git push --force --quiet "https://$GH_TOKEN@$REPO" main:main

```

## 注意

变量命名以及步骤解释在此文均有讲解，这里不再赘述。

1. ### 分支

    2020年10月份开始 GitHub 把默认的 master 分支换成了 main 分支。为了方便，我在远程仓库的分支也设为了 main 分支。这里注意：本地 `git init`后默认仍为 master 分支，此时应将新建 main 分支，并切换到 main 分支。

    ```c
    //新建 main 分支，并切换到 main 分支
    git checkout -b main
    ```

2. ### 仓库

    我的源码放在了仓库 blog 中，但是为使用 gh-pages，生成的 public 静态文件必须放在 username.github.io 的仓库中。

    故而添加的 Secrets 变量均在 bolg 仓库中。


## 错误总结

原本我的仓库均只有 main 分支，而 jobs 代码并未加上 `git checkout -b main`，导致报错 `error: failed to push some refs to`，根据[此文](https://www.jianshu.com/p/c6f2e1ca2999)，同时浏览了 [Git push 讲解](https://www.yiibai.com/git/git_push.html)，然后从“分支名不完整、没有提交代码、本地与远程产生冲突”入手。

经过一番苦思，突然想到把远程那虚拟主机当成自己的电脑，直接 `git init`，然后 `git add .`，提交的不就是本地的 master 分支吗，但是我 `git push`指明本地的是 main 分支，而 main 分支不存在当然会报错，于是加上 `git checkout -b main`，解决问题。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>记录</title>
    <url>/2/</url>
    <content><![CDATA[
{% cq %}随手记。{% endcq %}

<!--more-->

```
hexo init
git init
由于使用SSH多账号，故而添加远程地址时要注意
为Github Actions 做准备
由于想在blog仓库放源码（要部署的文件一定得放在username.github.io仓库中），故而新生成一个SSH密钥，公钥作为username.github.io的Deploy KEY，私钥作为blog的变量
```

```css
html,body {
	margin: 0;
	padding:0;
	height: 100%;
}

.main{
	min-height:100%;
	height: auto !important;
	height: 100%; /*IE6不识别min-height*/
	position: relative;
}

.main-inner{
	margin: 0 auto;
	padding-bottom: 80px;
}
	
.footer{
	position: absolute;
	bottom: 0;
	width: 100%;
	height: 60px;
	clear: both;
}
```

```
git clone https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas_ribbon
```

```
git submodule add --depth 1 https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas_ribbon
```

```
git rm -r --cached source/lib/canvas_ribbon
```

```
git submodule add --depth 1 https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest
```

```
git rm -r --cached source/lib/canvas-nest
```

```
git rm -r --cached _config.landscape.yml
```

```
npm install hexo-generator-searchdb --save
```

```
https://github.com/WillCAI2020/blog/edit/main/source/
```

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.gif" data-src="https://s3.ax1x.com/2021/02/09/yaffns.png"  alt="彩色标签页">

```
a7ee87d5b4b364c71deb97c0a88976b982c41c01
```

```
git rm -r --cached actions
```

```
52a73c0d7f6af17588b4941829cd0ef8da372875
```

```
html是由很多元素组成的，而每个元素的样式由css控制，css有很多属性，比如这个background，还有这个设置透明度的，设置内边距(padding)，外边距(margin)的。
我们要充分利用浏览器的开发者工具，谷歌浏览器是F12，Edge也是，你看，我用这个选中我想修改的元素，而元素的样式可以通过一个又一个的类来控制，你看这个post-block类，（class就是类的意思：class="post-block"），在css，我们通过 .post-block来为类设置属性，你看我改变它的background
```

```c
git submodule add --depth 1 https://github.com/theme-next/theme-next-pace source/lib/pace
```

![加载进度条](https://s3.ax1x.com/2021/02/09/ydzxJS.png)

```
git submodule add --depth 1 https://github.com/stevenjoezhang/live2d-widget.git source/lib/live2d-widget
```

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.gif" data-src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/try-light-dark-themes/method1.png" alt="test1">

<hr>

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.gif" data-src="https://i.loli.net/2021/02/16/x39c4XnuqQeCgt7.jpg" alt="test2">

<hr>

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.gif" data-src="https://i.loli.net/2021/02/16/ze5hlG1NIERATts.jpg" alt="test3">



```html
<div class='tip'><p>默认情况<p></div>
<div class='tip success'><p>success<p></div>
<div class='tip error'><p>error<p></div>
<div class='tip warning'><p>warning<p></div>
```

<div class='tip'><p>默认情况<p></div>
<div class='tip success'><p>success<p></div>
<div class='tip error'><p>error<p></div>
<div class='tip warning'><p>warning<p></div>

```
<a href="https://willcai2020.github.io/" class="LinkCard">欢迎来到——我的小站</a>
```

<a href="https://willcai2020.github.io/" class="LinkCard">欢迎来到——我的小站</a>

```
/* note语法示例 */
<p class='div-border green'>绿色</p>
<p class='div-border red'>红色</p>
<p class='div-border yellow'>黄色</p>
<p class='div-border grey'>灰色</p>
<p class='div-border blue'>蓝色</p>

/* 小tag标签语法示例 */
<span class="inline-tag red">红色小标签</span>
<span class="inline-tag green">绿色小标签</span>
<span class="inline-tag blue">蓝色小标签</span>
<span class="inline-tag yellow">黄色小标签</span>
<span class="inline-tag grey">灰色小标签</span>
```
/* note语法示例 */
<p class='div-border green'>绿色</p>
<p class='div-border red'>红色</p>
<p class='div-border yellow'>黄色</p>
<p class='div-border grey'>灰色</p>
<p class='div-border blue'>蓝色</p>

/* 小tag标签语法示例 */
<span class="inline-tag red">红色小标签</span>
<span class="inline-tag green">绿色小标签</span>
<span class="inline-tag blue">蓝色小标签</span>
<span class="inline-tag yellow">黄色小标签</span>
<span class="inline-tag grey">灰色小标签</span>

试验pangu，此行中英文间未加空格。

来tryagain，这是pangu，能给文章中English添加space。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
