<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/1/</url>
    <content><![CDATA[Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).

<!--more-->
## Quick Start

### Create a new post

``` bash
$ hexo new "My New Post"
```

More info: [Writing](https://hexo.io/docs/writing.html)

### Run server

``` bash
$ hexo server
```

More info: [Server](https://hexo.io/docs/server.html)

### Generate static files

``` bash
$ hexo generate
```

More info: [Generating](https://hexo.io/docs/generating.html)

### Deploy to remote sites

``` bash
$ hexo deploy
```

More info: [Deployment](https://hexo.io/docs/one-command-deployment.html)]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
      </tags>
  </entry>
  <entry>
    <title>记录探索 Github Actions</title>
    <url>/3/</url>
    <content><![CDATA[
{% cq %}在实践中成长与学习，在学习后巩固与整理。{% endcq %}
<!--more-->

## 概述

对于通过 Github Actions 部署博客，大概已经摸清原理。利用 Github Actions 提供的环境（我愿称其为虚拟主机），环境一般配置为 ubuntu-latest （我对 Linux 并不是很熟）。之前写过一篇文章，也是借鉴别人的代码，然后整理，并结合一下自己的理解完成 Github Actions 的 jobs。

那篇文章得到的结果是源码以及生成的静态文件均放在同一个代码仓库，只不过分属两个分支而已，并不如我所愿。

## 方法一

1. ### 代码

    ```yaml
    # 文件路径 .github/workflows/deployment.yml
    name: Deployment

    on:
      push:
        branches: [master] # only push events on source branch trigger deployment

    jobs:
      hexo-deployment:
        runs-on: ubuntu-latest
        env:
          TZ: Asia/Shanghai

        steps:
        - name: Checkout source
          uses: actions/checkout@v2
          with:
            submodules: true

        - name: Setup Node.js
          uses: actions/setup-node@v1
          with:
            node-version: '12.x'

        - name: Install dependencies & Generate static files
          run: |
            node -v
            npm i -g hexo-cli
            npm i
            hexo clean
            hexo g        
        - name: Deploy to Github Pages
          env:
            GIT_NAME: WillCAI2020
            GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
            REPO: github.com/WillCAI2020/WillCAI2020.github.io
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
          run: |
            cd ./public && git init && git add .
            git config --global user.name $GIT_NAME
            git config --global user.email $GIT_EMAIL
            git commit -m "Site deployed by GitHub Actions"
            git push --force --quiet "https://$GH_TOKEN@$REPO" master:master
    ```
2. ### 流程

    一个 Github Actions 可以有很多 jobs ，上述代码就一个`job：hexo-deployment`，并且设置它工作在 ubuntu-latest 上，一个 job 还能分为许多 steps，你可以为每个 step 设置name、uses（使用什么，可以选择自己写的 actions，也可以调用[官网提供](https://github.com/actions)的，比如`actions/checkout@v2`）、with（uses 的伴随参数）、env（run 所调用的参数）、run（在虚拟主机上调用的命令）。

    从`secrets.GH_TOKEN`与`secrets.GIT_EMAIL`可以看出，需要设置仓库的变量有`GH_TOKEN`与`GIT_EMAIL`。`GIT_NAME、GIT_EMAIL、GH_TOKEN、REPO`是 `step:Deploy to Github Pages`调用命令所需的的`env`变量。顺序执行，很容易看出：

    * 配置依赖环境（貌似不用装 Git）
      * 先调用官网提供的 actions 配置了版本为 `12.x 的 nodejs`
      * 然后 `node -v`观察是否成功配置
      * 再 `npm i -g hexo-cli`装好 hexo
      * 再`npm i`装好依赖的包
      * 然后就到熟悉的 `hexo clean`与`hexo generate`
    * 接下来把虚拟主机上本地仓库根目录中的 public 文件夹 （`hexo generate`生成的静态文件）提交到远程仓库
      * 进入 public 文件夹 同时将此文件夹初始化为一个 Git 仓库，并本地提交（`cd ./public && git init && git add .`）
      * 确定全局信息
        * `git config --global user.name $GIT_NAM`
        * `git config --global user.email $GIT_EMAIL`
      * 提交信息（`git commit -m "Site deployed by GitHub Actions"`）
      * 上传（`git push --force --quiet "https://$GH_TOKEN@$REPO" master:master`）
        * `master:master`前一个 master 指的是虚拟主机上本地分支，后一个 master 则为远程仓库分支。
3. ### GH_TOKEN

    [获取](https://github.com/settings/tokens)。`Generate new token` 来生成，随便你取什么名字，只要内容你正确拷贝到仓库的 Secrets 变量中就行了。这个东西相当于密码，创建的时候可以选择这个密码允许干些什么，我们只需要用这个来提交代码仓库，故而勾选 repo 就够了，并且这个 token 是能作用于该账号的所有仓库。

    然后前往源码所在仓库，添加 Secrets。

    这里取的名字注意要和代码中的相同，代码中调用`secrets.GH_TOKEN`，那这里的就要命名为 GH_TOKEN。

    ![Secrets](https://s3.ax1x.com/2021/02/09/ydi1tP.png)
4. ### GIT_EMAIL

    这个直接添加 Secrets，内容为账号绑定的邮箱。其实这也没必要添加，直接 env 中写明`GIT_EMAIL: 账号邮箱`。
5. ### 最终版

    详情见此文。

## 方法二
1. ### 概述
    通过 Docker 容器，Docker 属于操作系统层虚拟化，现在很热门，我不懂这个。

    我根据 [reuixiy](https://github.com/reuixiy/io-oi.me/) 为 Hugo 基于Docker、通过Arch Linux 完成 Actions 所编写的代码，改成了能实现 Hexo 部署的代码。

    改编后代码如下：

    ```yaml
    # .github/workflows/build.yml
    name: build

    on:
      push:
        branches:
        - main

    jobs:
      build:
        runs-on: ubuntu-latest

        steps:
        - name: 'Checkout codes'
          uses: actions/checkout@v2
          with:
            submodules: true

        - name: 'Building...'
          uses: ./.github/actions/hexo-deploy
          env:
            DEPLOY_REPO: WillCAI2020/WillCAI2020.github.io
            DEPLOY_BRANCH: main
            DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
            # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
            TZ: Asia/Shanghai 
    ```

    ```yaml
    # .github/actions/hexo-deploy/action.yml 
    name: 'hexo-deploy'
    author: 'according-reuixiy'
    description: 'Deploy your Hexo site to GitHub Pages, via GitHub Actions, with Arch Linux.'
    runs:
      using: 'docker'
      image: 'Dockerfile'
    branding:
      icon: 'arrow-up-circle'  
      color: 'yellow' 
    ```

    ```yaml
    # .github/actions/hexo-deploy/Dockerfile 
    FROM archlinux

    RUN pacman -Syu --noconfirm nodejs npm git openssh

    COPY entrypoint.sh /entrypoint.sh

    RUN chmod +x /entrypoint.sh
    ENTRYPOINT ["/entrypoint.sh"]
    ```

    ```sh
    # .github/actions/hexo-deploy/entrypoint.sh 
    #!/bin/bash
    # Required environment variables:
    #
    #   DEPLOY_KEY          SSH private key
    #
    #   DEPLOY_REPO         GitHub Pages repository
    #   DEPLOY_BRANCH       GitHub Pages publishing branch
    #
    #   GITHUB_ACTOR        GitHub username
    #   GITHUB_REPOSITORY   GitHub repository (source code)
    #
    #   TZ                  Timezone
    set -e
    REMOTE_REPO="git@github.com:${DEPLOY_REPO}.git"
    REMOTE_BRANCH="${DEPLOY_BRANCH}"
    git config --global user.name "${GITHUB_ACTOR}"
    git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
    # https://github.com/reuixiy/hugo-theme-meme/issues/27
    git config --global core.quotePath false
    ln -s /usr/share/zoneinfo/${TZ} /etc/localtime
    mkdir /root/.ssh
    ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts && \
    echo "${DEPLOY_KEY}" > /root/.ssh/id_rsa && \
    chmod 400 /root/.ssh/id_rsa
    git clone --recurse-submodules "git@github.com:${GITHUB_REPOSITORY}.git" site && \
    cd site

    node -v
    npm i -g hexo-cli
    npm i
    hexo clean
    hexo g

    pushd public \
    && git init \
    && git remote add origin $REMOTE_REPO \
    && git add -A \
    && git checkout -b $REMOTE_BRANCH \
    && git commit -m "Automated deployment @ $(date '+%Y-%m-%d %H:%M:%S') ${TZ}" \
    && git push -f origin $REMOTE_BRANCH \
    && popd
    rm -rf /root/.ssh
    ```

    使用方法参考[此文](https://io-oi.me/tech/deploy-hugo-to-github-pages-via-github-actions/)即可。

2. ### 说明

    通过这个方法，我接触并浅显地了解了 Docker，明白 Dockerfile 中通过 `FROM archlinux` 能指明操作系统，为了更改 Dockerfile，我搜索并学习了一些 ArchLinux 的指令，比如通过 pacman 来安装包。

    大致阅览了如下文章：

    * [在 Docker 中使用 Archlinux 的折腾记录](https://mogeko.me/2019/063/)
    * [pacman (简体中文)](https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%89%8B%E5%8A%A8%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85_pacman)

3. ### 报错

    突然发现 Github Actions 报错了，原因是 `failed to initialize alpm library`，于是去查询解决方法，普遍答复为以 root 权限运行 `pacman-db-upgrade`即可（是因为 yaourt 更新 pacman 以后，没更新 pacman 资料库的关系），于是我在 Dockerfile 中加上该命令，却报错 `You must have correct permissions to upgrade the database`，我觉得是没有 root 权限，于是找寻如何切换 root 权限，最终不了了之。

    阅览以下文章：

    * [failed to initialize alpm library](https://blog.elleryq.idv.tw/2014/12/failed-to-initialize-alpm-library.html)
    * [Docker 运行时的用户与组管理](https://segmentfault.com/a/1190000016781704)
    * [如何获得docker容器里面的root权限](https://blog.csdn.net/u012763794/article/details/80943472)
    * [Linux系统下 -bash: apt-get: command not found](https://blog.csdn.net/u010741032/article/details/102606888)
    * [Shell echo命令](https://www.runoob.com/linux/linux-shell-echo.html)
    * [Linux mkdir 命令](https://www.runoob.com/linux/linux-comm-mkdir.html)
    * [容器内使用sudo 报bash: sudo: command not found](https://blog.csdn.net/roxxo/article/details/90410259)
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>添加一个悬浮组件（next 主题）</title>
    <url>/11/</url>
    <content><![CDATA[
<p class='div-border green'>为博客添加一个悬浮组件，内置功能：回到顶端、实现深色模式、跳转评论区、播放背景音乐。</p>

<!--more-->

{% note primary  no-icon%}

本文所用代码大部分来源于此文：[hexo（sakura）给博客增添侧边栏（回到顶部，跳转评论，深色模式，播放音乐）](https://blog.csdn.net/cungudafa/article/details/106500877),以及[大佬Sanarous](https://bestzuo.cn/)的网站源码，我只是基于这些代码，结合我自己的喜好，就 next 主题做出些简陋的改变。

{% endnote %}

下面先给出实际操作。

## 操作

很简单，把如下代码放入`根目录/source/_data/body-end.njk`文件中即可。（body-end.njk 内的代码经 next 主题的注入功能后会添加至静态网页 `</body>`标签上方）

{% fold 点击显/隐代码 %}

```html
{# 添加小组件 #}
<div id="RightDownBtn">
    <a id="btn" href="javascript:void(0)" target="_self" style="" title="回到顶部">
        <svg style=" width: 1.5em;height: 1.5em;" class="icon" aria-hidden="true">
            <use xlink:href="#icon-xuanfufanhuidingbu">
                <svg id="icon-xuanfufanhuidingbu" viewBox="0 0 1024 1024">
                    <path d="M0 512c0 282.624 229.376 512 512 512s512-229.376 512-512S794.624 0 512 0 0 229.376 0 512z"
                        fill="#1989FA"></path>
                    <path
                        d="M736.768 263.68H287.232c-12.288 0-23.04 10.752-23.04 23.04s10.752 23.04 23.04 23.04H737.28c12.288 0 23.04-10.752 23.04-23.04s-10.752-23.04-23.552-23.04m-207.872 105.472c-1.536-1.536-4.608-4.608-7.68-4.608-3.072-1.536-6.144-1.536-7.68-1.536-3.072 0-6.144 0-7.68 1.536-3.072 1.536-4.608 3.072-7.68 4.608l-186.368 186.368c-9.216 9.216-9.216 23.04 0 32.768 9.216 9.216 23.04 9.216 32.768 0l145.92-145.92V737.28c0 12.288 10.752 23.04 23.04 23.04s23.04-10.752 23.04-23.04V442.368l145.92 145.92c4.608 4.608 10.752 6.144 16.896 6.144 6.144 0 12.288-1.536 16.896-6.144 9.216-9.216 9.216-23.04 0-32.768l-187.392-186.368z"
                        fill="#FFFFFF"></path>
                </svg>
            </use>
        </svg>
    </a>
    <a onclick="scrollToComment()" target="_self" title="转至评论区">
		<svg style=" width: 1.5em;height: 1.5em;" class="icon" aria-hidden="true">
			<use xlink:href="#icon-ketangtaolun">
				<svg t=1592151989892 id=icon-ketangtaolun viewBox="0 0 1025 1024" version=1.1
					xmlns="http://www.w3.org/2000/svg" p-id=36645>
					<path d="M512 512m-512 0a512 512 0 1 0 1024 0 512 512 0 1 0-1024 0Z" fill="#FF5A20" p-id=36646></path>
					<path
						d="M238.481236 628.415011V378.631347c1.130243-2.260486 2.260486-3.390728 2.260486-5.651215 12.432671-42.949227 48.600442-72.335541 93.810154-72.33554 122.066225-1.130243 244.13245-1.130243 366.198676 0 45.209713 0 81.377483 28.256071 93.810154 72.33554 1.130243 2.260486 2.260486 4.520971 2.260486 5.651215v252.04415l-3.390728 10.172185c-13.562914 41.818985-47.470199 67.81457-91.549669 67.81457h-66.684327c-102.852097-1.130243-202.313466 19.214128-297.253863 57.642384-4.520971 2.260486-10.172185 3.390728-15.8234 5.651214v-64.423841c-14.693157-6.781457-28.256071-11.302428-39.558499-18.083885-24.865342-11.302428-36.16777-35.037528-44.07947-61.033113z m291.602649-81.377483c20.344371 0 36.16777-16.953642 36.167771-37.298014 0-19.214128-15.8234-32.777042-39.558499-32.777042-19.214128 0-33.907285 14.693157-33.907285 33.907285 1.130243 20.344371 18.083885 37.298013 37.298013 36.167771z m-126.587196 0c18.083885 0 33.907285-15.8234 32.777042-35.037528 0-20.344371-16.953642-36.16777-37.298014-35.037528-18.083885 0-32.777042 16.953642-32.777042 37.298014 2.260486 18.083885 18.083885 32.777042 37.298014 32.777042z m285.951435-33.907285c0-20.344371-15.8234-36.16777-37.298014-35.037528-18.083885 0-32.777042 16.953642-32.777042 36.167771 0 18.083885 16.953642 32.777042 36.167771 32.777042 18.083885 0 33.907285-15.8234 33.907285-33.907285z"
						fill="#FFFFFF" p-id=36647></path>
				</svg>
			</use>
		</svg>
    </a>
	<a onclick="switchNightMode()" title="深色模式">
		<svg style=" width: 1.5em;height: 1.5em;" class="icon" aria-hidden="true">
			<use id="modeicon" xlink:href="#icon-_moon">
			</use>
		</svg>
	</a>
	<svg aria-hidden="true" style="position: absolute; width: 0px; height: 0px; overflow: hidden;">
		<symbol id="icon-sun" viewBox="0 0 1024 1024">
			<path
				d="M511.99976 511.99976m-511.99976 0a511.99976 511.99976 0 1 0 1023.99952 0 511.99976 511.99976 0 1 0-1023.99952 0Z"
				fill="#91D2F2"></path>
			<path
				d="M144.623932 868.455593C237.679889 964.327548 367.831828 1023.99952 511.99976 1023.99952c269.983873 0 490.99977-209.007902 510.455761-474.031778C956.991551 535.703749 887.559584 527.999753 815.623618 527.999753c-309.535855 0-572.895731 142.055933-670.999686 340.45584z"
				fill="#198058"></path>
			<path
				d="M979.623541 575.99973c-351.319835 0-647.791696 155.655927-741.279653 368.639827A509.359761 509.359761 0 0 0 511.99976 1023.99952c260.839878 0 475.967777-195.111909 507.799762-447.31979a1194.34344 1194.34344 0 0 0-40.175981-0.68z"
				fill="#1E9969"></path>
			<path
				d="M69.711967 769.831639C158.503926 921.815568 323.271848 1023.99952 511.99976 1023.99952a509.455761 509.455761 0 0 0 269.631874-76.783964C657.111692 828.375612 464.271782 751.999648 247.623884 751.999648c-61.575971 0-121.183943 6.271997-177.911917 17.831991z"
				fill="#6AA33A"></path>
			<path
				d="M487.887771 1023.39152c-86.543959-122.151943-236.911889-214.679899-417.591804-252.543881 85.11996 144.919932 239.415888 244.279885 417.591804 252.543881z"
				fill="#95E652"></path>
			<path
				d="M394.159815 167.999921l-45.255979 45.255979L303.647858 167.999921l45.255978-45.255979zM394.159815 503.999764l-45.255979 45.255979L303.655858 503.999764l45.247978-45.247979z"
				fill="#FFF8E6"></path>
			<path
				d="M180.879915 290.719864l45.247979 45.247979-45.255979 45.255978-45.255979-45.255978zM516.903758 290.719864l45.247978 45.247979-45.247978 45.247978-45.247979-45.247978z"
				fill="#FFF8E6"></path>
			<path d="M198.087907 185.207913h63.99997v63.99997h-63.99997zM435.671796 422.791802h63.99997v63.99997h-63.99997z"
				fill="#FFF8E6"></path>
			<path d="M198.087907 422.791802h63.99997v63.99997h-63.99997zM435.671796 185.207913h63.99997v63.99997h-63.99997z"
				fill="#FFF8E6"></path>
			<path
				d="M348.879836 335.999843m-183.999913 0a183.999914 183.999914 0 1 0 367.999827 0 183.999914 183.999914 0 1 0-367.999827 0Z"
				fill="#FFEAB3"></path>
			<path
				d="M348.879836 335.999843m-159.999925 0a159.999925 159.999925 0 1 0 319.99985 0 159.999925 159.999925 0 1 0-319.99985 0Z"
				fill="#FFDC80"></path>
		</symbol>
		<symbol id="icon-_moon" viewBox="0 0 1024 1024">
			<path d="M512 512m-512 0a512 512 0 1 0 1024 0 512 512 0 1 0-1024 0Z" fill="#323232"></path>
			<path
				d="M512 512m-407.005867 0a407.005867 407.005867 0 1 0 814.011734 0 407.005867 407.005867 0 1 0-814.011734 0Z"
				fill="#494A4A"></path>
			<path
				d="M748.1344 633.9584c0-1.143467 0.085333-2.286933 0.085333-3.413333a69.512533 69.512533 0 0 0-8.823466-33.979734q-1.058133-1.911467-2.2528-3.7376l-0.187734-0.3072a70.485333 70.485333 0 0 0-5.2736-7.099733l-0.238933-0.273067q-1.3312-1.536-2.730667-3.003733l-0.3072-0.324267a70.894933 70.894933 0 0 0-6.417066-5.819733l-0.5632-0.443733q-1.467733-1.160533-3.003734-2.235734l-0.494933-0.341333q-1.706667-1.2288-3.6352-2.3552l-0.256-0.136533q-1.706667-0.989867-3.413333-1.8944l-0.887467-0.4608q-1.604267-0.802133-3.242667-1.536l-0.6144-0.273067q-1.928533-0.836267-3.9424-1.553067l-0.8192-0.273066a54.8864 54.8864 0 0 0-3.242666-1.024l-1.143467-0.324267a85.248 85.248 0 0 0-3.601067-0.887467l-0.546133-0.119466a67.345067 67.345067 0 0 0-4.1984-0.733867l-1.143467-0.136533q-1.706667-0.2048-3.2768-0.341334l-1.245866-0.1024a74.786133 74.786133 0 0 0-4.386134-0.1536 69.8368 69.8368 0 0 0-20.48 3.037867 104.106667 104.106667 0 0 0-12.1344-11.076267 258.696533 258.696533 0 0 0-449.9456-248.763733 183.1424 183.1424 0 0 1 106.939734-34.2528c5.12 0 10.24 0.221867 15.36 0.631467a183.125333 183.125333 0 0 1 50.5344 11.52h0.170666q3.874133 1.501867 7.68 3.157333l0.256 0.1024 7.441067 3.413333 0.273067 0.136534q3.669333 1.826133 7.253333 3.805866l0.221867 0.119467q3.618133 2.013867 7.133866 4.164267a184.610133 184.610133 0 0 1 26.760534 20.036266h0.085333q2.986667 2.696533 5.870933 5.5296l0.324267 0.3072q2.781867 2.7648 5.461333 5.632l0.443734 0.477867q2.6112 2.833067 5.12 5.768533l0.494933 0.580267q2.4576 2.9184 4.795733 5.956267l0.494934 0.648533q2.321067 3.037867 4.522666 6.178133l0.426667 0.6144q2.2016 3.1744 4.283733 6.4512l0.324267 0.529067q2.116267 3.413333 4.078933 6.826667l0.170667 0.3072c1.553067 2.7136 3.0208 5.495467 4.437333 8.2944a56.149333 56.149333 0 0 0-12.578133 2.304 82.824533 82.824533 0 0 0-134.007467 18.039466 42.530133 42.530133 0 0 0-53.009066 41.079467 104.277333 104.277333 0 0 0-42.2912 80.110933 13.653333 13.653333 0 0 0 0 1.4336v0.426667c0 0.136533 0.1024 0.682667 0.187733 1.024s0 0.3072 0.1024 0.4608 0.2048 0.733867 0.324267 1.092267l0.1024 0.3072a15.36 15.36 0 0 0 0.580266 1.416533l0.1024 0.187733a16.520533 16.520533 0 0 0 0.648534 1.211734l0.221866 0.3584c0.221867 0.3584 0.4608 0.733867 0.7168 1.092266l0.221867 0.3072a26.333867 26.333867 0 0 0 2.338133 2.798934l0.119467 0.119466q0.6144 0.631467 1.297067 1.262934l0.2048 0.187733q0.7168 0.648533 1.501866 1.297067 1.706667 1.416533 3.720534 2.781866c0.6656 0.4608 1.348267 0.904533 2.065066 1.348267 26.914133 16.7936 87.995733 28.535467 159.044267 28.535467 19.3536 0 37.956267-0.8704 55.3472-2.474667l-0.494933 0.750933-0.426667 0.6144q-2.2016 3.140267-4.539733 6.178134l-0.477867 0.631466q-2.338133 3.037867-4.795733 5.956267l-0.494934 0.580267q-2.491733 2.935467-5.12 5.7856l-0.443733 0.477866q-2.679467 2.884267-5.461333 5.649067l-0.3072 0.290133q-2.884267 2.833067-5.870934 5.546667a184.8832 184.8832 0 0 1-26.7776 20.036267q-3.515733 2.167467-7.150933 4.181333l-0.187733 0.1024q-3.584 1.979733-7.2704 3.805867l-0.256 0.136533q-3.6864 1.826133-7.458134 3.413333l-0.238933 0.1024q-3.805867 1.706667-7.68 3.157334h-0.136533a183.057067 183.057067 0 0 1-50.551467 11.52c-5.12 0.4096-10.24 0.631467-15.36 0.631466a183.159467 183.159467 0 0 1-106.939733-34.2528 258.5088 258.5088 0 0 0 180.138666 107.093334 109.550933 109.550933 0 0 0-3.259733 26.453333 16.520533 16.520533 0 0 0 0.1024 1.706667v0.529066c0 0.170667 0.136533 0.853333 0.221867 1.262934l0.136533 0.5632 0.392533 1.365333 0.136534 0.4096a13.892267 13.892267 0 0 0 0.733866 1.706667l0.119467 0.238933c0.238933 0.512 0.512 1.006933 0.802133 1.501867l0.273067 0.443733q0.4096 0.682667 0.887467 1.365333l0.273066 0.375467a33.0752 33.0752 0 0 0 2.9184 3.413333l0.1536 0.1536 1.5872 1.553067 0.273067 0.256 1.8432 1.621333q2.116267 1.706667 4.625067 3.413334l2.56 1.706666c33.467733 20.8896 109.431467 35.4816 197.802666 35.4816 119.330133 0 216.046933-26.606933 216.046934-59.409066a131.413333 131.413333 0 0 0-56.285867-102.058667z"
				fill="#323232"></path>
			<path
				d="M573.8496 401.8176v-2.781867a56.200533 56.200533 0 0 0-72.6016-53.725866 82.824533 82.824533 0 0 0-134.007467 18.039466 42.530133 42.530133 0 0 0-53.009066 41.079467 104.277333 104.277333 0 0 0-42.257067 80.0768c0 26.385067 77.7728 47.786667 173.7216 47.786667s173.7216-21.384533 173.7216-47.786667a105.659733 105.659733 0 0 0-45.568-82.688z"
				fill="#CDCCCA"></path>
			<path
				d="M293.768533 506.2656a104.277333 104.277333 0 0 1 42.2912-80.110933 42.530133 42.530133 0 0 1 53.009067-41.079467 82.807467 82.807467 0 0 1 134.007467-18.039467 56.32 56.32 0 0 1 43.758933 4.642134 56.2176 56.2176 0 0 0-65.518933-26.4192 82.824533 82.824533 0 0 0-134.007467 18.039466 42.530133 42.530133 0 0 0-53.009067 41.079467 104.277333 104.277333 0 0 0-42.325333 80.128c0 8.413867 7.936 16.3328 21.845333 23.210667a13.294933 13.294933 0 0 1-0.0512-1.450667z"
				fill="#E8E9EC"></path>
			<path
				d="M453.4784 166.912a258.338133 258.338133 0 0 0-210.944 108.919467 183.995733 183.995733 0 1 1 0 299.451733 258.6624 258.6624 0 1 0 210.944-408.388267z"
				fill="#DDAE2A"></path>
			<path
				d="M364.834133 608.9216q7.594667 0.631467 15.36 0.648533a183.995733 183.995733 0 0 0 0-367.9744q-7.748267 0-15.36 0.631467a183.995733 183.995733 0 0 1 0 366.6944z"
				fill="#EDC849"></path>
			<path
				d="M794.7776 605.969067c0-1.143467 0.085333-2.286933 0.085333-3.413334a69.973333 69.973333 0 0 0-90.299733-66.833066 102.997333 102.997333 0 0 0-166.656 22.4256 52.906667 52.906667 0 0 0-65.928533 51.0976 129.706667 129.706667 0 0 0-52.599467 99.6352c0 32.8192 96.733867 59.409067 216.046933 59.409066s216.046933-26.606933 216.046934-59.409066a131.413333 131.413333 0 0 0-56.695467-102.912z"
				fill="#CDCCCA"></path>
			<path
				d="M446.481067 735.914667a129.706667 129.706667 0 0 1 52.599466-99.6352 52.906667 52.906667 0 0 1 65.928534-51.080534 102.997333 102.997333 0 0 1 166.6048-22.442666 69.973333 69.973333 0 0 1 54.408533 5.7856 69.973333 69.973333 0 0 0-81.476267-32.853334 102.997333 102.997333 0 0 0-166.656 22.4256 52.906667 52.906667 0 0 0-65.928533 51.0976 129.706667 129.706667 0 0 0-52.599467 99.6352c0 10.478933 9.864533 20.309333 27.170134 28.859734a17.408 17.408 0 0 1-0.0512-1.792z"
				fill="#E8E9EC"></path>
		</symbol>
	</svg>
    <a onclick="music_on();" id="musicmobbtn" title="播放背景音乐">
        <svg style=" width: 1.5em;height: 1.5em;" id="music" aria-hidden="true">
            <use id="modeicon" xlink:href="#icon-icon-music">
                <svg id="icon-icon-music" viewBox="0 0 1024 1024">
                    <path
                        d="M997.45185173 512A485.45185173 485.45185173 0 1 1 26.54814827 512a485.45185173 485.45185173 0 0 1 970.90370346 0"
                        fill="#9025FC"></path>
                    <path
                        d="M478.56450347 602.59745173S403.9869632 545.19277013 369.03442987 537.78962987c-82.1020448-17.41558507-136.47265173 35.8020736-133.37789654 106.192592 4.36906667 100.42785173 127.37042987 123.85090347 194.66619307 111.3505184 67.3564448-12.37902187 101.09534827-57.04059307 108.86257707-111.83597014 7.76722987-54.79537813 46.84610347-263.9037632 46.84610346-263.9037632s66.26417813 61.28829653 85.2574816 82.3447712c26.4571264 29.3698368-0.1820448 79.85682987-0.18204373 79.8568288s72.39300693-12.07561493 90.23336213-104.97896213c12.31834027-64.1403264-23.36237013-76.64071147-65.71804373-110.37961493-82.76954027-65.7787264-121.2416-90.2940448-145.63555627-95.45197014-24.27259307-5.0972448-45.02565973 4.42974827-45.8145184 81.4952288-0.84954027 77.0654816-25.60758507 290.1181632-25.60758506 290.1181632"
                        fill="#FFFFFF"></path>
                </svg>
            </use>
        </svg>
    </a>
	<audio id="bg_music" src="{{theme.bg_music}}" loop="loop"></audio>
	<script>
			
		function music_on() {
			var audio1 = document.getElementById('bg_music');
			if (audio1.paused) {
				audio1.play();
				$("svg#music").addClass("xuanzhuan");
				
			}else{
				audio1.pause();
				$('svg#music').removeClass("xuanzhuan");
				audio1.currentTime = 0;//音乐从头播放
			}
		}
	    function BackTOP() {
			$("#btn").hide();
			$(function () {
				$(window).scroll(function () {
					if ($(window).scrollTop() > 50) {
						$("#btn").fadeIn(200);
					} else {
						$("#btn").fadeOut(200);
					}
				});
				$("#btn").click(function () {
					$('body,html').animate({
							scrollTop: 0
						},
						500);
					return false;
				});
			})
		}
		function scrollToComment() {
		  var t = $("#valine-comments").offset().top;
		  $("html,body").animate({ scrollTop: t }, 500);
		}	
		function switchNightMode() {
		  $(
			'<div class="Cuteen_DarkSky"><div class="Cuteen_DarkPlanet"></div></div>'
		  ).appendTo($("body")),
			setTimeout(function () {
			  var DarkMode =
				document.cookie.replace(
				  /(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
				  "$1"
				) || "0";
			  DarkMode == "0"
				? ($("html").addClass("DarkMode"),
				  (document.cookie = "DarkMode=1;path=/"),
				  console.log("夜间模式开启"),
				  $("#modeicon").attr("xlink:href", "#icon-sun"))
				: ($("html").removeClass("DarkMode"),
				  (document.cookie = "DarkMode=0;path=/"),
				  console.log("夜间模式关闭"),
				  $("#modeicon").attr("xlink:href", "#icon-_moon")),
				setTimeout(function () {
				  $(".Cuteen_DarkSky").fadeOut(1e3, function () {
					$(this).remove();
				  });
				}, 2e3);
			}),
			50;
		}

		function checkNightMode() {
		  if ($("html").hasClass("n-f")) {
			$("html").removeClass("day");
			$("html").addClass("DarkMode");
			$("#modeicon").attr("xlink:href", "#icon-sun");
			return;
		  }
		  if ($("html").hasClass("d-f")) {
			$("html").removeClass("DarkMode");
			$("html").addClass("day");
			$("#modeicon").attr("xlink:href", "#icon-_moon");

			return;
		  }
		  if (
			document.cookie.replace(
			  /(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
			  "$1"
			) === ""
		  ) {
			if (new Date().getHours() >= 23 || new Date().getHours() < 7) {
			  $("html").addClass("DarkMode");
			  document.cookie = "DarkMode=1;path=/";
			  console.log("夜间模式开启");
			  $("#modeicon").attr("xlink:href", "#icon-sun");
			} else {
			  $("html").removeClass("DarkMode");
			  document.cookie = "DarkMode=0;path=/";
			  console.log("夜间模式关闭");
			  $("#modeicon").attr("xlink:href", "#icon-_moon");
			}
		  } else {
			var DarkMode =
			  document.cookie.replace(
				/(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
				"$1"
			  ) || "0";
			if (DarkMode == "0") {
			  $("html").removeClass("DarkMode");
			  $("#modeicon").attr("xlink:href", "#icon-_moon");
			} else if (DarkMode == "1") {
			  $("html").addClass("DarkMode");
			  $("#modeicon").attr("xlink:href", "#icon-sun");
			}
		  }
		}
		BackTOP();		
		checkNightMode();
	</script>
</div>
```

{% endfold  %}

此外，我们还要加入自己的 css 样式。把如下代码放入 `根目录/source/_data/styles.styl`中即可。

{% fold 点击显/隐代码 %}

```stylus
/****************************************/
/*************悬浮组件 begin*************/
/****************************************/
/* 整体 begin */
#RightDownBtn > a {
  width: 1.5em;
  height: 1.5em;
  margin: 0.3125rem 0;
  transition: 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  border-bottom: none !important;
}
#RightDownBtn svg.icon,
#RightDownBtn svg#music,
#RightDownBtn a {
  width: 21px !important;
  height: 21px !important;
}
#RightDownBtn {
  position: fixed;
  right: 32px;
  bottom: 64px;
  padding: 0.3125rem 0.5rem;
  background: #fff;
  border-radius: 0.1875rem;
  box-shadow: 0 0 0.3125rem rgba(0, 0, 0, 0.4);
  transition: 0.3s ease all;
  z-index: 1000;
  align-items: flex-end;
  flex-direction: column;
  display: -moz-flex;
  display: flex;
  float: right;
}
/* 组件部分 end */

/* 深色模式 begin */
.DarkMode .blogroll,
.DarkMode #RightDownBtn,
.DarkMode strong,
.DarkMode .note,
.DarkMode img {
  filter: brightness(0.7) !important;
  -webkit-filter: brightness(0.7) !important;
}

.DarkMode #RightDownBtn {
  background: #222c;
}

.DarkMode body {
  background: #12121c !important;
}

/*主体 main-inner */
.DarkMode .main-inner {
  background: rgba(40, 44, 52, 0.5); /*区分阴影度*/
}

.DarkMode .post-block,				/*文章*/
.DarkMode .main-menu,				/*header上部分颜色*/
.DarkMode  .sub-menu,				/* 设置二级标题 */
.DarkMode  .popup,					/*搜索*/
.DarkMode  .search-result-container {
  background: #282c34 !important; /*背景颜色*/
}

/* 文章块 post-block */
.DarkMode .post-block {
  opacity: 1;
}

.DarkMode .post-block,				/*文章*/
.DarkMode .menu-item a,				/*menu*/
.DarkMode .site-author-name,		/*侧栏作者*/
.DarkMode .site-description,		/*侧栏描述*/
.DarkMode .site-state-item-count,	/*侧栏分类数*/
.DarkMode .site-state-item-name,	/*侧栏分类名*/
.DarkMode .links-of-author-item a,	/*社交*/
.DarkMode .sidebar-nav li,			/*侧栏分类标题*/
.DarkMode .post-toc ol a,			/*上下文颜色*/
.DarkMode .post-nav-item a,			/*侧栏文章标题*/
.DarkMode .footer,					/*页脚颜色*/
.DarkMode  .search-input,			/*搜索*/
.DarkMode  .search-result-container,
.DarkMode  .search-result-list a,
.DarkMode  .back-to-top,
.DarkMode  #waifu-tips,
.DarkMode  a.vlogin-btn,
.DarkMode  .vright .vheader .vnick,
.DarkMode  .vmail,
.DarkMode  .vlink,
.DarkMode  .veditor,
.DarkMode  .vcol button,
.DarkMode  .vcount,
.DarkMode  .vempty,
.DarkMode  .vpreview p,
.DarkMode  .vpreview h1,
.DarkMode  .vpreview h2,
.DarkMode  .vpreview h3,
.DarkMode  .vpreview ol,
.DarkMode  .vcontent p,
.DarkMode  .vcontent h1,
.DarkMode  .vcontent h2,
.DarkMode  .vcontent h3,
.DarkMode  .vcontent ol {
  /* live2d 文字颜色 */
  color: rgba(255, 255, 255, 0.6) !important;
}

/* header上部*/
.DarkMode .main-menu {
  border-radius: 0 0 $myradius $myradius; /*设置圆角*/
}
/* 设置 brand 背景 */
.DarkMode .site-brand-container {
  background: url(https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/header-bg1.webp);
  background-repeat: repeat;
  background-position: 70% 20%;
  background-size: cover;
}
/* 设置header下部 */
.DarkMode .sidebar-inner {
  background: #282c34;
}

.DarkMode a.menu-item-active {
  border-radius: $myradius;
  background: #382d2d; /* 选中时显现颜色*/
}
.DarkMode .menu-item a:hover {
  border-radius: $myradius;
  background: #382d2d; /* 移动至所显现颜色*/
  color: aqua !important;
}

.DarkMode .site-state-item-count,
.DarkMode .site-state-item-name,
.DarkMode .links-of-author-item a {
  &:hover {
    background: #382d2d;
    color: aqua !important;
  }
}

.DarkMode .post-toc ol a {
  &:hover {
    border-bottom-color: #fc6423;
    color: #fc6423 !important;
  }
}

.DarkMode .sidebar-toc-active .sidebar-nav-toc,					/*侧栏选中时*/
.DarkMode .sidebar-overview-active .sidebar-nav-overview
.DarkMode .post-toc .nav .active > a {
  color: aqua !important;
  border-bottom-color: aqua !important;
}

/* 文章尾部上下文 */
.DarkMode .post-nav-item a:hover {
  color: #fc6423 !important; /* 移动至所显现颜色*/
}

/* 设置二级标题 */
.DarkMode .sub-menu {
  background: #282c34;
}

.DarkMode .search-header {
  background: #353232 !important;
}
/* 搜索页面鼠标划入变化 */
.DarkMode .search-result-list a {
  border-bottom: 1px solid white;
  &:hover {
    color: aqua !important;
    border-bottom: 1px solid aqua;
  }
}

.DarkMode #waifu-tips span {
  color: purple; /* live2d 注意颜色 */
}

/* 设置超链接 */
.DarkMode .post-meta-item a,
.DarkMode .post-body p a {
  color: rgba(0, 255, 255, 0.6);
  border-bottom: 1px solid rgba(0, 255, 255, 0.6);
  &:hover {
    color: #fc6423 !important;
    border-bottom: 1px solid #fc6423;
  }
}

/* 评论区 */
.DarkMode .comments {
  background: #282c34;
}

.DarkMode a.vlogin-btn {
  &:hover {
    color: #fc6423;
    border-bottom-color: #fc6423 !important;
  }
}
.DarkMode .vcol button {
  &:hover {
    color: #fc6423 !important;
    border-color: #fc6423 !important;
  }
}

.DarkMode .vcol span.vicon,
.DarkMode .vcol svg.markdown {
  fill: currentColor;
  color: rgba(255, 255, 255, 0.6);
}

.DarkMode .posts-collapse .post-content .post-title a{	/* 归档 */
	color: rgba(255, 255, 255, 0.6);
  &:hover {
    color: #fc6423;
	}	
}

.DarkMode .breadcrumb a{
	color: rgb(170,145,145,0.6);
	border-bottom-color: rgb(170,145,145,0.6);
}
.DarkMode .posts-collapse .post-content .post-header,
.DarkMode .breadcrumb a{
  &:hover {
    color: #fc6423 !important;
    border-color: #fc6423 !important;
	}
}

/* pagination-当前页码 */
.DarkMode .pagination .page-number.current {
  background: rgba(255, 255, 255, 0.6);
  color: black;
}

/* pagination-页码按钮 */
.DarkMode .pagination .prev,
.DarkMode .pagination .next,
.DarkMode .pagination .page-number {
  color: rgba(255, 255, 255, 0.6);

  &:hover {
    color: black !important;
    background: rgba(255, 255, 255, 0.6);
  }
}

/* 深色模式 end */

/* sun and noon */
.Cuteen_DarkSky,
.Cuteen_DarkSky:before {
  content: "";
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: 88888888;
}

.Cuteen_DarkSky {
  background: linear-gradient(#feb8b0, #fef9db);
}

.Cuteen_DarkSky:before {
  transition: 2s ease all;
  opacity: 0;
  background: linear-gradient(#4c3f6d, #6c62bb, #93b1ed);
}

.DarkMode .Cuteen_DarkSky:before {
  opacity: 1;
}

.Cuteen_DarkPlanet {
  z-index: 99999999;
  position: fixed;
  left: -50%;
  top: -50%;
  width: 200%;
  height: 200%;
  -webkit-animation: CuteenPlanetMove 2s cubic-bezier(0.7, 0, 0, 1);
  animation: CuteenPlanetMove 2s cubic-bezier(0.7, 0, 0, 1);
  transform-origin: center bottom;
}

@-webkit-keyframes CuteenPlanetMove {
  0% {
    transform: rotate(0);
  }

  to {
    transform: rotate(360deg);
  }
}

@keyframes CuteenPlanetMove {
  0% {
    transform: rotate(0);
  }

  to {
    transform: rotate(360deg);
  }
}

.Cuteen_DarkPlanet:after {
  position: absolute;
  left: 35%;
  top: 40%;
  width: 9.375rem;
  height: 9.375rem;
  border-radius: 50%;
  content: "";
  background: linear-gradient(#fefefe, #fffbe8);
}
/* sun and noon.end */

/* 音乐-旋转 */
.xuanzhuan {
  -webkit-animation: rotate 3s linear infinite;
  -moz-animation: rotate 3s linear infinite;
  -o-animation: rotate 3s linear infinite;
  animation: rotate 3s linear infinite;
}
@-webkit-keyframes rotate {
  from {
    -webkit-transform: rotate(0);
  }
  to {
    -webkit-transform: rotate(360deg);
  }
}
@-moz-keyframes rotate {
  from {
    -moz-transform: rotate(0);
  }
  to {
    -moz-transform: rotate(359deg);
  }
}
@-o-keyframes rotate {
  from {
    -o-transform: rotate(0);
  }
  to {
    -o-transform: rotate(359deg);
  }
}
@keyframes rotate {
  from {
    transform: rotate(0);
  }
  to {
    transform: rotate(359deg);
  }
}
/****************************************/
/*************悬浮组件 end***************/
/****************************************/
```

{% endfold %}

<p class='div-border yellow'>上述样式文件中，深色模式部分代码基本上是我根据自己的喜好及页面相关布局而编写的，若有人使用，希望能视自身情况加以删除或修改，否则就可能不大好看了喔🙃！</p>

注意：

* 把 scrollToComment() 函数中的 valine-comments 切换为评论区容器对应的id（若为 class 则把 # 换为 . ），当然如果你用的也是 valine 评论，那大概率是不用换的啦。

* 样式文件中设置圆角我选择使用参数`$myradius`，这个参数的值放在 `根目录/source/_data/variables.styl`中，即在 variables.styl 文件中添加这么一行即可（参数的值为圆角半径大小，根据喜好修改即可）：

  ```stylus
  //radius
  $myradius                     = 12px;
  ```

  当然直接把`$myradius`修改为 12px 或其它你喜欢的大小也可😂！

* 在主题配置文件 _config.yml 中加入：（我配置文件采用的方法为主题与站点配置文件二合一）

  ```yaml
  bg_music: https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/music/慵懒的猫.mp3
  ```

  以设置音乐的地址。

## 原理

代码实现的原理[此文](https://blog.csdn.net/cungudafa/article/details/106500877)已经讲的很清楚了，接下来的讲解只是个人探索过程中的学习笔记。

首先是使用`<div id="RightDownBtn"></div>`容器添加悬浮组件，组件各部分以`<a></a>`标签包裹，共有四个部分，故而共有四个`<a></a>`标签。每个部分所使用的图形是 svg 格式，故而容器内还有`<svg></svg>`标签。同时给不同部分均设立了不同的点击事件，即点击该组件部分将会执行对应的函数，从而产生相应的效果。

### 回到顶部

```javascript
 function BackTOP() {
        $("#btn").hide();
        $(function () {
            $(window).scroll(function () {
                if ($(window).scrollTop() > 50) {
                    $("#btn").fadeIn(200);
                } else {
                    $("#btn").fadeOut(200);
                }
            });
            $("#btn").click(function () {
                $('body,html').animate({
                        scrollTop: 0
                    },
                    500);
                return false;
            });
        })
    }
```

该功能的实现依靠 BackTOP() 函数完成。该函数能监听滚动条，若滚动条所处的高度达不到函数中 if 设置的要求，则将隐藏 id 为 btn 的回到顶部按钮（`$("#btn").hide();`）。当 click 此按钮后，将设置滚动条高度为 0，即实现回到顶部。最后写上一行 `BackTOP();`即为调用此函数。

### 跳转评论区

```javascript
function scrollToComment() {
    var t = $("#valine-comments").offset().top;
    $("html,body").animate({ scrollTop: t }, 500);
  }	
```

当该按钮经历 onclick 事件后，会调用 scrollToComment() 函数。此函数执行的效果就是跳转至锚点 #valine-comments。而不同的评论组件，其对应的id很大可能是不同的，这个时候修改一下就行了。

### 切换深色模式

{% fold 点击显/隐代码 %}

```javascript
function switchNightMode() {
    $(
      '<div class="Cuteen_DarkSky"><div class="Cuteen_DarkPlanet"></div></div>'
    ).appendTo($("body")),
      setTimeout(function () {
        var DarkMode =
          document.cookie.replace(
            /(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
            "$1"
          ) || "0";
        DarkMode == "0"
          ? ($("html").addClass("DarkMode"),
            (document.cookie = "DarkMode=1;path=/"),
            console.log("夜间模式开启"),
            $("#modeicon").attr("xlink:href", "#icon-sun"))
          : ($("html").removeClass("DarkMode"),
            (document.cookie = "DarkMode=0;path=/"),
            console.log("夜间模式关闭"),
            $("#modeicon").attr("xlink:href", "#icon-_moon")),
          setTimeout(function () {
            $(".Cuteen_DarkSky").fadeOut(1e3, function () {
              $(this).remove();
            });
          }, 2e3);
      }),
      50;
  }

  function checkNightMode() {
    if ($("html").hasClass("n-f")) {
      $("html").removeClass("day");
      $("html").addClass("DarkMode");
      $("#modeicon").attr("xlink:href", "#icon-sun");
      return;
    }
    if ($("html").hasClass("d-f")) {
      $("html").removeClass("DarkMode");
      $("html").addClass("day");
      $("#modeicon").attr("xlink:href", "#icon-_moon");

      return;
    }
    if (
      document.cookie.replace(
        /(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
        "$1"
      ) === ""
    ) {
      if (new Date().getHours() >= 23 || new Date().getHours() < 7) {
        $("html").addClass("DarkMode");
        document.cookie = "DarkMode=1;path=/";
        console.log("夜间模式开启");
        $("#modeicon").attr("xlink:href", "#icon-sun");
      } else {
        $("html").removeClass("DarkMode");
        document.cookie = "DarkMode=0;path=/";
        console.log("夜间模式关闭");
        $("#modeicon").attr("xlink:href", "#icon-_moon");
      }
    } else {
      var DarkMode =
        document.cookie.replace(
          /(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/,
          "$1"
        ) || "0";
      if (DarkMode == "0") {
        $("html").removeClass("DarkMode");
        $("#modeicon").attr("xlink:href", "#icon-_moon");
      } else if (DarkMode == "1") {
        $("html").addClass("DarkMode");
        $("#modeicon").attr("xlink:href", "#icon-sun");
      }
    }
  }
```

{% endfold  %}

onclick 调用的是 switchNightMode() 函数，该函数会先在`<body></body>`中加个一个属性 Cuteen_DarkSky 的div 容器，结合样式文件中的设计，最终效果即为切换前的动画。然后还会为 html（body 的外层容器） 加一个类 DarkMode，我们便可以通过 DarkMode 选择器来实现深色模式下的样式设计。还有个 checkNightMode() 函数是直接调用的，此函数实现的功能有通过 cookie 来记录当前状态（DarkMode 为1则为深色模式），以及通过`if (new Date().getHours() >= 23 || new Date().getHours() < 7)`做到当时间为23~7 点时，自动设置深色模式。

我对这些的具体实现一窍不通，也只能靠作者的讲解稍微了解了一下大概的含义。

这里再谈谈深色模式下的样式，首先最主要的是把 body 的背景颜色设置为深色（background: #12121c !important;），其次还有如 post-block、main-menu 等容器背景，我将其设为浅一点的深色（#282c34）。然后是各容器的文字颜色，比如post-block、footer等，普遍设置为浅白色（color: rgba(255, 255, 255, 0.6) !important;），其中 0.6 表示透明度，表现为颜色没那么亮。还有利用属性 `filter: brightness(.7);`来降低元素的亮度，其中 .7 可修改，普遍适用于 RightDownBtn、img、note 等。此外还可以设置深色模式下超链接的表现、搜索界面的表现等等，具体可见我的样式文件。

### 播放背景音乐

```js
function music_on() {
    var audio1 = document.getElementById('bg_music');
    if (audio1.paused) {
        audio1.play();
        $("svg#music").addClass("xuanzhuan");
        
    }else{
        audio1.pause();
        $('svg#music').removeClass("xuanzhuan");
        audio1.currentTime = 0;//音乐从头播放
    }
}
```

onclick 事件调用 music_on() 函数，其中有着简单的判断，若音乐停止（paused），则播放（play）它，反之亦然。

音乐的实现则利用 html 对应的元素 `<audio></audio>`，此处即为`<audio id="bg_music" src="{{theme.bg_music}}" loop="loop"></audio>`，audio 具体可见此文：[HTML 5 视频/音频参考手册](https://www.w3school.com.cn/html5/html5_ref_audio_video_dom.asp)。此处有个地方很关键，src 的地址是一个参数，其值放在配置文件中。因而我们需要在配置文件中设置这个参数，即为音乐的地址。

在把此功能搬到 next 主题时，我遇到问题 "<" 报错，原代码为 `<%= theme.bg_music%>`，意思也是调用主题内设置的参数，但是我直接搬运可不行，我得找出如何表达调用主题参数的方法，自己试了好几个参数表示方法，都不成功，然后想到 next 主题用 Nunjucks 引擎来渲染文件，去搜了下 Nunjucks 参数的表示形式，发现了 `{{}}`，于是尝试成功。

此外，原代码并未有旋转功能，我看到大佬[Sanarous](https://bestzuo.cn/)的博客，点击音乐按钮有旋转的功能，于是我也想加一个。于是打开 F12，选中该元素，发现当音乐播放的时候，元素会加上类 xuanzhuan，又看到深色模式中代码也涉及了添加类，于是马上操作起来，即`$("选择器").addClass("类名");`以及`$('选择器').removeClass("类名");`，实现播放时加类，停止时去除类。然后就是 F12 、 ctrl + F 找到 xuanzhuan 的样式配置来，发现通过 rotate 实现，于是我 copy 了相关代码放入我的样式文件中，成功实现旋转功能。

## 总结

经过这次探索，我更加熟悉如何利用 F12 寻找资源以及修改样式，还学到了很多的 css 属性，当然也只不过是留下了个映像，等要用的时候再查寻具体用法😂。总而言之，收获良多，也很开心又实现了一个个小功能！😁]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 DarkMode 实现的深色主题</title>
    <url>/10/</url>
    <content><![CDATA[
<p class='div-border green'>基于 DarkMode.js 实现 Next 主题的自定义深色模式</p>

<!--more-->

## 概述

上一种方法实现的深色模式不包含 cookies 相关步骤，所以切换页面时无法保存深色配置。于是我搜索 next 自定义深色主题，发现许多文章提到可以通过 darkmode.js 实现，比如此文：[Hexo（Next 主题）实现可切换的 Dark Mode (暗色背景 / 夜间模式)](https://dog.wtf/tech/hexo-dark-mode-note/)。我将其中通过定制 vendors 以加入 darkmode,js 变为直接在自定义 body-end.njk 中引入，最终实现的结果并不如意。于是我前往 DarkMode,js 开源仓库，自己修改了一番，实现了需求。

<a href="https://github.com/sandoche/Darkmode.js" class="LinkCard">Darkmode.js 仓库</a>

下面直接放出实现步骤，最后谈一下如何实现的，权当总结。

## 实现

1. ### 创建 darkmode.js

   首先得引入 darkmode.js ，先在`根目录\source\js`中新建 darkmode.js ，填入以下代码：

   {% fold 点击显/隐代码 %}

   ```javascript
   !(function (e, t) {
     "object" == typeof exports && "object" == typeof module
       ? (module.exports = t())
       : "function" == typeof define && define.amd
       ? define("darkmode-js", [], t)
       : "object" == typeof exports
       ? (exports["darkmode-js"] = t())
       : (e["darkmode-js"] = t());
   })("undefined" != typeof self ? self : this, function () {
     return (function (e) {
       var t = {};
       function n(o) {
         if (t[o]) return t[o].exports;
         var r = (t[o] = { i: o, l: !1, exports: {} });
         return e[o].call(r.exports, r, r.exports, n), (r.l = !0), r.exports;
       }
       return (
         (n.m = e),
         (n.c = t),
         (n.d = function (e, t, o) {
           n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: o });
         }),
         (n.r = function (e) {
           "undefined" != typeof Symbol &&
             Symbol.toStringTag &&
             Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
             Object.defineProperty(e, "__esModule", { value: !0 });
         }),
         (n.t = function (e, t) {
           if ((1 & t && (e = n(e)), 8 & t)) return e;
           if (4 & t && "object" == typeof e && e && e.__esModule) return e;
           var o = Object.create(null);
           if (
             (n.r(o),
             Object.defineProperty(o, "default", { enumerable: !0, value: e }),
             2 & t && "string" != typeof e)
           )
             for (var r in e)
               n.d(
                 o,
                 r,
                 function (t) {
                   return e[t];
                 }.bind(null, r)
               );
           return o;
         }),
         (n.n = function (e) {
           var t =
             e && e.__esModule
               ? function () {
                   return e.default;
                 }
               : function () {
                   return e;
                 };
           return n.d(t, "a", t), t;
         }),
         (n.o = function (e, t) {
           return Object.prototype.hasOwnProperty.call(e, t);
         }),
         (n.p = ""),
         n((n.s = 0))
       );
     })([
       function (e, t, n) {
         "use strict";
         Object.defineProperty(t, "__esModule", { value: !0 }),
           (t.default = void 0);
         var o = (function (e) {
           if (e && e.__esModule) return e;
           var t = {};
           if (null != e)
             for (var n in e)
               if (Object.prototype.hasOwnProperty.call(e, n)) {
                 var o =
                   Object.defineProperty && Object.getOwnPropertyDescriptor
                     ? Object.getOwnPropertyDescriptor(e, n)
                     : {};
                 o.get || o.set ? Object.defineProperty(t, n, o) : (t[n] = e[n]);
               }
           return (t.default = e), t;
         })(n(1));
         var r = o.default;
         (t.default = r),
           o.IS_BROWSER &&
             (function (e) {
               e.Darkmode = o.default;
             })(window),
           (e.exports = t.default);
       },
       function (e, t, n) {
         "use strict";
         function o(e, t) {
           for (var n = 0; n < t.length; n++) {
             var o = t[n];
             (o.enumerable = o.enumerable || !1),
               (o.configurable = !0),
               "value" in o && (o.writable = !0),
               Object.defineProperty(e, o.key, o);
           }
         }
         Object.defineProperty(t, "__esModule", { value: !0 }),
           (t.default = t.IS_BROWSER = void 0);
         var r = "undefined" != typeof window;
         t.IS_BROWSER = r;
         var a = (function () {
           function e(t) {
             if (
               ((function (e, t) {
                 if (!(e instanceof t))
                   throw new TypeError("Cannot call a class as a function");
               })(this, e),
               r)
             ) {
               t = Object.assign(
                 {},
                 {
                   bottom: "32px",
                   right: "32px",
                   left: "unset",
                   time: "0.3s",
                   buttonColorDark: "#100f2c",
                   buttonColorLight: "#fff",
                   label: "",
                   saveInCookies: !0,
                   autoMatchOsTheme: !0,
                 },
                 t
               );
               var n = "\n      .darkmode-layer {\n        position: fixed;\n        pointer-events: none;\n        background: "
                   
                   .concat(
                     t.time,
                     " ease;\n              }\n\n      .darkmode-layer--button {\n        width: 2.9rem;\n        height: 2.9rem;\n        border-radius: 50%;\n        right: "
                   )
                   .concat(t.right, ";\n        bottom: ")
                   .concat(t.bottom, ";\n        left: ")
                   .concat(
                     t.left,
                     ";\n      }\n\n      .darkmode-layer--simple {\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        transform: scale(1) !important;\n      }\n\n      .darkmode-layer--expanded {\n        transform: scale(100);\n        border-radius: 0;\n      }\n\n      .darkmode-layer--no-transition {\n        transition: none;\n      }\n\n      .darkmode-toggle {\n        background: "
                   )
                   .concat(
                     t.buttonColorDark,
                     ";\n        width: 3rem;\n        height: 3rem;\n        position: fixed;\n        border-radius: 50%;\n        border:none;\n        right: "
                   )
                   .concat(t.right, ";\n        bottom: ")
                   .concat(t.bottom, ";\n        left: ")
                   .concat(
                     t.left,
                     ";\n        cursor: pointer;\n        transition: all 0.5s ease;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .darkmode-toggle--white {\n        background: "
                   )
                   .concat(
                     t.buttonColorLight,
                     ";\n      }\n\n      .darkmode-toggle--inactive {\n        display: none;\n      }\n\n      .darkmode-background {\n        background: "
                   ),
                 o = document.createElement("div"),
                 a = document.createElement("button"),
                 i = document.createElement("div");
               (a.innerHTML = t.label),
                 a.classList.add("darkmode-toggle--inactive"),
                 o.classList.add("darkmode-layer"),
                 i.classList.add("darkmode-background");
               var d = "true" === window.localStorage.getItem("darkmode"),
                 s =
                   t.autoMatchOsTheme &&
                   window.matchMedia("(prefers-color-scheme: dark)").matches,
                 l = null === window.localStorage.getItem("darkmode");
               ((!0 === d && t.saveInCookies) || (l && s)) &&
                 (o.classList.add(
                   "darkmode-layer--expanded",
                   "darkmode-layer--simple",
                   "darkmode-layer--no-transition"
                 ),
                 a.classList.add("darkmode-toggle--white"),
                 document.body.classList.add("darkmode--activated")),
                 document.body.insertBefore(a, document.body.firstChild),
                 document.body.insertBefore(o, document.body.firstChild),
                 document.body.insertBefore(i, document.body.firstChild),
                 this.addStyle(n),
                 (this.button = a),
                 (this.layer = o),
                 (this.saveInCookies = t.saveInCookies),
                 (this.time = t.time);
             }
           }
           var t, n, a;
           return (
             (t = e),
             (n = [
               {
                 key: "addStyle",
                 value: function (e) {
                   var t = document.createElement("link");
                   t.setAttribute("rel", "stylesheet"),
                     t.setAttribute("type", "text/css"),
                     t.setAttribute(
                       "href",
                       "data:text/css;charset=UTF-8," + encodeURIComponent(e)
                     ),
                     document.head.appendChild(t);
                 },
               },
               {
                 key: "showWidget",
                 value: function () {
                   var e = this;
                   if (r) {
                     var t = this.button,
                       n = this.layer,
                       o = 1e3 * parseFloat(this.time);
                     t.classList.add("darkmode-toggle"),
                       t.classList.remove("darkmode-toggle--inactive"),
                       t.setAttribute("aria-label", "Activate dark mode"),
                       t.setAttribute("aria-checked", "false"),
                       t.setAttribute("role", "checkbox"),
                       n.classList.add("darkmode-layer--button"),
                       t.addEventListener("click", function () {
                         var r = e.isActivated();
                         r
                           ? (n.classList.remove("darkmode-layer--simple"),
                             t.setAttribute("disabled", !0),
                             setTimeout(function () {
                               n.classList.remove("darkmode-layer--no-transition"),
                                 n.classList.remove("darkmode-layer--expanded"),
                                 t.removeAttribute("disabled");
                             }, 1))
                           : (n.classList.add("darkmode-layer--expanded"),
                             t.setAttribute("disabled", !0),
                             setTimeout(function () {
                               n.classList.add("darkmode-layer--no-transition"),
                                 n.classList.add("darkmode-layer--simple"),
                                 t.removeAttribute("disabled");
                             }, o)),
                           t.classList.toggle("darkmode-toggle--white"),
                           document.body.classList.toggle("darkmode--activated"),
                           window.localStorage.setItem("darkmode", !r);
                       });
                   }
                 },
               },
               {
                 key: "toggle",
                 value: function () {
                   if (r) {
                     var e = this.layer,
                       t = this.isActivated(),
                       n = this.button;
                     e.classList.toggle("darkmode-layer--simple"),
                       document.body.classList.toggle("darkmode--activated"),
                       window.localStorage.setItem("darkmode", !t),
                       n.setAttribute("aria-label", "De-activate dark mode"),
                       n.setAttribute("aria-checked", "true");
                   }
                 },
               },
               {
                 key: "isActivated",
                 value: function () {
                   return r
                     ? document.body.classList.contains("darkmode--activated")
                     : null;
                 },
               },
             ]) && o(t.prototype, n),
             a && o(t, a),
             e
           );
         })();
         t.default = a;
       },
     ]);
   });
   ```

   {% endfold %}

   <p class='div-border yellow'>此 darkmode.js 是我基于原版 darkmode.js，加上自己对文件内容浅显的理解，最后经过实践改动了一小部分所得的成品</p>

2. ### 引入 darkmode.js

    然后在根目录`\source\_data\body-end.njk`加入以下代码以引入 darkmode.js：

   ```nginx
   {%- if theme.darkmode_js.enable %}
     <script src="/js/darkmode.js"></script>
   {%- endif %}
   ```

3. ### 调用

   最后在同一个文件（`\source\_data\body-end.njk`）中加入以下代码来配置相应的参数并调用 js 中的函数：

   ```nginx
   {%- if theme.darkmode_js.enable %}
   <script>
   var options = {
     bottom: '64px', // default: '32px'
     right: '32px', // default: '32px'
     left: 'unset', // default: 'unset'
     time: '0.5s', // default: '0.3s'
     buttonColorDark: '#100f2c',  // default: '#100f2c'
     buttonColorLight: '#fff', // default: '#fff'
     saveInCookies: true, // default: true,
     label: '🌓', // default: ''
     autoMatchOsTheme: true // default: true
   }
   const darkmode = new Darkmode(options);
   darkmode.showWidget();
   </script>
   {%- endif %}
   ```

4. ### 自定义深色样式

   当你做完上述步骤，预览界面是将能在页面左下角看到切换按钮'🌓'。点击这个按钮后，页面中 body 元素将加上类 darkmode--activated，故而深色模式下许多元素样式我们将能利用类 darkmode--activated 来自己定义（纯为 css 内容）。

   修改样式自然与 next 全能的自定义样式文件 styles.styl 有关啦，你可以直接在其中加入属于你自己的样式。

	下面贴出对我来说比较适合的深色模式配置，权当参考：

	{% fold 点击显/隐代码 %}
	
	```css
	//修改darkmode.js样式
	.darkmode--activated {
	  background: #000 !important;	/* 去除mix-blend-mode实现背景 */
	}
	/*主体 main-inner */
	.darkmode--activated .main-inner{
	  background: rgba(40,44,52,0.5);	/*区分阴影度*/
	}
	/* 文章块 post-block */
	.darkmode--activated .post-block{
	  opacity: 1;
	  background: #282c34;				/*背景颜色*/
	  color: #92fbfb;					/*文字颜色*/
	}
	/* 页脚 */
	.darkmode--activated .footer{
	  color: #92fbfb;					/*页脚颜色*/
	}
	/* 文章尾部上下文 */
	.darkmode--activated .post-nav-item a{
	  color: #92fbfb;					/*上下文颜色*/
	  &:hover {
	    color: #FFD700;					/* 移动至所显现颜色*/
	  }
	}
	
	/* header上部的下部 */
	.darkmode--activated .main-menu{
	  background: #282c34;				/*header上部分颜色*/
	  border-radius: 0 0 $myradius $myradius;	/*设置圆角*/
	}
	.darkmode--activated .menu-item a{
	  &:hover {
		border-radius: $myradius;
	    background: #382d2d;			/* 移动至所显现颜色*/
		color: aqua;
	  }
	}
	.darkmode--activated a.menu-item-active{
		border-radius: $myradius;
	    background: #382d2d;			/* 选中时显现颜色*/
	}
	
	/* 设置 brand 背景 */
	.darkmode--activated .site-brand-container{
	  background: url(https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/header-bg1.jpg);
	  background-repeat: repeat;
	  background-position: 70% 20%;
	  background-size: cover;
	}
	/* 设置header下部 */
	.darkmode--activated .sidebar-inner{
		background: #282c34;
	}
	.darkmode--activated .site-state-item a{
	  &:hover {
		color: aqua;
	  }
	}
	.darkmode--activated .links-of-author-item a{
	  &:hover {
		background: #382d2d;
		color: aqua;
	  }
	}
	
	/* 设置二级标题 */
	.darkmode--activated  .sub-menu{
	  background: #282c34;
	}
	
	/* 搜索页面背景颜色 */
	.darkmode--activated  .search-header,
	.darkmode--activated  .search-result-container{
	  background: #282c34 !important;
	}
	
	/* 搜索页面字体颜色 */
	.darkmode--activated  .search-input,
	.darkmode--activated  .search-result-container,
	.darkmode--activated  .search-result-list a{
	  color: white;
	}
	/* 搜索页面鼠标划入变化 */
	.darkmode--activated  .search-result-list a{
	  border-bottom: 1px solid white;
	  &:hover {
		color: aqua;
		border-bottom: 1px solid aqua;
	  } 
	}
	/* live2d 文字颜色 */
	.darkmode--activated  #waifu-tips{
	  color: white;
	}
	.darkmode--activated  #waifu-tips span{
	  color: purple;
	}
	/* 设置post-meta超链接 */
	.darkmode--activated .post-meta-item a{
	  color: #4169E1;
	  border-bottom: none;
	  border-bottom: 1px solid #0593d3;
	  &:hover {
	    color: #FFD700;
	    border-bottom: none;
	    border-bottom: 1px solid #fc6423;
	  }
	}
	
	.darkmode--activated  .comments{
	  background: #282c34;
	}
	.darkmode--activated  a.vlogin-btn,
	.darkmode--activated  .vnick,
	.darkmode--activated  .vmail,
	.darkmode--activated  .vlink,
	.darkmode--activated  .vmail,
	.darkmode--activated  .veditor,
	.darkmode--activated  .vinput p,
	.darkmode--activated  .vinput h1,
	.darkmode--activated  .vinput h2,
	.darkmode--activated  .vinput h3{
		color: #92fbfb !important
	}
	.darkmode--activated  a.vlogin-btn{
	  &:hover {
	    color: #FFD700 !important;
	  }
	}
	```
	
	{% endfold %}
	
	以上样式是我通过 F12，按照自己的审美观配置出的。由于我对 CSS 并未有太深入的了解，所以代码写的比较简陋，对我来说，完成网页深色模式的适配无非就是哪里不喜欢改哪里（网页的美化也就是这样）。



## 历程

最后叙述一下历程。（PS：单纯的记录一下自己愚蠢的历程而已😶）

因对上一种无法保存已选的模式的深色切换功能不满，我便找寻各种教程。于是很快遇上并应用了 darkmode.js。实现后发下页面很多地方颜色很怪异，于是我前往 body-end.njk 中修改默认配置（见[官方仓库](https://github.com/sandoche/Darkmode.js)）。当我修改 mixColor 这个参数后，发现页面怪异颜色也在变化，于是认定是 mixColor 的原因。

页面的样式由 css 控制，而 body-end.njk 中没有，那么相应的样式肯定放在另一个新导入的文件 darkmode.js 中，打开原版文件（此 darkmode.js 是我格式化官方 darkmode-js.min.js 所得到的），全局搜索 mixColor。

{% fold 点击显/隐代码 %}

```javascript
!(function (e, t) {
  "object" == typeof exports && "object" == typeof module
    ? (module.exports = t())
    : "function" == typeof define && define.amd
    ? define("darkmode-js", [], t)
    : "object" == typeof exports
    ? (exports["darkmode-js"] = t())
    : (e["darkmode-js"] = t());
})("undefined" != typeof self ? self : this, function () {
  return (function (e) {
    var t = {};
    function n(o) {
      if (t[o]) return t[o].exports;
      var r = (t[o] = { i: o, l: !1, exports: {} });
      return e[o].call(r.exports, r, r.exports, n), (r.l = !0), r.exports;
    }
    return (
      (n.m = e),
      (n.c = t),
      (n.d = function (e, t, o) {
        n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: o });
      }),
      (n.r = function (e) {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(e, "__esModule", { value: !0 });
      }),
      (n.t = function (e, t) {
        if ((1 & t && (e = n(e)), 8 & t)) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var o = Object.create(null);
        if (
          (n.r(o),
          Object.defineProperty(o, "default", { enumerable: !0, value: e }),
          2 & t && "string" != typeof e)
        )
          for (var r in e)
            n.d(
              o,
              r,
              function (t) {
                return e[t];
              }.bind(null, r)
            );
        return o;
      }),
      (n.n = function (e) {
        var t =
          e && e.__esModule
            ? function () {
                return e.default;
              }
            : function () {
                return e;
              };
        return n.d(t, "a", t), t;
      }),
      (n.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }),
      (n.p = ""),
      n((n.s = 0))
    );
  })([
    function (e, t, n) {
      "use strict";
      Object.defineProperty(t, "__esModule", { value: !0 }),
        (t.default = void 0);
      var o = (function (e) {
        if (e && e.__esModule) return e;
        var t = {};
        if (null != e)
          for (var n in e)
            if (Object.prototype.hasOwnProperty.call(e, n)) {
              var o =
                Object.defineProperty && Object.getOwnPropertyDescriptor
                  ? Object.getOwnPropertyDescriptor(e, n)
                  : {};
              o.get || o.set ? Object.defineProperty(t, n, o) : (t[n] = e[n]);
            }
        return (t.default = e), t;
      })(n(1));
      var r = o.default;
      (t.default = r),
        o.IS_BROWSER &&
          (function (e) {
            e.Darkmode = o.default;
          })(window),
        (e.exports = t.default);
    },
    function (e, t, n) {
      "use strict";
      function o(e, t) {
        for (var n = 0; n < t.length; n++) {
          var o = t[n];
          (o.enumerable = o.enumerable || !1),
            (o.configurable = !0),
            "value" in o && (o.writable = !0),
            Object.defineProperty(e, o.key, o);
        }
      }
      Object.defineProperty(t, "__esModule", { value: !0 }),
        (t.default = t.IS_BROWSER = void 0);
      var r = "undefined" != typeof window;
      t.IS_BROWSER = r;
      var a = (function () {
        function e(t) {
          if (
            ((function (e, t) {
              if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function");
            })(this, e),
            r)
          ) {
            t = Object.assign(
              {},
              {
                bottom: "32px",
                right: "32px",
                left: "unset",
                time: "0.3s",
                mixColor: "#fff",
                backgroundColor: "#fff",
                buttonColorDark: "#100f2c",
                buttonColorLight: "#fff",
                label: "",
                saveInCookies: !0,
                autoMatchOsTheme: !0,
              },
              t
            );
            var n = "\n      .darkmode-layer {\n        position: fixed;\n        pointer-events: none;\n        background: "
                .concat(t.mixColor, ";\n        transition: all ")
                .concat(
                  t.time,
                  " ease;\n        mix-blend-mode: difference;\n      }\n\n      .darkmode-layer--button {\n        width: 2.9rem;\n        height: 2.9rem;\n        border-radius: 50%;\n        right: "
                )
                .concat(t.right, ";\n        bottom: ")
                .concat(t.bottom, ";\n        left: ")
                .concat(
                  t.left,
                  ";\n      }\n\n      .darkmode-layer--simple {\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        transform: scale(1) !important;\n      }\n\n      .darkmode-layer--expanded {\n        transform: scale(100);\n        border-radius: 0;\n      }\n\n      .darkmode-layer--no-transition {\n        transition: none;\n      }\n\n      .darkmode-toggle {\n        background: "
                )
                .concat(
                  t.buttonColorDark,
                  ";\n        width: 3rem;\n        height: 3rem;\n        position: fixed;\n        border-radius: 50%;\n        border:none;\n        right: "
                )
                .concat(t.right, ";\n        bottom: ")
                .concat(t.bottom, ";\n        left: ")
                .concat(
                  t.left,
                  ";\n        cursor: pointer;\n        transition: all 0.5s ease;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .darkmode-toggle--white {\n        background: "
                )
                .concat(
                  t.buttonColorLight,
                  ";\n      }\n\n      .darkmode-toggle--inactive {\n        display: none;\n      }\n\n      .darkmode-background {\n        background: "
                )
                .concat(
                  t.backgroundColor,
                  ";\n        position: fixed;\n        pointer-events: none;\n        z-index: -10;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n      }\n\n      img, .darkmode-ignore {\n        isolation: isolate;\n        display: inline-block;\n      }\n\n      @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n        .darkmode-toggle {display: none !important}\n      }\n\n      @supports (-ms-ime-align:auto), (-ms-accelerator:true) {\n        .darkmode-toggle {display: none !important}\n      }\n    "
                ),
              o = document.createElement("div"),
              a = document.createElement("button"),
              i = document.createElement("div");
            (a.innerHTML = t.label),
              a.classList.add("darkmode-toggle--inactive"),
              o.classList.add("darkmode-layer"),
              i.classList.add("darkmode-background");
            var d = "true" === window.localStorage.getItem("darkmode"),
              s =
                t.autoMatchOsTheme &&
                window.matchMedia("(prefers-color-scheme: dark)").matches,
              l = null === window.localStorage.getItem("darkmode");
            ((!0 === d && t.saveInCookies) || (l && s)) &&
              (o.classList.add(
                "darkmode-layer--expanded",
                "darkmode-layer--simple",
                "darkmode-layer--no-transition"
              ),
              a.classList.add("darkmode-toggle--white"),
              document.body.classList.add("darkmode--activated")),
              document.body.insertBefore(a, document.body.firstChild),
              document.body.insertBefore(o, document.body.firstChild),
              document.body.insertBefore(i, document.body.firstChild),
              this.addStyle(n),
              (this.button = a),
              (this.layer = o),
              (this.saveInCookies = t.saveInCookies),
              (this.time = t.time);
          }
        }
        var t, n, a;
        return (
          (t = e),
          (n = [
            {
              key: "addStyle",
              value: function (e) {
                var t = document.createElement("link");
                t.setAttribute("rel", "stylesheet"),
                  t.setAttribute("type", "text/css"),
                  t.setAttribute(
                    "href",
                    "data:text/css;charset=UTF-8," + encodeURIComponent(e)
                  ),
                  document.head.appendChild(t);
              },
            },
            {
              key: "showWidget",
              value: function () {
                var e = this;
                if (r) {
                  var t = this.button,
                    n = this.layer,
                    o = 1e3 * parseFloat(this.time);
                  t.classList.add("darkmode-toggle"),
                    t.classList.remove("darkmode-toggle--inactive"),
                    t.setAttribute("aria-label", "Activate dark mode"),
                    t.setAttribute("aria-checked", "false"),
                    t.setAttribute("role", "checkbox"),
                    n.classList.add("darkmode-layer--button"),
                    t.addEventListener("click", function () {
                      var r = e.isActivated();
                      r
                        ? (n.classList.remove("darkmode-layer--simple"),
                          t.setAttribute("disabled", !0),
                          setTimeout(function () {
                            n.classList.remove("darkmode-layer--no-transition"),
                              n.classList.remove("darkmode-layer--expanded"),
                              t.removeAttribute("disabled");
                          }, 1))
                        : (n.classList.add("darkmode-layer--expanded"),
                          t.setAttribute("disabled", !0),
                          setTimeout(function () {
                            n.classList.add("darkmode-layer--no-transition"),
                              n.classList.add("darkmode-layer--simple"),
                              t.removeAttribute("disabled");
                          }, o)),
                        t.classList.toggle("darkmode-toggle--white"),
                        document.body.classList.toggle("darkmode--activated"),
                        window.localStorage.setItem("darkmode", !r);
                    });
                }
              },
            },
            {
              key: "toggle",
              value: function () {
                if (r) {
                  var e = this.layer,
                    t = this.isActivated(),
                    n = this.button;
                  e.classList.toggle("darkmode-layer--simple"),
                    document.body.classList.toggle("darkmode--activated"),
                    window.localStorage.setItem("darkmode", !t),
                    n.setAttribute("aria-label", "De-activate dark mode"),
                    n.setAttribute("aria-checked", "true");
                }
              },
            },
            {
              key: "isActivated",
              value: function () {
                return r
                  ? document.body.classList.contains("darkmode--activated")
                  : null;
              },
            },
          ]) && o(t.prototype, n),
          a && o(t, a),
          e
        );
      })();
      t.default = a;
    },
  ]);
});
```

{% endfold  %}

很容易找到 116 行开始的参数以及样式配置。其中有许多属性并不认识，全文就出现两次 mixColor，一次是参数赋值，另一次是 t.mixColor，于是猜测与 t 有关，同时搜索与 mix 有关词眼，发现了就出现三次，两次为 mixColor，还有一次 mix-blend-mode，我见其写法像 css 属性，于是搜索了解到[该属性](https://developer.mozilla.org/zh-CN/docs/Web/CSS/mix-blend-mode)描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合。我在 PS 中见过以差值方式混合颜色，故而也大概明白了页面出现怪异颜色的原因。

接着我想到能否不用这么高深的方法实现深色，简单点用 css 换颜色就行了。于是我尝试删去 mix 有关语句，经过数次试验后，预览终于不报错。接着再想如何利用深色模式下的选择器实现点击按钮换颜色。仔细浏览官方说明，发现这一条关于覆盖样式的说明：[Override style](https://github.com/sandoche/Darkmode.js#override-style)。其中讲到：

{% note info no-icon %}
* A CSS class darkmode--activated is added to the body tag when the darkmode is activated. You can take advantage of it to override the style and have a custom style

* Use the class darkmode-ignore where you don't want to apply darkmode

* You can also add this style: isolation: isolate; in your CSS, this will also ignore the darkmode.

* It is also possible to revert the Dark Mode with this style mix-blend-mode: difference;

{% endnote %}

第一句话很明显告知我们该如何自定义样式，于是解决问题。

深入浏览官方文档发现很多问题都豁然开朗，官方文档算是最权威的教程！

以及接下来适配各种元素的样式，更是让我对 F12 更加熟练，对各种属性也更加清晰。

上述经历是一种成长，在此叙述以留念🙃。



<img alt="method1" class="gifplayer" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/dark-one/an-one.png" >]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>探索“亮/暗”主题实现</title>
    <url>/9/</url>
    <content><![CDATA[
{% note success %}
尝试为博客添加一个切换亮暗主题的功能。
{% endnote %}

<!--more-->

## 版本信息

{% tabs version %}
<!-- tab Next -->

<strong><div align="center">version：8.2.1</div></strong>

<!-- endtab -->

<!-- tab Hexo-->
<strong><div align="center">hexo: 5.3.0
hexo-cli: 3.1.0</div></strong>
<!-- endtab -->

{% endtabs %}

---

## 方法一

1. ### 概述
	简单的添加一个button按钮，并为按钮以及黑暗模式设计样式，最后加入为按钮的 onclick 事件而设计的 js 代码。
	
2. ### 添加 button
	button 的位置取决于存在哪个元素对应的 njk 文件中，这里我将 button 放在 sidebar 中。故而先前往 _config.yml 取消 custom_file_path 关于 sidebar.njk 的注释，然后在`站点根目录/source/_data`下建立文件 sidebar.njk（已有sidebar.njk 的可忽略此步）。在其中加入：

   ```
   <a id="theme_change"
           type="button"
           onclick="theme_change()"
   >
      🌞
   </a>
   ```

3. ### 设计样式

   同理取消关于 styles.styl 的注释并建立此文件，并在该文件中加入关于主题切换 button 的样式。

   {% note info %}

   styles.styl 中能加入博客所有元素的样式设计代码。为了方便管理，我这利用 @import 引入绝对路径下的样式代码。

   {% endnote %}

   此处的 button 属于自定义内容，故而我在 _data 下创建文件夹 custom，并在其中建立 dark-theme.styl，然后在 styles.styl 文件中加入：

   ```stylus
   /*自定义主题样式设置*/
   @import "custom/dark-theme";
   ```

   最后在 dark-theme.styl 中加入：

   ```stylus
   // 黑暗主题样式
   body.dark-theme {
       background: #282c34		/* 设置黑暗主题背景颜色 */
   }
   ```

   这里我添加的 button 属于超链接（`<a></a>`），若利用`<button></button>`，还能在 dark-theme.styl 中设计 button 元素的样式，详情见[此文](http://pygo2.top/articles/41680/)。
   
4. ### 添加 JS

   由`onclick="theme_change()"`可知当我们点击 🌞 这个 button 时，会执行`theme_change()` 这个函数。所以设计并添加 `theme_change()`：建立`source/js/theme_change.js`文件，在 theme_change.js 中设计`theme_change()`，最后引入 theme_change.js 。具体如下：

   ```javascript
   // source/js/theme_change.js
   // 主题切换功能
   function theme_change() {
       // 切换字内容
       var button = document.getElementById('theme_change');
       var pattern = new RegExp('🌞', 'i');
       if (pattern.test(button.innerHTML)){
           button.innerHTML = "🌙";
       } else{
           button.innerHTML = "🌞";
       }	
       // 切换主题
       document.body.classList.toggle('dark-theme');
   	setCookie("inner",button.innerHTML,1)
   };
   ```

   同前所述，取消 footer.njk 的注释，并建立`source/_data/footer.njk`（此文件以及 body-end.njk 均被我用作引入 js）。footer.njk 中加入：

   ```nginx
   {# 自定义黑暗主题切换 #}
   <script type="text/javascript" src="/js/theme_change.js"></script>
   ```

   至此已完成，效果如下：

   <img alt="method1" class="gifplayer" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/try-light-dark-themes/method1.png" >
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试加密功能</title>
    <url>/8/</url>
    <content><![CDATA[
测试插件 hexo-blog-encrypt。
<!--more-->

```c
npm install --save hexo-blog-encrypt
```

```yaml
# 文章加密功能
encrypt:
    enable: true
```

```yaml
password: 博客密码
abstract: home 主页显示的文字提示
message: 查看博客，密码输入框上面的描述性文字
```

[hexo-blog-encrypt 资料](https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md)。


{% fold 点击显/隐内容 %}
```nginx
{% fold 点击显/隐内容 %}
something you want to fold, include code block.
{% endfold %}
```
{% endfold %}]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>记录 tags 用法</title>
    <url>/7/</url>
    <content><![CDATA[
{% cq %}Next主题使用的内置tag，官方都已经写好js

我们只要根据官方教程调用，就可以实现多样式、多功能的效果。{% endcq %}
<!--more-->

## 设置

```yaml
# 配置文件
# ---------------------------------------------------------------
# Tags Settings
# See: https://theme-next.js.org/docs/tag-plugins/
# ---------------------------------------------------------------

# Note tag (bootstrap callout)
note:
  # Note tag style values:
  #  - simple    bootstrap callout old alert style. Default.
  #  - modern    bootstrap callout new (v2-v3) alert style.
  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.
  #  - disabled  disable all CSS styles import of note tag.
  style: flat
  icons: false
  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).
  # Offset also applied to label tag variables. This option can work with disabled note tag.
  light_bg_offset: 0

# Tabs tag
tabs:
  transition:
  tabs: false
  labels: true

# PDF tag
# NexT will try to load pdf files natively, if failed, pdf.js will be used.
# So, you have to install the dependency of pdf.js if you want to use pdf tag and make it available to all browsers.
# Dependencies: https://github.com/next-theme/theme-next-pdf
pdf:
  enable: false
  # Default height
  height: 500px

# Mermaid tag
mermaid:
  enable: false
  # Available themes: default | dark | forest | neutral
  theme: forest
```

## 使用

看[官方文档](https://theme-next.js.org/docs/tag-plugins/)。

1. ### [Note](https://theme-next.js.org/docs/tag-plugins/note.html)

    #### 配置

    ```
    note:
      # Note tag style values:
      #  - simple    bs-callout old alert style. Default.
      #  - modern    bs-callout new (v2-v3) alert style.
      #  - flat      flat callout style with background, like on Mozilla or StackOverflow.
      #  - disabled  disable all CSS styles import of note tag.
      style: modern
      icons: true
      # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).
      # Offset also applied to label tag variables. This option can work with disabled note tag.
      light_bg_offset: 0
    ```

    #### 用法

    ```nginx
    {% note default %}
    ##### Default Header
    Welcome to [Hexo!](https://hexo.io)
    {% endnote %}
    ```

    {% note default %}
    ##### Default Header
    Welcome to [Hexo!](https://hexo.io)
    {% endnote %}

    ```nginx
    {% note primary %}
    ##### Primary Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}
    ```

    {% note primary %}
    ##### Primary Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}

    ```nginx
    {% note info %}
    ##### Info Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}
    ```
    {% note info %}
    ##### Info Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}

    ```nginx
    {% note success %}
    ##### Success Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}
    ```

    {% note success %}
    ##### Success Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}

    ```nginx
    {% note warning %}
    ##### Warning Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}
    ```

    {% note warning %}
    ##### Warning Header
    **Welcome** to [Hexo!](https://hexo.io)
    {% endnote %}

2. ### [Tabs](https://theme-next.js.org/docs/tag-plugins/tabs.html)

    #### 配置

    ```yaml
    tabs:
      transition:
        tabs: false
        labels: true
    ```

    #### 用法

    ```nginx
    {% tabs Unique name, [index] %}
    <!-- tab [Tab caption] [@icon] -->
    Any content (support inline tags too).
    <!-- endtab -->
    {% endtabs %}
    ```

    ```nginx
    {% tabs First unique name %}
    <!-- tab -->
    **This is Tab 1.**
    <!-- endtab -->

    <!-- tab -->
    **This is Tab 2.**
    <!-- endtab -->

    <!-- tab -->
    **This is Tab 3.**
    <!-- endtab -->
    {% endtabs %}
    ```

    {% tabs First unique name %}
    <!-- tab -->
    **This is Tab 1.**
    <!-- endtab -->

    <!-- tab -->
    **This is Tab 2.**
    <!-- endtab -->

    <!-- tab -->
    **This is Tab 3.**
    <!-- endtab -->
    {% endtabs %}

    可以嵌套使用

3. ### [Mermaid](https://theme-next.js.org/docs/tag-plugins/mermaid.html)

    #### 配置

    ```yaml
    # Mermaid tag
    mermaid:
      enable: true
      # Available themes: default | dark | forest | neutral
      theme: forest
    ```

    #### 使用

    ```nginx
    {% mermaid type %}
    {% endmermaid %}
    ```

    ```nginx
    {% mermaid graph TD %}
    A[Hard] -->|Text| B(Round)
    B --> C{Decision}
    C -->|One| D[Result 1]
    C -->|Two| E[Result 2]
    {% endmermaid %}
    ```

    ```nginx
    {% mermaid graph TD %}
    A[Christmas] -->|Get money| B(Go shopping)
    B --> C{Let me thinksssss<br/>ssssssssssssssssssssss}
    C -->|One| D[Laptop]
    C -->|Two| E[iPhone]
C -->|Three| F[Car]
    {% endmermaid %}
    ```
    
    <p class='div-border red'>有错误，不用</p>
    
4. ### cq && centerquote

    ```nginx
    {% cq %}
    **文本居中**
    引用样式
    cq 与 centerquote 等价
    {% endcq %}
    ```

    {% centerquote %}
    **文本居中**
    引用样式
    cq与centerquote等价
    {% endcenterquote %}

5. ### [Label](https://theme-next.js.org/docs/tag-plugins/label.html)

    ```nginx
    # 内置label标签。
    {% label default@default %}
    {% label primary@primary %}
    {% label success@success %}
    {% label info@info %}
    {% label warning@warning %}
    {% label danger@danger %}
    ```


<div align="center">
{% label default@default %}
{% label primary@primary %}
{% label success@success %}
{% label info@info %}
{% label warning@warning %}
{% label danger@danger %}
</div>

6. ### [button && btn](https://theme-next.js.org/docs/tag-plugins/button.html)

    **内置button**标签。btn与button等价。

    ```
    {% btn https://www.baidu.com, 百度首页, download fa-lg fa-fw %}
    ```

    <div align="center">{% btn https://www.baidu.com, 百度首页, download fa-lg fa-fw %}</div>

## 参考文章

* [Next主题优化-内置tags篇](http://pygo2.top/articles/25933/)

* [Tag Plugins](https://theme-next.js.org/docs/tag-plugins/)]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 bash 脚本提高效率-git push</title>
    <url>/6/</url>
    <content><![CDATA[
{% cq %}每次提交都要输重复命令

遂想能否通过脚本来自动执行，省的手动重复输入这三个命令

上网查询，发现可以通过 bash 命令。{% endcq %}
<!--more-->

## 概述

利用 git 命令更新代码仓库，普遍三个命令：

```c
git add .
git commit -m "message"
git push origin main
```

每次提交都要输一遍这三行，于是想到能否通过脚本来自动执行这三个，省的手动重复输入这三个命令。上网查询，发现可以通过 bash 命令。

## 实现

根据网上教程，编写出以下代码：

```bash
# 命名：git_WillCAI2020.bat
@echo off
echo "Introduction: Update the remote repository, written by ruchan"
echo "Steps:"

::注意修改为你自己的仓库地址
echo "1. Move to working directory" 
cd D:\Github\WillCAI2020\blog

echo "2. Display the status of the working directory and staging area" 
git status

echo "3. Start submitting code to the local repository"
git add .
 
echo "4. Commit the changes to the local repository"
set /p message=请输入提交信息：
echo %message%
git commit -m "%message%"
 
echo "5. Push the changes to the remote git server"
git push origin main
 
echo "You have successfully submitted!"
pause
```

步骤如代码中注释，通俗易懂。

注意修改仓库路径，命名以 bat 结尾，存放位置任意。

执行代码时，还能手动输入待提交信息（利于帮助管理代码）。

使用时双击运行即可。

## 扩展

还想到能否通过 bash 来执行：

```c
hexo clean && hexo g && hexo s
```

然后直接把相关命令通过 dos 运行，这是发现结果并不如愿。

于是发现应该先通过 bash 命令启动 git-bash，然后在 Git 中执行 `hexo clean && hexo g && hexo s`。

得到：

```bash
@echo off

echo "Introduction: Preview your hexo site locally, written by ruchan"
echo "Steps:"

start C:\环境\Git\git-bash.exe --cd=D:\Github\WillCAI2020\blog -c "hexo clean && hexo g && hexo s"
```

虽然发现能行，但速度不大满意，还是手动输吧。

## 参考

* [Windows 下bat脚本git提交代码到github](https://blog.csdn.net/Ep_Little_prince/article/details/108895103)
* [.bat脚本基本命令语法](https://www.cnblogs.com/iTlijun/p/6137027.html)
* [.Bat之批处理实现手动输入变量参数](https://blog.csdn.net/laozhuxinlu/article/details/52853787)
* [bat 批处理教程](https://www.w3cschool.cn/dosmlxxsc1/wvqyr9.html)

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>git</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>提示：Your branch is up to date  ...</title>
    <url>/5/</url>
    <content><![CDATA[
{% cq %}解决提示：
“On branch main
Your branch is up to date with 'origin/main'.”
不能上传代码的问题。{% endcq %}
<!--more-->
## 记录

执行 git status 发现提示：

```c
On branch main
Your branch is up to date with 'origin/main'.
```

直接 `git add .`、`git commit -m "修改"`，`git push origin main`，发现无法提交。

于是搜索，根据这篇文章： [git commit提示Your branch is up-to-date with 'origin/master'.](https://www.jianshu.com/p/e25c763b9816)，认为是版本分支的原因（不大懂）。

1. ### 新建分支

    ```c
    git branch newbranch
    //查看是否是否创建成功
    git branch 
    //若结果中有 newbranch，即成功
    ```

2. ### 切换新分支并提交改动

    ```c
    git checkout newbranch
        git add . 
    git commit -m "改动"
    ```

3. ### 切换主分支并合并改动

    ```c
    git checkout master
    git merge newbranch 
    ```

4. ### 提交代码

    ```c
    git push -u origin master
    ```

5. ### 删除新分支

    ```c
    git branch -D newbranch
    ```


## 后记

完成上述流程后，已能提交代码，但是仍会提示：

```
On branch main
Your branch is up to date with 'origin/main'.
```

根据[此文](https://blog.csdn.net/S_o_l_o_n/article/details/108130341)，暂不理会。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>实现 Github Actions 持续部署</title>
    <url>/4/</url>
    <content><![CDATA[
{% cq %}完整实现 Github Actions 持续部署！{% endcq %}
<!--more-->

## 更新

浏览 Docker 方法，发现它模拟的是本地生成 SSH 密钥，然后通过密钥连接并推送代码到远程仓库。我也尝试把 `entrypoint.sh`中的命令化为一个个步骤，直接放在 jobs 中，而不是放在 Docker 容器中，但是发现我不会 linux，所以后面再说。

最终选择仍以 token 为路径，来提交代码。

## 实现

代码如下：

```
# 文件路径 .github/workflows/deployment.yml
name: Deployment

on:
  push:
    branches: [main] # only push events on source branch trigger deployment

jobs:
  hexo-deployment:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai

    steps:
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        
    - name: Install dependencies & Generate static files
      run: |
        node -v
        npm i -g hexo-cli
        npm i
        hexo clean
        hexo g        
    - name: Deploy to Github Pages
      env:
        GIT_NAME: WillCAI2020
        GIT_EMAIL: ${{ secrets.GIT_EMAIL_BLOG }}
        REPO: github.com/WillCAI2020/WillCAI2020.github.io
        GH_TOKEN: ${{ secrets.GH_TOKEN_BLOG }}
      run: |
        cd ./public && git init && git checkout -b main && git add .
        git config --global user.name $GIT_NAME
        git config --global user.email $GIT_EMAIL
        git commit -m "GitHub Actions Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"
        git push --force --quiet "https://$GH_TOKEN@$REPO" main:main

```

## 注意

变量命名以及步骤解释在此文均有讲解，这里不再赘述。

1. ### 分支

    2020年10月份开始 GitHub 把默认的 master 分支换成了 main 分支。为了方便，我在远程仓库的分支也设为了 main 分支。这里注意：本地 `git init`后默认仍为 master 分支，此时应将新建 main 分支，并切换到 main 分支。

    ```c
    //新建 main 分支，并切换到 main 分支
    git checkout -b main
    ```

2. ### 仓库

    我的源码放在了仓库 blog 中，但是为使用 gh-pages，生成的 public 静态文件必须放在 username.github.io 的仓库中。

    故而添加的 Secrets 变量均在 bolg 仓库中。


## 错误总结

原本我的仓库均只有 main 分支，而 jobs 代码并未加上 `git checkout -b main`，导致报错 `error: failed to push some refs to`，根据[此文](https://www.jianshu.com/p/c6f2e1ca2999)，同时浏览了 [Git push 讲解](https://www.yiibai.com/git/git_push.html)，然后从“分支名不完整、没有提交代码、本地与远程产生冲突”入手。

经过一番苦思，突然想到把远程那虚拟主机当成自己的电脑，直接 `git init`，然后 `git add .`，提交的不就是本地的 master 分支吗，但是我 `git push`指明本地的是 main 分支，而 main 分支不存在当然会报错，于是加上 `git checkout -b main`，解决问题。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>记录</title>
    <url>/2/</url>
    <content><![CDATA[
{% cq %}随手记。{% endcq %}

<!--more-->

```
hexo init
git init
由于使用SSH多账号，故而添加远程地址时要注意
为Github Actions 做准备
由于想在blog仓库放源码（要部署的文件一定得放在username.github.io仓库中），故而新生成一个SSH密钥，公钥作为username.github.io的Deploy KEY，私钥作为blog的变量
```

```css
html,body {
	margin: 0;
	padding:0;
	height: 100%;
}

.main{
	min-height:100%;
	height: auto !important;
	height: 100%; /*IE6不识别min-height*/
	position: relative;
}

.main-inner{
	margin: 0 auto;
	padding-bottom: 80px;
}
	
.footer{
	position: absolute;
	bottom: 0;
	width: 100%;
	height: 60px;
	clear: both;
}
```

```
git clone https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas_ribbon
```

```
git submodule add --depth 1 https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas_ribbon
```

```
git rm -r --cached source/lib/canvas_ribbon
```

```
git submodule add --depth 1 https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest
```

```
git rm -r --cached source/lib/canvas-nest
```

```
git rm -r --cached _config.landscape.yml
```

```
npm install hexo-generator-searchdb --save
```

```
https://github.com/WillCAI2020/blog/edit/main/source/
```

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.webp" data-src="https://s3.ax1x.com/2021/02/09/yaffns.png"  alt="彩色标签页">

```
a7ee87d5b4b364c71deb97c0a88976b982c41c01
```

```
git rm -r --cached actions
```

```
52a73c0d7f6af17588b4941829cd0ef8da372875
```

```
html是由很多元素组成的，而每个元素的样式由css控制，css有很多属性，比如这个background，还有这个设置透明度的，设置内边距(padding)，外边距(margin)的。
我们要充分利用浏览器的开发者工具，谷歌浏览器是F12，Edge也是，你看，我用这个选中我想修改的元素，而元素的样式可以通过一个又一个的类来控制，你看这个post-block类，（class就是类的意思：class="post-block"），在css，我们通过 .post-block来为类设置属性，你看我改变它的background
```

```c
git submodule add --depth 1 https://github.com/theme-next/theme-next-pace source/lib/pace
```

![加载进度条](https://s3.ax1x.com/2021/02/09/ydzxJS.png)

```
git submodule add --depth 1 https://github.com/stevenjoezhang/live2d-widget.git source/lib/live2d-widget
```

<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.webp" data-src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/try-light-dark-themes/method1.png" alt="test1">

<hr>
<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.webp" data-src="https://i.loli.net/2021/02/16/x39c4XnuqQeCgt7.jpg" alt="test2">

<hr>
<img class="lazyload" src="https://cdn.jsdelivr.net/gh/WillCAI2020/cdn/images/loading_cai.webp" data-src="https://i.loli.net/2021/02/16/ze5hlG1NIERATts.jpg" alt="test3">



```html
<div class='tip'><p>默认情况<p></div>
<div class='tip success'><p>success<p></div>
<div class='tip error'><p>error<p></div>
<div class='tip warning'><p>warning<p></div>
```

<div class='tip'><p>默认情况<p></div>
<div class='tip success'><p>success<p></div>
<div class='tip error'><p>error<p></div>
<div class='tip warning'><p>warning<p></div>

```
<a href="https://willcai2020.github.io/" class="LinkCard">欢迎来到——我的小站</a>
```

<a href="https://willcai2020.github.io/" class="LinkCard">欢迎来到——我的小站</a>

```
/* note语法示例 */
<p class='div-border green'>绿色</p>
<p class='div-border red'>红色</p>
<p class='div-border yellow'>黄色</p>
<p class='div-border grey'>灰色</p>
<p class='div-border blue'>蓝色</p>

/* 小tag标签语法示例 */
<span class="inline-tag red">红色小标签</span>
<span class="inline-tag green">绿色小标签</span>
<span class="inline-tag blue">蓝色小标签</span>
<span class="inline-tag yellow">黄色小标签</span>
<span class="inline-tag grey">灰色小标签</span>
```
/* note语法示例 */
<p class='div-border green'>绿色</p>
<p class='div-border red'>红色</p>
<p class='div-border yellow'>黄色</p>
<p class='div-border grey'>灰色</p>
<p class='div-border blue'>蓝色</p>

/* 小tag标签语法示例 */
<span class="inline-tag red">红色小标签</span>
<span class="inline-tag green">绿色小标签</span>
<span class="inline-tag blue">蓝色小标签</span>
<span class="inline-tag yellow">黄色小标签</span>
<span class="inline-tag grey">灰色小标签</span>

试验pangu，此行中英文间未加空格。

来tryagain，这是pangu，能给文章中English添加space。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>record</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
